<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog of 太极儒]]></title>
  <link href="http://frank19900731.github.io/atom.xml" rel="self"/>
  <link href="http://frank19900731.github.io/"/>
  <updated>2014-12-03T12:52:24+08:00</updated>
  <id>http://frank19900731.github.io/</id>
  <author>
    <name><![CDATA[Frank Song]]></name>
    <email><![CDATA[scr_0731@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matrix67 博客中智力题粗分类]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/29/matrix67-bo-ke-zhong-zhi-li-ti-cu-fen-lei/"/>
    <updated>2014-11-29T15:03:44+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/29/matrix67-bo-ke-zhong-zhi-li-ti-cu-fen-lei</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">几何题</a></li>
  <li><a href="#section-2">概率统计</a></li>
  <li><a href="#section-3">程序算法</a></li>
  <li><a href="#section-4">数学证明</a></li>
  <li><a href="#section-5">益智趣题</a>    <ul>
      <li><a href="#section-6">组合数学与图论</a></li>
      <li><a href="#section-7">博弈/最优策略</a></li>
      <li><a href="#section-8">几何相关</a></li>
      <li><a href="#section-9">物理方法</a></li>
      <li><a href="#section-10">有趣的构造</a></li>
      <li><a href="#section-11">趣题集锦</a></li>
      <li><a href="#section-12">其它</a></li>
    </ul>
  </li>
  <li><a href="#section-13">总结</a></li>
</ul>

<h2 id="section">前言</h2>

<!-- excerpt start -->

<p>如果不是为了准备面试（其实也很适合面试官看看），自己可能迟迟不会有把 <a href="http://www.matrix67.com/blog/">Matrix67</a> 大牛的博客“刷一遍”的动力。“刷一遍”显然是夸张的说法，一来我只是看了有出题可能性的文章，偏爱有生活化表达形式的题目，比如概率博弈问题，其它的如果证明计算较复杂或需要有背景知识，则可能不适合；二来在看的过程中也发现，M 牛的一些博文已经成了死链，且有些文章话未尽而终、下篇不可寻，也就更“刷不完”了。</p>

<p>除了显见的接触更多有趣的数学问题和思维方法这点好处之外，看 M 牛博客带来的其它收获是</p>

<ul>
  <li>在评论中学习了不少其他牛人的观点，获得了他们的博客链接，如
    <ul>
      <li><a href="http://zhiqiang.org/blog/">阅微堂</a> </li>
    </ul>
  </li>
  <li>了解到一些高质量数学 puzzle，如
    <ul>
      <li><a href="http://domino.research.ibm.com/Comm/wwwr_ponder.nsf/Challenges/December2014.html">IBM Ponder This</a></li>
      <li><a href="http://www.brand.site.co.il/riddles/usingyourhead.html">UyHiP</a></li>
    </ul>
  </li>
  <li>了解数学科普读物和网络资源若干，如
    <ul>
      <li><a href="http://www.douban.com/link2/?url=http%3A%2F%2Fbook.douban.com%2Fsubject%2F1414810%2F&amp;query=proofs+from+the+book&amp;cat_id=1001&amp;type=search&amp;pos=0">Proofs from THE BOOK</a></li>
      <li><a href="http://www.douban.com/link2/?url=http%3A%2F%2Fbook.douban.com%2Fsubject%2F1320282%2F&amp;query=%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E5%AD%A6&amp;cat_id=1001&amp;type=search&amp;pos=0">什么是数学</a></li>
      <li><a href="http://www.cut-the-knot.org/">cut-the-knot</a></li>
    </ul>
  </li>
</ul>

<p>我所关注的题目大概可以分为以下种类型，匹配的一句话介绍不保证全面。</p>

<ul>
  <li>几何题
    <ul>
      <li>用初等几何的方法求值、证明，尺规作图；</li>
    </ul>
  </li>
  <li>概率统计
    <ul>
      <li>概率与期望的巧算；</li>
    </ul>
  </li>
  <li>程序算法
    <ul>
      <li>M 牛对于某道题目的求解或对一类算法的理解总结；</li>
    </ul>
  </li>
  <li>数学证明
    <ul>
      <li>一些经典结论的另类证明思路，增进对已知结论的理解；</li>
    </ul>
  </li>
  <li>趣题
    <ul>
      <li>通过一些巧妙的证明思路和构造方法解题，最是赏心悦目，与组合数学、图论、博弈论等有关。</li>
    </ul>
  </li>
</ul>

<p>以下分别列举。我会用 ★ 标记出自己觉得称得上简单精妙的计算/证明/构造，以及有趣的结论，不打算完整阅读的朋友可以选看。</p>

<p>其中有四道题是 ★★，确实很感动 ~&gt;-&lt;~。</p>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/3638">用数学解赌博问题不稀奇，用赌博解数学问题才牛B</a> </li>
  <li><a href="http://www.matrix67.com/blog/archives/2494">Buffon投针实验：究竟为什么是pi？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/954">趣题：用最少的“并行交换”完成排序</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4248">趣题：能否把三维空间分成无穷个圆？</a></li>
</ul>

<!-- excerpt end -->

<h2 id="section-1">几何题</h2>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/5293">趣题：平行线之间的正方形</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5398">趣题：不用三角函数求出∠BAC的度数</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5883">趣题：圆中的两个相切的半圆</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5321">趣题：斜边上的动点</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/4545">经典证明：等边三角形内一点到各顶点的距离长可构成一个三角形</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4485">趣题：不用相似怎么办？</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/2946">也说Pizza问题：分享几个漂亮的证明</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/2896">趣题：三角形两顶点在直线上滑动时第三点的轨迹</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/2447">趣题：货架上的听装可乐</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2383">空间想象能力挑战：立方体相邻面两对角线的最近距离？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/507">趣题：空间四边形外切于给定球，求证四切点共面</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/505">趣题：用正三角形和正四边形构成凸多边形</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/497">神奇的锈规作图：单用一个只能画单位圆的圆规如何作等边三角形</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/466">几道经典的几何作图趣题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/314">趣题：等腰直角三角形与勾股定理形式的条件</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/312">趣题：内切圆与最大内接矩形</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/231">借用点其它的东西，你或许可以三等分角</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/204">趣题：哪条线段最长，哪条线段最短</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/58">几个把平面几何问题的辅助线做到空间去的数学趣题</a></li>
</ul>

<h2 id="section-2">概率统计</h2>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/5165">趣题：测量两根木棒长度的更优方案</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/6015">Penney 的游戏：正所谓后发制人，先发制于人</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/6151">趣题：用两枚硬币随机生成 1 到 n 之间的整数</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4534">生成函数的妙用：平均抛掷多少次硬币才会出现连续两个正面？</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/4429">趣题：公司应该雇用多少员工？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4125">趣题：随机折断的木棒</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/3936">趣题：平均要取到第几个随机数才会让序列第一次下降</a></li>
  <li>★★ <a href="http://www.matrix67.com/blog/archives/3638">用数学解赌博问题不稀奇，用赌博解数学问题才牛B</a> </li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/3507">惊人的答案：平均要取多少个(0,1)中的随机数才能让和超过1</a></li>
  <li>★★ <a href="http://www.matrix67.com/blog/archives/2494">Buffon投针实验：究竟为什么是pi？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2339">趣题：构造骰子使其与两个标准骰子等价</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/879">随机洗牌：哪一种算法是正确的？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/572">设计调查问卷的艺术：怎样才能绝对地保证个人隐私不被泄露</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/432">非传递性骰子：A比B好，B比C好，A不一定比C好</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/412">概率学的创立：Chevalier de Méré问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/366">KMP算法与一个经典概率问题</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/364">趣题：直觉 VS 理性思考 经典概率问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/273">趣题：非常具有启发性的概率问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/251">又是黑色星期五！为什么总是黑色星期五呢？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/191">又一个比较诡异的悖论</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/205">趣题：阿米巴的生存</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/136">信息学竞赛中可能有用的概率学知识</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/120">什么是生成函数？</a></li>
</ul>

<h2 id="section-3">程序算法</h2>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/5190">网络流和棒球赛淘汰问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/3985">神秘常量复出！用0x077CB531计算末尾0的个数</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/3066">如此排序能成吗？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2605">贪心算法的一个出人意料的应用</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/1255">一个简单而有用的数据结构</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/1241">趣题：在双向有序链表中查找指定的数</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/1089">趣题：用正则表达式判断一个二进制数是否能被3整除</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/1057">漫话二分（下）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/1013">漫话二分（上）</a></li>
  <li>★★ <a href="http://www.matrix67.com/blog/archives/954">趣题：用最少的“并行交换”完成排序</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/944">趣题：只用赋值、自增和循环操作实现减法运算</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/901">停机问题、Chaitin常数与万能证明方法</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/858">趣题：用最少的块移动实现逆序操作</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/813">趣题：用位运算生成下一个含有k个1的二进制数</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/730">思考的乐趣：UyHiP趣题之用最少的块移动实现逆序操作</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/511">趣题：寻找出现了奇数次的数</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/475">牛B的正则表达式：素数判定与线性方程求解</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/415">趣题：经典二分问题的一个扩展</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/393">计算阶乘的另一些有趣的算法</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/371">标题党 之 密码学家用PS3成功预测美国2008大选结果</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/362">旧闻一则：神秘的0x5f3759df 不可思议的Quake III源码</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/342">趣题：Anagram辅助程序的数据结构</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/331">Google面试题中的两道趣题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/333">编辑距离、拼写检查与度量空间：一个有趣的数据结构</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/276">十个利用矩阵乘法解决的经典题目</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/268">位运算简介及实用技巧（四）：实战篇</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/266">位运算简介及实用技巧（三）：进阶篇(2)</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/264">位运算简介及实用技巧（二）：进阶篇(1)</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/263">位运算简介及实用技巧（一）：基础篇</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/185">OI之外的一些东西：简单谈谈排序网络</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/178">从零开始学算法：十种排序算法介绍（下）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/166">从零开始学算法：十种排序算法介绍（中）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/166">从零开始学算法：十种排序算法介绍（上）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/115">KMP算法详解</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/112">最长公共上升子序列的另一个O(mn)的算法</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/92">《数据结构与算法分析》5000字缩写（下）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/91">《数据结构与算法分析》5000字缩写（中）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/90">《数据结构与算法分析》5000字缩写（上）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/30">原创科普说明文：递归</a></li>
</ul>

<h2 id="section-4">数学证明</h2>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/5562">立方和公式的一个组合数学证明</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/6105">利用重心推导平方和公式</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4955">正多边形的滚动与旋轮线下方的面积</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/4891">Fibonacci数列性质的组合证明</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2904">经典证明：1+2+3+…+(n-1) = C(n,2)</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2753">利用阶乘因子数公式证明素数无穷多</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2700">经典证明：用信息熵证明素数无穷多</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/768">最酷的证明：Pick定理另类证法</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/495#more-495">《什么是数学》读书笔记（一）：反证法、数学归纳法与唯一分解定理</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/358">局部变动原理：算术平均数不小于几何平均数</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/228">推荐： The Hundred Greatest Theorems</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/206">又一种证明根号2是无理数的方法</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/156">令人称奇的简单证明：五种方法证明根号2是无理数</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5094">经典证明：Ptolemy定理的无字证明</a></li>
</ul>

<h2 id="section-5">益智趣题</h2>

<p>益智趣题的数量很多，想要准确的细分类较难，所以标题里的“粗分类”用在这里了……</p>

<h3 id="section-6">组合数学与图论</h3>

<ul>
  <li>★ <a href="http://www.matrix67.com/blog/archives/801">趣题：奇怪的有向图 任两点间两步之内可达的路径有且仅有一条</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/751">趣题：2n+1个点中任n个都与同一点相连，则存在一个连接所有点的点</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/746">趣题：循环赛中总存在一人“可传递一次”地打败了所有人</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/461">趣题：鸽笼原理的应用 IMO 2001 Problem #3</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2538">趣题：某个经典结论的妙用</a></li>
</ul>

<h3 id="section-7">博弈/最优策略</h3>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/5523">趣题：庄家的秘密序列</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4966">趣题：八根并排放置的水管</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4631">趣题：旋转桌子避免灯泡全亮</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/456">趣题：猜帽子游戏与Hamming编码</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/452">很诡异的博弈问题分析方法</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/444">100囚犯问题、100囚犯问题加强版与选择公理（下）</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/443">100囚犯问题、100囚犯问题加强版与选择公理（上）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/3771">UyHiP趣题：100囚犯之黑白手套</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/2762">趣题：数轴上的潜水艇</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2712">瓶魔悖论与不完全信息</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/1671">一道智力题：世上最毒的毒药</a></li>
</ul>

<h3 id="section-8">几何相关</h3>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/5270">经典证明：任意三角形都能被分成n≥4个等腰三角形</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5382">趣题：设计多边形围墙使得对于某一观察点所有的墙都不完全可见</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5313">趣题：同时等分三角形周长和面积的直线</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4525">趣题：能否在等边三角形点阵中画一个正方形？</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/4480">盯着结论看，直到它变得显然成立为止</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5040">贴着另一枚硬币旋转一周则自身转了两周：不同的解释方法</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5004">趣题：构造多边形使得过边界上某一点的任意直线均能等分面积</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5521">两两接触的等粗且无限长的圆柱体</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5495">趣题：把比萨分成若干等份使得至少有一份不含边</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/3878">趣题：面积为1的凸多边形总能放进一个面积为2的矩形里</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/853">为什么平分圆面积的所有曲线中以直径最短？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/528">趣题：直尺不够长时如何作出连接两点的直线？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/405">趣题：n为奇数时，正n边形的三角形剖分内有且仅有一个锐角三角形</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/300">趣题：单位正方形内相互分离的两个小正方形，其边长和小于1</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/6204">趣题：构造点集使得每条直线上的点都一样多</a></li>
</ul>

<h3 id="section-9">物理方法</h3>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/470">物理方法解决数学问题（五）：一个与椭圆有关的性质</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/422">物理方法解决数学问题（四）：Fermat-Torricelli问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/419">物理方法解决数学问题（三）：神奇的Fermat原理</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/392">物理方法解决数学问题（二）：Archimedes与球体积公式</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/391">物理方法解决数学问题（一）：从一个简单的平面几何题谈起</a></li>
</ul>

<h3 id="section-10">有趣的构造</h3>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/4731">经典证明：能否在平面上写下不可数个不相交的Y？</a></li>
  <li>★★ <a href="http://www.matrix67.com/blog/archives/4248">趣题：能否把三维空间分成无穷个圆？</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/3851">画圈圈和画叉叉的区别</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/4459">趣题：连接多个数字串时怎样避免歧义？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2830">如何构造一个平滑的最大值函数</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/910">趣题：如何用集合来定义有序对</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/733">趣题：奇怪的自然数集划分</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/330">函数上某一点导数为正，该点邻域不一定形成单增区间</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/304">趣题：用最简单的话来描述一个集合</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/698">趣题：构造一个[0,1]到(0,1)的一一映射</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/1972">趣题：构造整数域上的函数f使得f(f(n))等于-n</a></li>
</ul>

<h3 id="section-11">趣题集锦</h3>

<p>题目描述简短，有不少精彩解答，就不逐个加 ★ 了。</p>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/5083">难倒犹太人的五个数学问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4881">12个经典的行程问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4649">难倒犹太人的11个数学问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/3243">Which Way Did the Bicycle Go 趣题选（下）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/3172">Which Way Did the Bicycle Go 趣题选（中）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/3113">Which Way Did the Bicycle Go 趣题选（上）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2671">10个精彩的智力问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/2348">最近几天碰到的几个有趣的问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/1591">Harvard-MIT Mathematics Tournament 2009: Guts Round</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/502">分享一些有趣的面试智力题（下）</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/501">分享一些有趣的面试智力题（上）</a></li>
</ul>

<h3 id="section-12">其它</h3>

<ul>
  <li><a href="http://www.matrix67.com/blog/archives/5330">UyHiP趣题：用最少的称重次数验证硬币的重量</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4793">趣题：舞台里的狮子</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/4698">UyHiP趣题：按照盒子的三边长之和来计费有没有漏洞？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4690">趣题：只允许加倍操作的水桶倒水问题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4644">趣题：从1到4000中各位数字之和能被4整除的有多少个？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4491">千万不要迷信规律：大反例合集</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5167">趣题：证明边权递增的路径始终存在</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5182">趣题：Alice和Bob的等值交易</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5070">趣题：证明所有乘积的总和与分拆的方式无关</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/5063">趣题：由0和1构成的虫子</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/4746">趣题：所有人手上的糖数最终会变得一样多</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/6090">趣题：竞技场里的狮子能否保证抓住最高速度相同的小明？</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/5941">在 2048 里能够得到的最大的数是多少？</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/4361">趣题：老鼠与毒药问题的推广</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4318">不动点与线性代数</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/4270">UyHiP趣题：如果每个人都随大流，结果会怎样？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4263">UyHiP趣题：拉灯游戏总有解吗？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/4064">趣题：两步猜出多项式的各项系数</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/1160">趣题：匿名的消息广播</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/996">UyHiP趣题：(√2 +√3)^1948小数点后第48位是多少？</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/959">《从一到无穷大》选谈：思维的尺度</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/701">“解答和题目一样长”：更多的一句话证明</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/548">趣题：不断将各数替换为右侧比其小的数的个数，数列终将不再变化</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/351">等高线模式：解决极大极小问题的另类策略</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/396">趣题：估算小数点后第三位</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/173">Think Outside the Box: 一道原创智力题</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/127">关于套套：最近流行的一道智力题</a></li>
  <li>★ <a href="http://www.matrix67.com/blog/archives/33">非常奇妙的证明：图形必在格点之外</a></li>
  <li><a href="http://www.matrix67.com/blog/archives/83">几个很强的数列</a></li>
</ul>

<h2 id="section-13">总结</h2>

<p>虽然链接数量很多，不过穿插在平时作碎片阅读也会很快的，更何况你会发现看着看着<strong>根本停不下来</strong>！</p>

<p>10 年的时间过去，在博客中评论的同学的博客很多已经寻不见踪迹或停更，但 M 牛还是能一直坚持到今天，真的是不容易。个人揣想，一方面是真的热爱，另一方面围绕这个博客也形成了一个小圈子，大家的期待也是一种动力，再就是为了<strong>吸引 MM</strong> 吧……</p>

<p>如果新浪博客的一些生活杂记也算的话，自己的博龄也四年多了。<strong>回看曾经的一些篇文章，不免觉得幼稚、小家子气</strong>。博客搬到这里也算是一种决裂，从此更多的记录工作生活中的思考、遇到的实际问题与解决方法等，这样一来，文章也会更有<strong>生命力</strong>一些。</p>

<p>M 牛博客的高度是无法企及了，只是希望自己能够坚持下去。</p>

<p><strong>立存此照，以观后效</strong>。</p>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/29/matrix67-bo-ke-zhong-zhi-li-ti-cu-fen-lei/">http://frank19900731.github.io/blog/2014/11/29/matrix67-bo-ke-zhong-zhi-li-ti-cu-fen-lei/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《测试驱动开发和函数式编程》在线演示]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi/"/>
    <updated>2014-11-27T16:08:27+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi</id>
    <content type="html"><![CDATA[<!-- excerpt start -->

<p>在 Scala 微信群里了解到了 <a href="http://together.iagile.me/activities/28">《万花筒活动: 测试驱动开发和函数式编程 —— 在线代码演示如何对函数式语言 (Scala) 进行测试驱动开发》</a> 这么一个活动，以在线视频会议的形式举行。跟着讲解抄代码，对 <a href="http://baike.baidu.com/subview/76310/8243857.htm#viewPageContent">TDD</a>（Test-Driven Development）有了点粗浅的了解。</p>

<p>讲解围绕一道叫 <a href="http://codingdojo.org/">KataAnagram</a> 的题目展开，用《哈利·波特》里面的例子很好解释。</p>

<blockquote>
  <p>Tom Marvolo Riddle =&gt; I am Lord Voldemort</p>
</blockquote>

<p>上面是一个字母重排的过程。给定一个单词 S 和一个单词列表 L，要求从 L 中找到两个词（可以重复），用这两个词的全体字母重排出 S。</p>

<p>讲者主要是用这道题讲解测试驱动开发的思路流程，顺便讲解一下如何在代码重构时从 Java 转换到函数式编程的思维，而不是从算法角度考虑最优。</p>

<p>讲者开始提到测试驱动开发的大致思路是</p>

<ol>
  <li>写一个失败的测试；</li>
  <li>写最简单的代码使得测试通过；</li>
  <li>重构代码和测试。</li>
</ol>

<p>2、3 步骤应该是迭代进行的。从以下测试代码的撰写思路上，可以看到想法的逐层深入。</p>

<!-- excerpt end -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">import</span> <span class="nn">org.junit.Assert.assertEquals</span>
</span><span class="line"><span class="k">import</span> <span class="nn">org.junit.Test</span>
</span><span class="line"><span class="k">import</span> <span class="nn">org.scalatest.junit.JUnitSuite</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestAnagram</span> <span class="k">extends</span> <span class="nc">JUnitSuite</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="n">assertAnagramEqual</span><span class="o">(</span><span class="n">expectedAnagram</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="n">input</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">wordList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">		<span class="k">val</span> <span class="n">generator</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Anagram</span><span class="o">(</span><span class="n">wordList</span><span class="o">)</span>
</span><span class="line">		<span class="n">assertEquals</span><span class="o">(</span><span class="n">expectedAnagram</span><span class="o">,</span> <span class="n">generator</span><span class="o">.</span><span class="n">generate</span><span class="o">(</span><span class="n">input</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>	
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理空单词列表输入</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">empty_word_list_and_input_is_any_word</span> <span class="o">{</span>
</span><span class="line">		<span class="k">val</span> <span class="n">generator</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Anagram</span><span class="o">(</span><span class="nc">List</span><span class="o">())</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(),</span> <span class="s">&quot;anyWord&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">())</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理只含一个元素的单词列表，double 出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">one_character_word_list_and_input_is_double_of_this_word</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a a&quot;</span><span class="o">),</span> <span class="s">&quot;aa&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理只含一个元素的单词列表，不存在符合条件的两单词</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">one_word_list_and_input_has_no_anagram</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(),</span> <span class="s">&quot;bb&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理只含一个元素的单词列表，double 时有字母序的变化</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">one_word_list_and_input_has_anagram_with_different_character_order</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;an an&quot;</span><span class="o">),</span> <span class="s">&quot;anna&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;an&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理含有两个元素的单词列表，最后一个单词 double 出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">two_word_list_and_input_has_anagram_of_second_word</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a a&quot;</span><span class="o">),</span> <span class="s">&quot;aa&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理含有三个元素的单词列表，最后一个单词 double 出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">three_word_list_and_input_has_anagram_of_third_word</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a a&quot;</span><span class="o">),</span> <span class="s">&quot;aa&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理含有多个元素的单词列表，其中某个单词 double 出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">more_than_one_word_list_and_input_has_anagram_of_single_word</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;b b&quot;</span><span class="o">),</span> <span class="s">&quot;bb&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;d&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理含有多个元素的单词列表，其中两个单词重排出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">two_word_list_and_input_has_anagram_of_both_word</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a b&quot;</span><span class="o">),</span> <span class="s">&quot;ab&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">))</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a b&quot;</span><span class="o">),</span> <span class="s">&quot;ab&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理含有多个元素的单词列表，其中多对单词重排出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">input_has_two_anagrams</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a bc&quot;</span><span class="o">,</span> <span class="s">&quot;ab c&quot;</span><span class="o">),</span> <span class="s">&quot;abc&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;bc&quot;</span><span class="o">,</span> <span class="s">&quot;ab&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">))</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;ab ab&quot;</span><span class="o">,</span> <span class="s">&quot;ba ba&quot;</span><span class="o">,</span> <span class="s">&quot;ab ba&quot;</span><span class="o">,</span> <span class="s">&quot;abb a&quot;</span><span class="o">),</span> <span class="s">&quot;abba&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;ab&quot;</span><span class="o">,</span> <span class="s">&quot;ba&quot;</span><span class="o">,</span> <span class="s">&quot;abb&quot;</span><span class="o">,</span> <span class="s">&quot;d&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在功能代码的实现方面，经过了多次函数化重构，最后一种比较简单的方式如下。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>功能代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">class</span> <span class="nc">Anagram</span><span class="o">(</span><span class="n">wordList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="n">generate</span><span class="o">(</span><span class="n">input</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>			
</span><span class="line">			
</span><span class="line">		<span class="k">def</span> <span class="n">isAnagram</span><span class="o">(</span><span class="n">candidates</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="o">(</span><span class="n">candidates</span><span class="o">.</span><span class="n">mkString</span><span class="o">).</span><span class="n">sorted</span> <span class="o">==</span> <span class="n">input</span><span class="o">.</span><span class="n">sorted</span>
</span><span class="line">		
</span><span class="line">		<span class="k">def</span> <span class="n">output</span><span class="o">(</span><span class="n">anagrams</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="n">anagrams</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">		<span class="k">def</span> <span class="n">candidates</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">wordList</span><span class="o">,</span> <span class="n">wordList</span><span class="o">).</span><span class="n">transpose</span> <span class="o">++</span> <span class="n">wordList</span><span class="o">.</span><span class="n">combinations</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class="line">		
</span><span class="line">		<span class="k">return</span> <span class="n">candidates</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">isAnagram</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="n">output</span><span class="o">)</span>
</span><span class="line">		
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>历次重构的过程写起来就比较啰嗦了，不在这里列出。不过从测试代码一点点完善的过程里，能够看出一个大致的思路。</p>

<p>对于一个小问题，如果技艺熟练，完全有可能直接写出功能代码的最简形式，不过对于一个较大规模的项目来说，这种做法确实有优势，学习了。</p>

<p>最后附上老师课后分享的资料。</p>

<ul>
  <li><a href="https://github.com/JosephYao/Kata-Anagram/tree/iteration_19/src">代码</a> </li>
  <li><a href="http://www.tudou.com/programs/view/NUPTlyGkVcU/">视频</a></li>
  <li><a href="https://www.evernote.com/shard/s188/sh/55ba699d-05f7-4baa-9032-1692fff28cad/c08df590e81753fef302b5773b3b7d8e">Kata 接力</a></li>
</ul>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi/">http://frank19900731.github.io/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享四篇]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-si-pian/"/>
    <updated>2014-11-25T15:13:28+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-si-pian</id>
    <content type="html"><![CDATA[<!-- excerpt start -->

<p>一个月前，我在<a href="http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan/">《求职季的一点经验之谈》</a> 的末尾提到，将从 <code>机器学习与大数据</code>、<code>智力题</code>、<code>数据结构与算法</code>、<code>编程语言</code> 四方面分享自己的面试总结，现在总算是把这句话给圆了。</p>

<p>虽然在文章里我也列举了很多题目，但我<strong>尽量不写成面试题解，而是面试经验</strong>。更确切的说，是一些比较容易落实在笔头上的经验，毕竟一些事情不亲身经历，别人磨穿了嘴皮子去描述也是没用的。</p>

<p>具体有哪些经验呢，大概是算法工程师有哪些工作职责，有怎样的能力要求，平时要注重培养自己哪方面的能力，哪些书籍资料有较高阅读价值，以什么样的心态来学习知识、应对考试是比较合适的，怎样转变角色把面试当做促进自身提高的一种反馈机制，等等（其实也没别的了，呵呵）。</p>

<p>多的咱就不说了，<strong>水平有限，欢迎指正；如有裨益，不胜荣幸</strong>。</p>

<p>访问入口：</p>

<ul>
  <li><a href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">编程语言题</a></li>
</ul>

<!-- excerpt end -->

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-si-pian/">http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-si-pian/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享之编程语言题]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/"/>
    <updated>2014-11-25T10:13:30+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">概述</a></li>
  <li><a href="#section-2">基础问题</a></li>
  <li><a href="#section-3">进阶问题</a></li>
  <li><a href="#section-4">总结</a></li>
</ul>

<h2 id="section">前言</h2>

<!-- excerpt start -->

<h2 id="section-1">概述</h2>

<p>编程语言题这个设定太狭隘了，应该说是偏工程类的题目，其中有些带有经验性质。出题范围大概是操作系统、数据库、网络、面向对象编程思想、编程语言特性理解和语法掌握等。<strong>相关书籍或或网络教程当然是要看的，但并不意味着你都看了就能有好的发挥，要理论、实践两手抓</strong>。</p>

<p>对于算法工程师岗位来说，这种题目大量出现在笔试试卷中，比如概念理解啦、判断程序的运行输出啦，可以参见我的博客 <a href="http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi/">《2014 年百度、腾讯与搜狐的校招笔试回忆》</a>。在这里插入分享在另外一家公司的笔试里遇到的一道有意思的题目。</p>

<p>请问如下程序的输出。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>一道笔试题</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">double</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="kt">double</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span>
</span><span class="line"><span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="kt">double</span> <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="n">a</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class="line">	<span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">	<span class="n">b</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>解答：</strong></p>

<p style="color: #AAA;">

浮点数判等，会无限循环么？由于浮点数精度有限，所以这个程序迭代个五六十次就终止了，又由于 cout 有默认的输出精度，所以输出结果应该是66。

</p>

<p>面试过程中虽然以算法为主，不过在让你纸上写代码、询问你项目经历的过程中，面试官也能考察出你的工程底子。以下我们分基础问题和进阶问题分别介绍。</p>

<!-- excerpt end -->

<h2 id="section-2">基础问题</h2>

<p>这类基础问题的引子一般是，“你熟悉什么编程语言呀”，“你平常用什么语言比较多呀”，“这个项目你们用什么语言实现的呀”。</p>

<p>如果不是真大牛，就挑一个相对而言自己掌握最熟的语言或最有准备的语言，不要用过啥就说啥。这么一来，无外乎 Java，C/C++，Python，PHP 等几种主流程序语言，Shell、SQL 等都是比较好的添头。就个人对算法工程师和数据挖掘工程师岗位的了解，Python、Scala、Go 很可能是加分项，如果此前没有用过，也可以在面试前学习了解，一句“正在学习”也可以让面试官感受到你的<strong>诚意</strong>哈。</p>

<p>总结自己在面试中被问到的基础问题如下。</p>

<ol>
  <li>面向对象编程的各类问题，多态、虚函数等；</li>
  <li>C++ 和 Java 的区别有哪些；</li>
  <li>你用过这种语言的哪些库；</li>
  <li>对 STL 是否熟悉；</li>
  <li>Java 虚拟机了解么，解释垃圾回收机制的原理；</li>
  <li>线程/进程间通信如何实现，写过多线程的程序么；</li>
  <li>大数据处理框架用过哪些（其实就算是编程语言的杀手应用吧）；</li>
  <li>机器学习、数据可视化的库用过哪些；</li>
  <li>java 中 final 的用法，C/C++ 中的 const 的用法； </li>
  <li>MySQL 的如何建立索引进行查询的，存储方式是怎样的，为什么要分块；</li>
  <li>堆区和栈区的区别在哪里；</li>
  <li>malloc 执行的时候发生了那些事情；</li>
  <li>正则表达式的写法；</li>
  <li>vim 中执行某项操作的快捷键；</li>
  <li>……</li>
</ol>

<p>这些问题想要第一次遇到时就都回答得正确完善恐非易事，主要还在于总结积累。虽然可供考察的知识点和题目变式浩如烟海，但是<strong>一定量的面试能给我们指出高频在哪里</strong>，理由有三。</p>

<ul>
  <li>面试官中的绝大多数也是通过面试选拔上来的，他们在准备的过程中应该也知道常考什么样的问题；</li>
  <li>高频题目提供了可比较性，有筛选价值，而即便你背了网上的解答也可能是不全面的（<strong>我一般把网上看到的和自己的使用经验一起说，显得比较真实…</strong>）；</li>
  <li>有闲情雅致给你出新题、难题的面试官毕竟是少数。</li>
</ul>

<p><strong>这种高频基础题都回答不好，又指望面试官怎么看你呢</strong>。所以说每次面试回来后回忆一下自己遇到的问题，<strong>如果你做出了回答，查一查是否需要修正或补充什么；如果你被问住了，那更得查阅资料学习</strong>。</p>

<h2 id="section-3">进阶问题</h2>

<p>虽然我没有遇到过，但我觉得有两个例子可以表示我对进阶问题的定义。</p>

<ul>
  <li><a href="http://fex.baidu.com/blog/2014/05/what-happen/">从输入 URL 到页面加载完成的过程中都发生了什么？</a></li>
  <li><a href="http://mooc.guokr.com/note/13202/">C 语言编译时发生了什么？</a>，以及扩展阅读 <a href="https://bojieli.com/2014/11/c-compiler/">《编译：一个 C 程序的艺术之旅》</a>。</li>
</ul>

<p>第一个问题曾在微博上引发热议。</p>

<p><a href="http://frank19900731.github.io/img/post/2014-11/3.png" class="img-up" title="微博提问"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-11/3.png" width="80%" title="微博提问" /></a></p>

<p>这种问题既开放又确定。开放在于广度，涉及到的知识点与环节很多，你可以从你了解的部分去叙说；确定在于深度，每一个知识点或环节都是扎实的，不容信口开河。</p>

<p>类似的问题还可以提出很多，不过我们的知识储备未必有那么深广。个人认为，相比于对基础问题的了解，能够较为完善地回答出这类进阶问题，才是 IT 从业者素质与能力的真实体现。</p>

<p>当然，知识的积累要一点一点来，<strong>保持一颗好奇心比功利心或三分钟热血更重要</strong>。</p>

<p><strong>日拱一卒，乐在学中，与君共勉</strong>。</p>

<h2 id="section-4">总结</h2>

<p>用四篇文章分享了自己的面试经验，这是最后一篇。尽力之所及，恰在一个月后兑现了自己的 <a href="http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan/">承诺</a>，也算是苦劳一件。</p>

<p>从这四篇总结应该可以看出，本人的应试能力还是比较强的，享受过它带来的好处，也越发体会到它可能带来的弊端，那就是<strong>对技巧的追求超过了知识本身</strong>。</p>

<p>如果不是因为面试或者考试，很多人懒得问自己为什么。一种可能的场景是，程序出错了，Google/百度出了解决方案，调通了，也就过了。<strong>就好像刷题拿了高分，错误中蕴含的价值却没学到</strong>。我也当过很长一段时间这样的人，不过后来发现有些问题重复性的犯，而有些问题有很强的相似性，自己逐渐意识到需要记录错误解决的过程、思考产生错误的原因。坚持一段时间后发现，对原因的探寻不但能够加深记忆，也能够提高自己跨语言、跨应用场景的问题解决能力。</p>

<p>针对面试，或者不仅仅针对面试，我想说我们也可以<strong>假想自己是面试官，在习以为常的场景中多问自己为什么</strong>，学问也都在这里头了。</p>

<p>最后的最后，希望我的面试经验分享可以对各位看官产生一点帮助，比如提早规划、准备；也欢迎大家的提出建议、指出错误。</p>

<p>面试经验分享之 <code>机器学习、大数据问题</code>、<code>智力题</code>、<code>数据结构与算法题</code>、<code>编程语言题</code> 已经撰写完毕，访问入口如下。</p>

<ul>
  <li><a href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">编程语言题</a></li>
</ul>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Open Workshop — Scala 从零到入门》课堂笔记]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/23/open-workshop-scalacong-ling-dao-ru-men-ke-tang-bi-ji/"/>
    <updated>2014-11-23T09:56:19+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/23/open-workshop-scalacong-ling-dao-ru-men-ke-tang-bi-ji</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#thoughtworks">关于 ThoughtWorks</a></li>
  <li><a href="#section">培训记录</a>    <ul>
      <li><a href="#section-1">第一小节</a></li>
      <li><a href="#section-2">第二小节</a></li>
      <li><a href="#section-3">第三小节</a></li>
      <li><a href="#section-4">第四小节</a></li>
      <li><a href="#section-5">学习材料</a></li>
    </ul>
  </li>
  <li><a href="#section-6">写在最后</a></li>
</ul>

<!-- excerpt start -->

<h2 id="thoughtworks">关于 ThoughtWorks</h2>

<p>从 <a href="http://www.huodongxing.com/event/1256701125300">活动行</a> 上了解到有这么一门关于 Scala 的入门培训，周六闲来无事也就去了。一来因为 Scala 语言有 Spark 这样的杀手级应用，自己正要了解学习，二来想体验一些业界培训的氛围。</p>

<p>东直门地铁站 D 口一出就能望见国华投资大厦，活动主办方 ThoughtWorks 在 1105 室。进了公司感觉规模不小，于是在培训开始前查了一下 <a href="http://baike.baidu.com/item/thoughtworks?fr=aladdin">ThoughtWorks</a> 是干啥的，顿时感觉自己孤陋寡闻了。本次活动的讲师是 ThoughtWorks 的员工吴雪峰，他是 Scala 的大牛，在 github 上有分享一些 <a href="https://github.com/XuefengWu/ScalaTraining">培训材料</a>。</p>

<p>培训从早上九点开始，晚上六点结束，<strong>包学包问包午饭</strong>。培训中间穿插了一些 Social 环节，比如自我介绍，闲话讨论，让人感受到码农大家庭的温暖。有小二十个同学参与了此次活动，都是对 Scala 感兴趣或工作当中要用到，除了我和另外一个叫张淞的同学（<a href="http://book.douban.com/subject/25843224/">《Haskell函数式编程入门》</a>的作者）还没工作，其他都是有业界开发经验的人员。有些人已经用了一阵子 Scala，有些人刚配置好环境，比如俺，不过幸好之前看过 <a href="http://book.douban.com/subject/25803388/">《Haskell 趣学指南》</a>，能够跟上老师节奏。</p>

<p>在 Scala 培训进行的同时，还有一个 <a href="http://www.beijing-open-party.org/event/32">Open Party</a> 在公司里举行，加之自己所经历的这次周到细致的培训，我对 ThoughtWorks 这家公司越发好奇。进一步查询获知，ThoughtWorks 举办的分享、报告非常频繁，质量、反响也很好，这其中的推动力是什么呢？</p>

<p>也许公司自有或长期或短期的利益因素考量，但除此之外，我作为一个小白用户，在他们的活动中学到了知识，认识了同路人，还写了这篇文章分享、宣传，这样的效果应该也是 ThoughWorks 所乐见的吧。知乎上有人提问 <a href="http://www.zhihu.com/question/24738030">在 ThoughtWorks 工作是怎样一种体验？</a>，从回答的字里行间我也看到了对“推动力”问题的解答。</p>

<p>总而言之，对 ThoughtWorks 举办的这次活动表示感谢~</p>

<!-- excerpt end -->

<h2 id="section">培训记录</h2>

<p>老师讲的东西到自己的耳朵脑子里，从脑子到笔记，从笔记再到需要字斟句酌的博客文章，这中间会有很多损耗，另限于表达能力和理解能力，仅能保证记录下随堂练习、一些知识要点和学习资料，<strong>建议大家有机会还是亲自报名体验</strong>。</p>

<p>吴雪峰老师大致是按照如下的思维导图来讲述的，分四节课，前三节各一小时，第四节两个多小时……</p>

<p><a href="http://frank19900731.github.io/img/post/2014-11/1.bmp" class="img-up" title="Scala 介绍思维导图"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-11/1.bmp" width="80%" title="Scala 介绍思维导图" /></a></p>

<h3 id="section-1">第一小节</h3>

<p>Scala 允许面向对象编程和函数式编程结合起来，使用后者代码更加简练优美。代码编写效率上，Scala 优于 Java，但都会被编译成 JVM 字节码运行。因为有<strong>杀手级应用 Spark 和 Akka</strong>，所以 Scala 近来越来越受重视。ThoughtWorks 北京接手的 Scala 项目基本都是为了满足客户的数据处理需求。</p>

<p>基本数据类型和语法知识简单讲了一下，val 和 var 的区别需要注意，前者声明常量而后者声明变量。出于效率考虑，尽量避免在 Scala 程序中使用 var，记住<strong>不可变的可以共享，可变的不共享</strong>。</p>

<p>接下来是函数式编程的一些概念。</p>

<p>函数是独立存在的值，是<strong>类型为 ParamsType=&gt;ResultType 的变量</strong>，可以作为另一个函数的参数传入，而方法则是类中的行为，一般用 def 关键字声明，<strong>编译器某些场景下会自动把方法封装为一个函数对象来传递</strong>。</p>

<p>如下 add 即为一个函数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>add 函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">add</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=&gt;</span><span class="nc">Int</span> <span class="k">=</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="n">y</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="n">add</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="nc">Int</span> <span class="k">=&gt;</span> <span class="nc">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function1</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一个函数接受另外一个函数作为参数，前者称为高阶函数。<strong>严格地说，在本例中，auto 并不是一个函数，而是方法，第三小节会作解释</strong>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>高阶函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">auto</span><span class="o">(</span><span class="n">x</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">f</span><span class="k">:</span><span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class="line"><span class="n">auto</span><span class="k">:</span> <span class="o">(</span><span class="kt">x:</span> <span class="kt">Int</span><span class="o">,</span> <span class="kt">f:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span><span class="o">)</span><span class="nc">Int</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">add1</span><span class="k">:</span><span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="n">add1</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function1</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">add1</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class="line"><span class="n">res6</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">auto</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">add1</span><span class="o">)</span>
</span><span class="line"><span class="n">res7</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中 auto 的返回值类型虽然没有在定义时给出，但 <strong>Scala 可以自动推断出返回值类型</strong>是 Int。auto 函数接收两个参数，x 是 Int 类型的值，f 是将 Int 映射为 Int 的函数，本例中 add1 就是一个满足条件的函数，它将输入参数加一返回。</p>

<p>Scala 中有很多语法糖，比如流式调用，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Scala 语法糖一</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="mf">0.</span><span class="n">to</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span><span class="line"><span class="n">res9</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Range.Inclusive</span> <span class="o">=</span> <span class="nc">Range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">10</span>
</span><span class="line"><span class="n">res10</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Range.Inclusive</span> <span class="o">=</span> <span class="nc">Range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">+</span><span class="mi">2</span>
</span><span class="line"><span class="n">res11</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="mf">1.</span><span class="o">+(</span><span class="mi">2</span><span class="o">)</span>
</span><span class="line"><span class="n">res12</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">object</span> <span class="nc">o</span> <span class="o">{</span><span class="k">def</span> <span class="n">add1</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span> <span class="o">}</span>
</span><span class="line"><span class="n">defined</span> <span class="k">object</span> <span class="nc">o</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">o</span> <span class="n">add1</span> <span class="mi">0</span>
</span><span class="line"><span class="n">res18</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再比如 () 操作符默认调用对象的 apply 函数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Scala 语法糖二</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">object</span> <span class="nc">o</span> <span class="o">{</span>
</span><span class="line">     <span class="o">|</span> <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;hi,$name&quot;</span><span class="o">)</span>
</span><span class="line">     <span class="o">|</span> <span class="o">}</span>
</span><span class="line"><span class="n">defined</span> <span class="k">object</span> <span class="nc">o</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">o</span><span class="o">(</span><span class="s">&quot;abc&quot;</span><span class="o">)</span>
</span><span class="line"><span class="n">hi</span><span class="o">,</span><span class="n">abc</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>更多语法糖介绍可以看之前提到的吴老师的培训材料。上例定义的 object 是 Scala 中的单例表达形式，类还是 class。</p>

<p>下面的例子是高阶函数进行判断。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>高阶函数判断</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">cond</span><span class="o">(</span><span class="n">x</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">f</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span><span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span> <span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line"><span class="n">cond</span><span class="k">:</span> <span class="o">(</span><span class="kt">x:</span> <span class="kt">Int</span><span class="o">,</span> <span class="kt">f:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="nc">Boolean</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">cond</span><span class="o">(</span><span class="mi">9</span><span class="o">,</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="o">)</span>
</span><span class="line"><span class="n">res3</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">cond</span><span class="o">(</span><span class="mi">9</span><span class="o">,</span> <span class="k">_</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">)</span>
</span><span class="line"><span class="n">res4</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但我们不希望把其中 x 的类型 Int 写死，要求具有泛化能力，可以写成模板形式如下。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>类型泛化</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">cond</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">x</span><span class="k">:</span><span class="kt">T</span><span class="o">,</span> <span class="n">f</span><span class="k">:</span><span class="kt">T</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class="line"><span class="n">cond</span><span class="k">:</span> <span class="err">[</span><span class="kt">T</span><span class="err">]</span><span class="o">(</span><span class="kt">x:</span> <span class="kt">T</span><span class="o">,</span> <span class="kt">f:</span> <span class="kt">T</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="nc">Boolean</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">cond</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="k">_</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">9</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">missing</span> <span class="kt">parameter</span> <span class="k">type</span> <span class="kt">for</span> <span class="kt">expanded</span> <span class="kt">function</span> <span class="o">((</span><span class="kt">x$1</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="kt">x$1.$less</span><span class="o">(</span><span class="err">9</span><span class="o">))</span>
</span><span class="line">              <span class="n">cond</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="k">_</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">)</span>
</span><span class="line">                       <span class="o">^</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">cond</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="o">(</span><span class="k">_:</span><span class="kt">Int</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">)</span>
</span><span class="line"><span class="n">res7</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中 T 可以表示任意合理的类型。因为无法推断出数据类型，所以中间的运行结果出错，指定后运行正确。</p>

<p>接下来讲到 <a href="http://baike.baidu.com/view/2804134.htm?fr=aladdin">柯里化</a>，也就是</p>

<blockquote><p>把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p></blockquote>

<p>上面的高阶函数的柯里化形式为</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>函数柯里化</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">cond</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">x</span><span class="k">:</span><span class="kt">T</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span><span class="kt">T</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class="line"><span class="n">cond</span><span class="k">:</span> <span class="err">[</span><span class="kt">T</span><span class="err">]</span><span class="o">(</span><span class="kt">x:</span> <span class="kt">T</span><span class="o">)(</span><span class="kt">f:</span> <span class="kt">T</span> <span class="o">=&gt;</span> <span class="kt">Boolean</span><span class="o">)</span><span class="nc">Boolean</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也就是将两个参数分别用括号括起来。函数柯里化有助于我们用函数生成函数，如下例。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>用函数生成函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">add</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="n">y</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="n">add</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="nc">Int</span> <span class="k">=&gt;</span> <span class="nc">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function1</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">add1</span> <span class="k">=</span> <span class="n">add</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class="line"><span class="n">add1</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function1</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">add1</span><span class="o">(</span><span class="mi">9</span><span class="o">)</span>
</span><span class="line"><span class="n">res0</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们用加法函数生成了一个自增一的函数。</p>

<p>关于 callbyname，老师讲解的不详细，不过有一个好的 <a href="http://www.cnblogs.com/nixil/archive/2012/05/31/2528068.html">参考资料</a> 。与之相对应的概念就是 callbyvalue，区别在于 callbyname 传入的是产生相应结果的过程的入口，而 callbyvalue 传入的是产生好的结果。</p>

<p><strong>【随堂练习一】</strong></p>

<p>补全函数，使得判断条件符合时打印 welcome，不符合则什么也不做。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>随堂练习一</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">cond</span><span class="o">[</span><span class="kt">T</span>,<span class="kt">U</span><span class="o">](</span><span class="n">x</span><span class="k">:</span><span class="kt">T</span><span class="o">)(</span><span class="n">p</span><span class="k">:</span><span class="kt">T</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="n">U</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>解答：</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>随堂练习一解答</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">cond</span><span class="o">[</span><span class="kt">T</span>,<span class="kt">U</span><span class="o">](</span><span class="n">x</span><span class="k">:</span><span class="kt">T</span><span class="o">)(</span><span class="n">p</span><span class="k">:</span><span class="kt">T</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="n">U</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="n">f</span><span class="o">()</span> <span class="o">}</span>
</span><span class="line"><span class="n">cond</span><span class="k">:</span> <span class="err">[</span><span class="kt">T</span><span class="o">,</span> <span class="n">U</span><span class="err">]</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">T</span><span class="o">)(</span><span class="n">p</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="n">U</span><span class="o">)</span><span class="nc">Unit</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">cond</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">)(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="o">{</span> <span class="n">x</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">)</span> <span class="o">})(()</span> <span class="k">=&gt;</span> <span class="o">{</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Welcome&quot;</span><span class="o">)}</span> <span class="o">)</span>
</span><span class="line"><span class="nc">Welcome</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">第二小节</h3>

<p>列表和元组介绍</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>列表和元组</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span> <span class="s">&quot;f&quot;</span><span class="o">)</span>
</span><span class="line"><span class="n">res33</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Any</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="n">f</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span> <span class="s">&quot;f&quot;</span><span class="o">)</span>
</span><span class="line"><span class="n">res35</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">,</span> <span class="nc">Int</span><span class="o">,</span> <span class="nc">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="n">f</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">res35</span><span class="o">.</span><span class="n">_2</span>
</span><span class="line"><span class="n">res36</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Tuple3</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">)</span>
</span><span class="line"><span class="n">res37</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">,</span> <span class="nc">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="n">a</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>【随堂练习二】</strong></p>

<p>打印函数的运行时间。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>随堂练习二</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">recordTime</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">msg</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="n">body</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">T</span><span class="o">)</span><span class="k">:</span><span class="kt">T</span> <span class="o">=</span> <span class="o">???</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>解答：</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>随堂练习二解答</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">import</span> <span class="nn">scala.compat.Platform</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">recordTime</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">msg</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="n">body</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">T</span><span class="o">)</span><span class="k">:</span><span class="kt">T</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">	<span class="k">var</span> <span class="n">t1</span> <span class="k">=</span> <span class="nc">Platform</span><span class="o">.</span><span class="n">currentTime</span>
</span><span class="line">	<span class="k">var</span> <span class="n">result</span> <span class="k">=</span> <span class="n">body</span>
</span><span class="line">	<span class="k">var</span> <span class="n">t2</span> <span class="k">=</span> <span class="nc">Platform</span><span class="o">.</span><span class="n">currentTime</span>
</span><span class="line">	<span class="c1">// println(msg + &quot; spend time &quot; + (t2 - t1).toString + &quot; ms&quot;)</span>
</span><span class="line">	<span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;$msg spend time ${t2 - t1} ms&quot;</span><span class="o">)</span>
</span><span class="line">	<span class="n">result</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">body</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="o">(</span><span class="mi">0</span> <span class="n">to</span> <span class="mi">3000000</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toLong</span><span class="o">).</span><span class="n">reduce</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="k">_</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">recordTime</span><span class="o">(</span><span class="s">&quot;List&quot;</span><span class="o">)(</span><span class="n">body</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>思路是调用待测函数，记录运行结果作为返回值，过程中记录运行时间并输出。</p>

<p>定义一个函数变量，并查看其类型</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>函数变量定义，查看类型</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">add</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="n">y</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="n">add</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="nc">Int</span> <span class="k">=&gt;</span> <span class="nc">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function1</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">add</span>
</span><span class="line"><span class="nc">Int</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="nc">Int</span> <span class="k">=&gt;</span> <span class="nc">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然而方法本身并不是一个值，也是没有类型的，需要加 _ 变成函数才能查看相应函数的类型。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>方法转变为函数，查看类型</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span><span class="kt">Int</span><span class="o">)(</span><span class="n">y</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="n">add</span><span class="k">:</span> <span class="o">(</span><span class="kt">x:</span> <span class="kt">Int</span><span class="o">)(</span><span class="kt">y:</span> <span class="kt">Int</span><span class="o">)</span><span class="kt">Int</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">add</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">9</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">missing</span> <span class="kt">arguments</span> <span class="kt">for</span> <span class="kt">method</span> <span class="kt">add</span><span class="o">;</span>
</span><span class="line"><span class="n">follow</span> <span class="k">this</span> <span class="n">method</span> <span class="k">with</span> <span class="err">`</span><span class="k">_</span><span class="err">&#39;</span> <span class="k">if</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">treat</span> <span class="n">it</span> <span class="n">as</span> <span class="n">a</span> <span class="n">partially</span> <span class="n">applied</span> <span class="n">function</span>
</span><span class="line">              <span class="n">add</span>
</span><span class="line">              <span class="o">^</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">add</span> <span class="k">_</span>
</span><span class="line"><span class="kt">Int</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="nc">Int</span> <span class="k">=&gt;</span> <span class="nc">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来吴老师讲了一个租借的实例，大概想法是打开文件流，内容供你使用，但关闭是由程序自身负责的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Scala 租借</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">java.io.InputStream</span>
</span><span class="line"><span class="k">import</span> <span class="nn">java.io.InputStream</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">lend</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">in</span><span class="k">:</span> <span class="kt">InputStream</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span> <span class="kt">InputStream</span> <span class="o">=&gt;</span> <span class="n">T</span><span class="o">)</span><span class="k">:</span><span class="kt">T</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">     <span class="o">|</span> <span class="k">val</span> <span class="n">res</span> <span class="k">=</span> <span class="n">f</span><span class="o">(</span><span class="n">in</span><span class="o">)</span>
</span><span class="line">     <span class="o">|</span> <span class="n">in</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">     <span class="o">|</span> <span class="n">res</span>
</span><span class="line">     <span class="o">|</span> <span class="o">}</span>
</span><span class="line"><span class="n">lend</span><span class="k">:</span> <span class="err">[</span><span class="kt">T</span><span class="err">]</span><span class="o">(</span><span class="kt">in:</span> <span class="kt">java.io.InputStream</span><span class="o">)(</span><span class="kt">f:</span> <span class="kt">java.io.InputStream</span> <span class="o">=&gt;</span> <span class="kt">T</span><span class="o">)</span><span class="n">T</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由此引申出，Scala 中 对 Java的调用是很容易的，反之则比较难，因为前者特性更加丰富。</p>

<p><strong>【随堂练习三】</strong></p>

<p>分级别打印 log，要求代码尽量精简。</p>

<p><strong>解答：</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>随堂练习三解答</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">log</span><span class="o">(</span><span class="n">level</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="n">content</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">String</span><span class="o">)</span><span class="k">:</span><span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">	<span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;[$level]$content&quot;</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">debug</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">log</span><span class="o">(</span><span class="s">&quot;Debug&quot;</span><span class="o">)(</span><span class="n">msg</span><span class="o">)</span>
</span><span class="line"><span class="k">def</span> <span class="n">info</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">log</span><span class="o">(</span><span class="s">&quot;Info&quot;</span><span class="o">)(</span><span class="n">msg</span><span class="o">)</span>
</span><span class="line"><span class="k">def</span> <span class="n">warning</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">log</span><span class="o">(</span><span class="s">&quot;Warning&quot;</span><span class="o">)(</span><span class="n">msg</span><span class="o">)</span>
</span><span class="line"><span class="k">def</span> <span class="n">error</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">log</span><span class="o">(</span><span class="s">&quot;Error&quot;</span><span class="o">)(</span><span class="n">msg</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里 log 可以被称为偏函数，运用了用函数生成函数的思路。</p>

<h3 id="section-3">第三小节</h3>

<p>吴老师简要讲解了一下 Future，给出了一个示例，当然，关于多线程、高并发的处理还得自己深入去研究啦。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Future 示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">scala.concurrent.Future</span>
</span><span class="line"><span class="k">import</span> <span class="nn">scala.concurrent.Future</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>
</span><span class="line"><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">{</span> <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span> <span class="s">&quot;hi&quot;</span> <span class="o">}</span>
</span><span class="line"><span class="n">f</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="n">impl</span><span class="o">.</span><span class="nc">Promise$DefaultPromise</span><span class="k">@</span><span class="mi">464</span><span class="n">daa7d</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Hello</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">value</span>
</span><span class="line"><span class="n">res0</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="nc">Success</span><span class="o">(</span><span class="n">hi</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Scala 中也可以使用闭包，示例如下。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Scala 中的闭包</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">makeIncreaser</span><span class="o">(</span><span class="n">start</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">step</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">     <span class="o">|</span> <span class="k">var</span> <span class="n">count</span> <span class="k">=</span> <span class="n">start</span>
</span><span class="line">     <span class="o">|</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">     <span class="o">|</span> <span class="n">count</span> <span class="o">+=</span> <span class="n">step</span>
</span><span class="line">     <span class="o">|</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">count</span>
</span><span class="line">     <span class="o">|</span> <span class="o">}</span>
</span><span class="line">     <span class="o">|</span> <span class="o">}</span>
</span><span class="line"><span class="n">makeIncreaser</span><span class="k">:</span> <span class="o">(</span><span class="kt">start:</span> <span class="kt">Int</span><span class="o">,</span> <span class="kt">step:</span> <span class="kt">Int</span><span class="o">)()</span> <span class="k">=&gt;</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="nc">Int</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">makeIncreaser</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span><span class="line"><span class="n">res47</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function0</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">res47</span><span class="o">()</span>
</span><span class="line"><span class="n">res48</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function0</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">res47</span><span class="o">()()</span>
</span><span class="line"><span class="n">res49</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上一小节最后的 log 函数是一个偏函数，还有一种函数形式是函数组合。所谓函数组合就是把多个函数联结在一起，共同完成一项任务。示例见随堂练习四。</p>

<p><strong>【随堂练习四】</strong></p>

<p>将字符串转为整数类型，并加一，函数声明如下。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>随堂练习四</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">str2Int</span><span class="o">(</span><span class="n">s</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">toInt</span>
</span><span class="line"><span class="k">def</span> <span class="n">add1</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="k">def</span> <span class="n">addThen</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">Int</span><span class="o">)(</span><span class="n">g</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">???</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>解答：</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>随堂练习四解答</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">str2Int</span><span class="o">(</span><span class="n">s</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">toInt</span>
</span><span class="line"><span class="k">def</span> <span class="n">add1</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="k">def</span> <span class="n">addThen</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">Int</span><span class="o">)(</span><span class="n">g</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">	<span class="n">x</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="n">add1</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">))</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="n">addThen</span><span class="o">(</span><span class="n">str2Int</span><span class="o">)(</span><span class="n">add1</span><span class="o">)</span>
</span><span class="line"><span class="n">println</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="s">&quot;12&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>为了提高泛化能力，函数组合 andThen 的更一般形式如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>andThen 泛化</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">add1</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="n">add1</span><span class="k">:</span> <span class="o">(</span><span class="kt">x:</span> <span class="kt">Int</span><span class="o">)</span><span class="kt">Int</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">addThen</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span>,<span class="kt">C</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)(</span><span class="n">g</span><span class="k">:</span> <span class="kt">B</span> <span class="o">=&gt;</span> <span class="n">C</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">C</span> <span class="k">=</span> <span class="o">{</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="n">g</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="o">}</span>
</span><span class="line"><span class="n">addThen</span><span class="k">:</span> <span class="err">[</span><span class="kt">A</span><span class="o">,</span> <span class="n">B</span><span class="o">,</span> <span class="n">C</span><span class="err">]</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)(</span><span class="n">g</span><span class="k">:</span> <span class="kt">B</span> <span class="o">=&gt;</span> <span class="n">C</span><span class="o">)</span><span class="n">A</span> <span class="k">=&gt;</span> <span class="n">C</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">var</span> <span class="n">f</span> <span class="k">=</span> <span class="n">addThen</span><span class="o">(</span><span class="n">add1</span><span class="o">)(</span><span class="n">add1</span><span class="o">)</span>
</span><span class="line"><span class="n">f</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function1</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class="line"><span class="n">res55</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来讲解的是 pattern match，因为用过 Haskell，这里我再熟悉不过了。</p>

<p>用 pattern match 实现斐波那契数列</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>斐波那契数列</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">n</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">	<span class="k">case</span> <span class="mi">0</span> <span class="k">=&gt;</span> <span class="mi">0</span>
</span><span class="line">	<span class="k">case</span> <span class="mi">1</span> <span class="k">=&gt;</span> <span class="mi">1</span>
</span><span class="line">	<span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">println</span><span class="o">(</span><span class="n">fib</span><span class="o">(</span><span class="mi">5</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用 pattern match 实现过滤器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>实现 Filter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">filter</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">l</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">l</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">	<span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span> <span class="nc">Nil</span>
</span><span class="line">	<span class="k">case</span> <span class="n">x</span> <span class="o">::</span> <span class="n">xs</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">		<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">(</span><span class="n">x</span><span class="o">))</span>
</span><span class="line">			<span class="n">x</span> <span class="o">::</span> <span class="n">filter</span><span class="o">(</span><span class="n">xs</span><span class="o">,</span> <span class="n">p</span><span class="o">)</span>
</span><span class="line">		<span class="k">else</span>
</span><span class="line">			<span class="n">filter</span><span class="o">(</span><span class="n">xs</span><span class="o">,</span> <span class="n">p</span><span class="o">)</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">fil</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">5</span> <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">filter</span><span class="o">((</span><span class="mi">0</span> <span class="n">to</span> <span class="mi">9</span><span class="o">).</span><span class="n">toList</span><span class="o">,</span> <span class="n">fil</span><span class="o">)</span>
</span><span class="line"><span class="n">result</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用 pattern match 实现快速排序</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>快速排序</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">quicksort</span><span class="o">(</span><span class="n">xs</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">	<span class="n">xs</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">		<span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span> <span class="nc">Nil</span>
</span><span class="line">		<span class="k">case</span> <span class="n">x</span> <span class="o">::</span> <span class="nc">Nil</span> <span class="k">=&gt;</span> <span class="n">xs</span>
</span><span class="line">		<span class="k">case</span> <span class="n">pivot</span> <span class="o">::</span> <span class="n">tail</span> <span class="k">=&gt;</span>
</span><span class="line">			<span class="k">val</span> <span class="o">(</span><span class="n">low</span><span class="o">,</span> <span class="n">high</span><span class="o">)</span> <span class="k">=</span> <span class="n">tail</span><span class="o">.</span><span class="n">partition</span><span class="o">(</span><span class="k">_</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="o">)</span>
</span><span class="line">			<span class="n">quicksort</span><span class="o">(</span><span class="n">low</span><span class="o">)</span> <span class="o">:::</span> <span class="n">pivot</span> <span class="o">::</span> <span class="n">quicksort</span><span class="o">(</span><span class="n">high</span><span class="o">)</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">randoms</span> <span class="k">=</span> <span class="o">(</span><span class="mi">0</span> <span class="n">to</span> <span class="mi">20</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="n">scala</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Random</span><span class="o">.</span><span class="n">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">)).</span><span class="n">toList</span>
</span><span class="line"><span class="k">val</span> <span class="n">sorted</span> <span class="k">=</span> <span class="n">quicksort</span><span class="o">(</span><span class="n">randoms</span><span class="o">)</span>
</span><span class="line"><span class="n">randoms</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">n</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">print</span><span class="o">(</span><span class="n">n</span><span class="o">),</span> <span class="n">print</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">)))</span>
</span><span class="line"><span class="n">println</span><span class="o">()</span>
</span><span class="line"><span class="n">sorted</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">n</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">print</span><span class="o">(</span><span class="n">n</span><span class="o">),</span> <span class="n">print</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">第四小节</h3>

<p>最后一小节讲得比较杂，吴老师用到了很多他自己培训材料上的内容。<strong>因为对 Scala 了解尚浅，所以很多内容由于理解不深也不方便复述，比如 case class、Monads、Scalaz、Akka 相关</strong>。</p>

<p>本节简要举例讲解了一下 Scala 中的面向对象。引入了 Trait（特质），类似于 Java 中的接口，不过可以定义方法。Scala 有自己的判别机制识别多重继承中的方法冲突。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Scala 面向对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">trait</span> <span class="nc">Fly</span> <span class="o">{</span><span class="k">def</span> <span class="n">fly</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;fly...&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line"><span class="n">defined</span> <span class="k">trait</span> <span class="nc">Fly</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">trait</span> <span class="nc">Eat</span> <span class="o">{</span><span class="k">def</span> <span class="n">eat</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;eat...&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line"><span class="n">defined</span> <span class="k">trait</span> <span class="nc">Eat</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Duck</span> <span class="k">extends</span> <span class="nc">Fly</span> <span class="k">with</span> <span class="nc">Eat</span>
</span><span class="line"><span class="n">defined</span> <span class="k">class</span> <span class="nc">Duck</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">new</span> <span class="nc">Duck</span>
</span><span class="line"><span class="n">res1</span><span class="k">:</span> <span class="kt">Duck</span> <span class="o">=</span> <span class="nc">Duck</span><span class="k">@</span><span class="mi">5511</span><span class="n">e6b9</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">res1</span><span class="o">.</span><span class="n">eat</span>
</span><span class="line"><span class="n">eat</span><span class="o">...</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">res1</span><span class="o">.</span><span class="n">fly</span>
</span><span class="line"><span class="n">fly</span><span class="o">...</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">trait</span> <span class="nc">Fly2</span> <span class="o">{</span><span class="k">def</span> <span class="n">fly</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;fly2...&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line"><span class="n">defined</span> <span class="k">trait</span> <span class="nc">Fly2</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Bird</span> <span class="k">extends</span> <span class="nc">Fly</span> <span class="k">with</span> <span class="nc">Fly2</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">11</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">class</span> <span class="kt">Bird</span> <span class="kt">inherits</span> <span class="kt">conflicting</span> <span class="kt">members:</span>
</span><span class="line">  <span class="n">method</span> <span class="n">fly</span> <span class="n">in</span> <span class="k">trait</span> <span class="nc">Fly</span> <span class="n">of</span> <span class="k">type</span> <span class="o">()</span><span class="kt">Unit</span>  <span class="kt">and</span>
</span><span class="line">  <span class="n">method</span> <span class="n">fly</span> <span class="n">in</span> <span class="k">trait</span> <span class="nc">Fly2</span> <span class="n">of</span> <span class="k">type</span> <span class="o">()</span><span class="kt">Unit</span>
</span><span class="line"><span class="o">(</span><span class="nc">Note</span><span class="k">:</span> <span class="kt">this</span> <span class="kt">can</span> <span class="kt">be</span> <span class="kt">resolved</span> <span class="kt">by</span> <span class="kt">declaring</span> <span class="kt">an</span> <span class="kt">override</span> <span class="kt">in</span> <span class="kt">class</span> <span class="kt">Bird.</span><span class="o">)</span>
</span><span class="line">       <span class="k">class</span> <span class="nc">Bird</span> <span class="k">extends</span> <span class="nc">Fly</span> <span class="k">with</span> <span class="nc">Fly2</span>
</span><span class="line">             <span class="o">^</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Bird</span> <span class="k">extends</span> <span class="nc">Fly2</span>
</span><span class="line"><span class="n">defined</span> <span class="k">class</span> <span class="nc">Bird</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Duck</span> <span class="k">extends</span> <span class="nc">Bird</span> <span class="k">with</span> <span class="nc">Fly</span> <span class="o">{</span>
</span><span class="line">     <span class="o">|</span> <span class="k">override</span> <span class="k">def</span> <span class="n">fly</span><span class="o">()</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">fly</span><span class="o">()</span>
</span><span class="line">     <span class="o">|</span> <span class="o">}</span>
</span><span class="line"><span class="n">defined</span> <span class="k">class</span> <span class="nc">Duck</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">new</span> <span class="nc">Duck</span>
</span><span class="line"><span class="n">res4</span><span class="k">:</span> <span class="kt">Duck</span> <span class="o">=</span> <span class="nc">Duck</span><span class="k">@</span><span class="mi">8</span><span class="n">a10ea2</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">res4</span><span class="o">.</span><span class="n">fly</span>
</span><span class="line"><span class="n">fly</span><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>【随堂练习五】</strong></p>

<p>实现 Some 泛型的乘法计算，一种方法是，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>随堂练习五</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">for</span> <span class="o">{</span>
</span><span class="line">     <span class="o">|</span> <span class="n">v1</span> <span class="k">&lt;-</span> <span class="n">opt1</span>
</span><span class="line">     <span class="o">|</span> <span class="n">v2</span> <span class="k">&lt;-</span> <span class="n">opt2</span>
</span><span class="line">     <span class="o">|</span> <span class="o">}</span> <span class="k">yield</span> <span class="n">v1</span> <span class="o">*</span> <span class="n">v2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现请用 flatMap 实现乘法计算。</p>

<p><strong>解答：</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>随堂练习五解答</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">opt1</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">v1</span> <span class="k">=&gt;</span> <span class="n">opt2</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">v2</span> <span class="k">=&gt;</span> <span class="n">v1</span> <span class="o">*</span> <span class="n">v2</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">学习材料</h3>

<p>这次培训里了解的很多概念只能算是听了个热闹，之后还得通过阅读大量的学习资料来加深理解。<strong>特别是着手写这篇博客的时候，真的是边查资料边写，有些内容一时半会儿搞不懂就暂时不写了</strong>……</p>

<p>除<a href="http://docs.scala-lang.org/">官方文档</a>，从大家的交流中可以整理出如下资料</p>

<ul>
  <li><a href="http://book.douban.com/subject/6050104/">《Programming in Scala : A Comprehensive Step-by-step Guide, 2nd Edition》</a></li>
  <li><a href="http://book.douban.com/subject/7070564/">《Scala for the Impatient》</a>，中译本为<a href="http://www.douban.com/link2/?url=http%3A%2F%2Fbook.douban.com%2Fsubject%2F19971952%2F&amp;query=%E5%BF%AB%E5%AD%A6scala&amp;cat_id=1001&amp;type=search&amp;pos=0">《快学 Scala》</a></li>
  <li><a href="http://eed3si9n.com/learning-scalaz/index.html">Learning Scalaz</a></li>
  <li><a href="http://twitter.github.io/effectivescala/">Effective Scala</a></li>
  <li><a href="http://twitter.github.io/scala_school/index.html">Scala School</a></li>
  <li><a href="https://www.coursera.org/course/progfun">Scala 函数式编程原理公开课</a></li>
</ul>

<h2 id="section-6">写在最后</h2>

<p>晚上六点钟从国华大厦走出来，筋疲力竭，大脑既充实又麻木。一群码农在一个小屋子里一起学习了九个小时，码农的工作很辛苦，码农大多单身，码农经常熬夜加班、长黑眼圈，码农一般秃顶、蓬头垢面，码农善于自嘲（但请外人不要嘲笑某个个人是码农），那么问题来了，怎么还有这么多人要做码农？</p>

<p>我自己的回答是两个词，<code>热爱</code> 与 <code>分享</code>。<strong>热爱让你心笃定，分享让你不孤单</strong>。不能代表码农整体，但我相信一起学了九个小时的小伙伴们应该会同意我的看法。</p>

<p>唉，一个培训能引发自己这样的感想也是够够儿了，再写就矫情了。</p>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/23/open-workshop-scalacong-ling-dao-ru-men-ke-tang-bi-ji/">http://frank19900731.github.io/blog/2014/11/23/open-workshop-scalacong-ling-dao-ru-men-ke-tang-bi-ji/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 年百度、腾讯与搜狐的校招笔试回忆]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi/"/>
    <updated>2014-11-21T21:38:54+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">写在前面</a></li>
  <li><a href="#section-1">百度笔试</a></li>
  <li><a href="#section-2">腾讯笔试</a></li>
  <li><a href="#section-3">搜狐笔试</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">写在前面</h2>

<ul>
  <li>这三家公司大家的关注度应该都比较高，我所申请的其他公司，要么是自己走了其他渠道没参加笔试（比如阿里、360），要么是有签订保密协议（比如 FreeWheel 和 世坤）；</li>
  <li>腾讯、搜狐笔试题中有很多选择题，无法一一记清，考场上没有刻意记录，只能考后回忆，很多题只能说考了哪个知识点；</li>
  <li>百度申请的是数据挖掘工程师岗位，腾讯申请的是基础研究职位（后来发现给我安排的是深圳腾讯游戏的数据挖掘岗，由此得出的经验教训是，选定期望工作城市后，慎选服从城市调剂，不然都给你拉到深圳去），搜狐申请的是数据挖掘工程师岗位，题目自然与职位有关；</li>
  <li>我不记得是不是有 A、B 卷之分，但以下内容都被考察过无疑。</li>
</ul>

<p>接下来，记忆的闸门开始缓缓打开……</p>

<!-- excerpt end -->

<h2 id="section-1">百度笔试</h2>

<p>在面试的时候，百度会把已判分的试卷发给你，想不回忆清楚都难。当然，俺还没猥琐到拍照的程度……</p>

<ol>
  <li>举例说 C++ 中继承、多态和组合的应用。</li>
  <li>进程间通信方法，列举至少三种。</li>
  <li>写贝叶斯公式，描述朴素贝叶斯的分类方法。</li>
  <li>X、Y 是向量，每一维上的元素都服从 N(0, 1)，计算他们的相关系数 Z
    <ul>
      <li>求 Z 的期望和标准差（求职季笔试里见过的最有趣的一问，解答见我的博文<a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">《面试经验分享之智力题》</a> 中的题目五）；</li>
      <li>编程用蒙特卡洛方法计算期望和标准差。</li>
    </ul>
  </li>
  <li>豆瓣音乐，评分不同，但是想要随机播放概率和评分成正比，设计随机算法并代码实现。</li>
  <li>给出一次函数、二次函数…… n 次函数回归的损失函数，推导随机梯度下降公式，简述模型/参数选择标准和选择机制。</li>
</ol>

<h2 id="section-2">腾讯笔试</h2>

<p>25 道选择题只回忆了两道，因为与之相关的知识点掌握得不熟，其他题目大都是 C++ 面向对象编程的常见题。</p>

<ol>
  <li>关于虚基类构造函数的调用顺序。</li>
  <li>预编译指令 <a href="http://baike.baidu.com/view/2317161.htm?fr=aladdin">#pragma pack</a> 的考察，给出一个结构体，问占用多大空间。</li>
</ol>

<p>笔答题有三道</p>

<ol>
  <li>求三阶矩阵行列式。</li>
  <li>根据用户的满足感、荣誉感、挫折感及失望感建模用户口碑。</li>
  <li>预测即将流失的用户，一种方法是使用 SQL 在数据库中查询，提取近三个月登陆次数递减的用户，交给客服处理
    <ul>
      <li>可否这么做；</li>
      <li>不然要怎么做。</li>
    </ul>
  </li>
</ol>

<h2 id="section-3">搜狐笔试</h2>

<p>笔试题目范围非常广泛，涉及机器学习、网络编程、hadoop、C++、多线程和智力题。</p>

<ol>
  <li><a href="http://blog.csdn.net/mengtnt/article/details/8477747">小白鼠喝毒水问题</a></li>
  <li><a href="http://f.dataguru.cn/forum.php?mod=viewthread&amp;tid=34799&amp;highlight=">hadoop 在 HDFS 上文件存储的默认冗余参数是3</a>。</li>
  <li>两个线程同时累加一个全局变量，比如利用 for 循环进行 50 次自增操作，问该该全局变量的最终结果范围。</li>
  <li><a href="http://www.cnblogs.com/hnrainll/archive/2011/10/14/2212415.html">TCP 的三次握手，四次挥手</a>。</li>
  <li>关于 TCP 双方关闭连接，涉及到 <a href="http://blog.csdn.net/samulelin/article/details/3957118">TIME_WAIT</a> 的概念。</li>
  <li>SVM、条件随机场、隐马尔科夫模型、最大熵模型中，哪个是生成式模型？应该是隐马尔科夫模型<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</li>
  <li>还是以上四个模型，哪个模型不符合凸模型+有全局最优解的条件？应该还是隐马尔科夫模型。</li>
  <li>贝叶斯网络是有向无环图。</li>
  <li>分词中最大正向匹配，最大逆向匹配的概念。</li>
  <li>linux 平台下有一个三列文件，列之间用逗号分隔，请编程对第二列数字求和。</li>
  <li>左值不能赋值。</li>
  <li>hadoop 默认 block 大小是 64M，JobTracker 和 NameNode在同一台机器上。</li>
  <li>hadoop 采用 Combiner、采用压缩率高的文件格式以及在 map 过程中去掉无效数据都是为了减少数据传输量，与这些优化方法不同的是优化 Partitioner，因为它是为了均衡数据量，而非减少数据量。</li>
  <li>熵的计算公式和熵最大的条件。</li>
  <li><a href="http://www.cnblogs.com/daniagger/archive/2012/06/19/2555321.html">复杂链表的复制</a>，所谓复杂是指一个节点除了指向后继，还随机指向链表中的一个节点或 NULL。</li>
  <li>问如下代码的输出，其实就是统计二进制表示中 1 的个数。</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>题目</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">9999</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="k">while</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">	<span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>		
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">count</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi/">http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>参考资料为：<a href="http://en.wikipedia.org/wiki/Discriminative_model">Discriminative model</a>，<a href="http://blog.csdn.net/wolenski/article/details/7985426#0-tsina-1-17355-397232819ff9a47a7b7e80a40613cfe1">判别式模型与生成式模型</a>。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pocket 类目标签的制订]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/20/pocket-lei-mu-biao-qian-de-zhi-ding/"/>
    <updated>2014-11-20T00:52:08+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/20/pocket-lei-mu-biao-qian-de-zhi-ding</id>
    <content type="html"><![CDATA[<!-- excerpt start -->

<p>由于Pocket自身不带有分类或建目录的功能，所以类目只能以标签的方式体现。综合个人使用习惯并参考了 <a href="http://www.zwbk.org/MyLemmaShow.aspx?lid=116762#137">《中文百科知识体系目录》</a>，特制订分类体系。此分类体系亦适用于其它知识积累工具。</p>

<h2 id="section">2014年11月20日第一次制订</h2>

<p><strong>一级类目共20个，其中只有信息科学下设二级类目，有21个。</strong></p>

<p><strong>各类目间可能有重叠，特定网页可能与多个类目相关，由本人判决该网页的最大相关类目。</strong></p>

<p><strong>如果判决标准中存在某种规律或约定，会在今后修订时注明。</strong></p>

<ol>
  <li>宗教哲学   </li>
  <li>政治政策</li>
  <li>法律法规  </li>
  <li>文化艺术     </li>
  <li>历史典故</li>
  <li>天文地理 </li>
  <li>社会科学</li>
  <li>健康养生</li>
  <li>生物医学</li>
  <li>数理科学
<!-- excerpt end --></li>
  <li>化学化工</li>
  <li>农林环境</li>
  <li>工程技术</li>
  <li>信息科学
    <ul>
      <li>编程方法</li>
      <li>实用软件</li>
      <li>脚本编程</li>
      <li>网页编程</li>
      <li>网页设计</li>
      <li>网络安全</li>
      <li>操作系统</li>
      <li>数据结构</li>
      <li>算法设计</li>
      <li>系统架构</li>
      <li>产品设计</li>
      <li>机器学习</li>
      <li>数据挖掘</li>
      <li>统计</li>
      <li>优化建模</li>
      <li>大数据处理</li>
      <li>计算机视觉</li>
      <li>自然语言处理</li>
      <li>业界动态</li>
      <li>互联网创业</li>
      <li>互联网其它</li>
    </ul>
  </li>
  <li>经济管理</li>
  <li>军事科技  </li>
  <li>人物</li>
  <li>效率</li>
  <li>吃喝玩乐</li>
  <li>其它知识</li>
</ol>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/20/pocket-lei-mu-biao-qian-de-zhi-ding/">http://frank19900731.github.io/blog/2014/11/20/pocket-lei-mu-biao-qian-de-zhi-ding/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享之数据结构、算法题]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/"/>
    <updated>2014-11-18T10:18:41+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">数据结构题目</a>    <ul>
      <li><a href="#section-2">概述</a></li>
      <li><a href="#section-3">分类讨论</a>        <ul>
          <li><a href="#section-4">类型一：数据结构实现</a></li>
          <li><a href="#section-5">类型二：数据结构应用</a></li>
        </ul>
      </li>
      <li><a href="#section-6">准备建议</a></li>
    </ul>
  </li>
  <li><a href="#section-7">算法题目</a>    <ul>
      <li><a href="#section-8">概述</a></li>
      <li><a href="#section-9">分类讨论</a>        <ul>
          <li><a href="#section-10">类型一：经典算法实现题</a></li>
          <li><a href="#section-11">类型二：思维益智题</a></li>
        </ul>
      </li>
      <li><a href="#section-12">准备建议</a></li>
    </ul>
  </li>
  <li><a href="#section-13">开放题目</a></li>
  <li><a href="#section-14">总结</a></li>
</ul>

<h2 id="section">前言</h2>

<!-- excerpt start -->

<p>面试 IT 企业的研发岗位，数据结构和算法显然是必考的项目。俺只学过普通的数据结构课程，没读过 STL，也没有过 ACM 的训练和比赛经历，在一开始面对这样类型题目的时候，心里还是十分忐忑的。大大小小几十场面试下来，自己在这方面总算有了一定的心得积累，在此抛砖引玉，以飨读者。</p>

<p>在正式介绍题目和准备方法之前，有两点需要说明，</p>

<ul>
  <li>Google 和 Facebook 这类对算法有很高要求的公司的在线测试我没有参加过（不过在牛人内推帮助下有过面试体验……），这超出了我目前的编码能力范围，网上有不少拿到 Google、Facebook offer 的经验总结文章，可以移步观赏；</li>
  <li>前段时间在微博上又看到有人说自己把 leetcode 刷了好几遍，不过一些转发评论者觉得， IT 公司面试中的算法考察没有价值，一来工作里用不太上，二来把程序员素质考察搞成了应试教育，他们认为更重要的是应聘者的工程能力。遇到这样的讨论，我一般喜欢和一把稀泥。若干年前， Google、微软的面试题让大家眼前一亮，觉得能选拔出个性十足的聪明人来，不过随着大家对这类题目的适应，可能选拔出来的人也在趋同，至少很多人都会在面试前用心准备，<a href="http://www.oschina.net/news/41616/in-head-hunting-big-data-may-not-be-such-a-big-deal">据报道 Google 最近也是放弃了这类面试题目</a>。没有什么一劳永逸、一成不变的考查方式，毕竟面试是人和人之间的动态“较量”。不要贪恋算法的奇技淫巧，也不要因为题目筛选力度的衰减而否定考察初衷。面试不仅是考验求职者，也同样在考验面试官，<strong>如果问的都是老题儿，那本山大叔肯定都会抢答了</strong>。</li>
</ul>

<p>言归正传，以下分数据结构题目、算法题目、开放题目三部分来介绍我在面试中碰到的问题。</p>

<!-- excerpt end -->

<h2 id="section-1">数据结构题目</h2>

<h3 id="section-2">概述</h3>

<p>虽然课本由简到繁、由难到易地介绍了诸多数据结构，<strong>我在面试中被问到的却还都是基本类型</strong>，比如堆栈、队列、链表、二叉树。题目主要有两类，数据结构实现和具体情境下数据结构的应用。</p>

<h3 id="section-3">分类讨论</h3>

<h4 id="section-4">类型一：数据结构实现</h4>

<ol>
  <li>实现 java.util.List 中的基础功能；</li>
  <li>实现栈，使得 添加、删除、max 操作的复杂度为 O(1)（<s>我脚着好像是不可实现的，想到最好的是添加、删除 O(log)， max 是 O(1)</s>），实现见 <a href="http://weibo.com/wangrn">正在努力减肥的胖子</a> 同学给出的评论，参考 leetcode 中的<a href="https://oj.leetcode.com/problems/min-stack/">这道题目</a>，惭愧；</li>
  <li>选取任意数据结构实现添加、删除、随机返回三个功能，分析复杂度；</li>
  <li>用数组实现队列，各操作的复杂度分析。</li>
</ol>

<h4 id="section-5">类型二：数据结构应用</h4>

<ol>
  <li>两棵树相加——对应位置两棵树都有值则相加，对应位置只有一棵树有值则取该值；</li>
  <li>用速度不同的指针可以判断链表中是否有环，问两速度满足怎样的关系可以保证发现环；</li>
  <li>如何在语料中寻找频繁出现的字串，分析复杂度（tire树）；</li>
  <li>中缀表达式转逆波兰表达式，逆波兰表达式求值；</li>
  <li>数据解压缩，3(a4(ab))    -&gt;    aababababaababababaabababab；</li>
  <li><a href="http://www.xuebuyuan.com/600249.html">二叉树的文件存储</a>。</li>
</ol>

<h3 id="section-6">准备建议</h3>

<p>上上之选当然是看《算法导论》，<a href="http://vdisk.weibo.com/s/G0pA_">书</a> 和 <a href="http://v.163.com/special/opencourse/algorithms.html">公开课</a> 都算。时间精力不足又想临时抱佛脚，清华大学计算机系邓俊辉老师的 <a href="http://www.amazon.cn/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E5%88%97%E6%95%99%E6%9D%90-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%82%93%E4%BF%8A%E8%BE%89/dp/B00FEC2GYM/ref=sr_1_1?ie=UTF8&amp;qid=1416641186&amp;sr=8-1&amp;keywords=%E9%82%93%E4%BF%8A%E8%BE%89">教材</a> 是好选择，也可以看 <a href="https://www.xuetangx.com/courses/TsinghuaX/30240184_1X/_/about">公开课</a>。注意<strong>熟记不同数据结构的不同操作的不同实现方式</strong>（比如 <a href="http://www.matrix67.com/blog/archives/1255">哈希表的插入删除查找</a>）<strong>的复杂度分析</strong>，不管面试官给你出的题目是难是易，妥妥儿的会问复杂度。</p>

<h2 id="section-7">算法题目</h2>

<h3 id="section-8">概述</h3>

<p>有过面试经历的企业（BAT、小米、宜信、猿题库、FreeWheel等）当中，还没有谁问过我需要复杂算法（比方说 <a href="http://zhidao.baidu.com/link?url=lx07DdsUSQO-zbwOqhlOCbXpT7Qj8pOtOHQ5G6JhNZYnT1vlgaBly5sOwZzqAhkZsqugfJRiRw1y7q857V44La">此链接</a> 中的很多知识点）才能解决的问题。我遇到的算法题目大致可以分为两类：</p>

<ul>
  <li>经典算法实现题 快速排序、归并排序、堆排序、KMP算法等都是重点，<strong>重要的是代码的正确性，其次是复杂度分析</strong>，当然，人家也不都是直接问你怎么实现这个具体算法，而是包装到情境里；</li>
  <li>思维益智题 考察你分析问题的能力，大部分可以归结到二分、动态规划、递归上，<strong>重要的是思路，其次是尽量低的复杂度，再次是代码的正确性</strong>。</li>
</ul>

<p>下面具体介绍我遇到的两种类型题目中的问题。</p>

<h3 id="section-9">分类讨论</h3>

<h4 id="section-10">类型一：经典算法实现题</h4>

<ol>
  <li>实现快速排序、归并排序、堆排序，各排序算法复杂度分析；</li>
  <li>实现KMP，解释原理；</li>
  <li>迷宫的深度搜索、广度搜索；</li>
  <li>写 find 函数，在目标串中匹配模式串（要考虑中文字符的情况）。</li>
</ol>

<h4 id="section-11">类型二：思维益智题</h4>

<ol>
  <li>数列中找第 k 大的数字（与快排或堆排序有关）；</li>
  <li>两个有序数组，寻找归并排序后数组的中位数/第 k 大数字（与二分有关）；</li>
  <li>一维数组，swap 其中的几对数字（每个数字只属于一次 swap 操作），实现查找（与二分有关）；</li>
  <li>一个有序数组，其中一个数字发生变异，但不知道变异后会不会影响整体序，如何实现查找；</li>
  <li>二维数组，每行递增，每列递增
    <ul>
      <li>实现查找；</li>
      <li>二维数组，每行递增，每列递增，求第 k 大的数；</li>
      <li>任意交换其中的两数，发现并恢复；</li>
    </ul>
  </li>
  <li>寻找字符串中第一个只出现一次的字符；</li>
  <li>统计数列中的逆序对（归并排序有关）；</li>
  <li>最长公共子串（动态规划有关）；</li>
  <li>最大子序列和，<a href="http://blog.csdn.net/caopengcs/article/details/36899787">允许交换一次的最大子序列和</a>；</li>
  <li>给定数组，寻找 next big（堆排序有关）；</li>
  <li>一维有序数组，经过循环位移后，最小的数出现在数列中间
    <ul>
      <li>如果原数组严格递增，如何找这个最小数；</li>
      <li>如果原数组严格递增或递减，如何找这个最小数；</li>
      <li>如果原数组非严格递增或递减，如何找这个最小数；</li>
    </ul>
  </li>
  <li>数组可能是递增、递减、递减后递增、递增后递减四种情况，递增递减都是非严格的，如果有转折点，返回转折点的值，否则返回-1；</li>
  <li>单向网络，起点和终点唯一且连通，寻找那些一旦被删除将导致起点终点无法连通的点；</li>
  <li>有序数组寻找和为某数的一对数字；</li>
  <li><a href="http://www.cnblogs.com/fuzhe1989/p/3428553.html">墙里能装多少水</a>；</li>
  <li>打印螺旋数组；</li>
  <li>打印组合数；</li>
  <li>字符数组，统计指定区间内的回文串个数。 </li>
</ol>

<h3 id="section-12">准备建议</h3>

<ul>
  <li>不要纠结于是否是最佳思路，要保证能在 10-15 分钟内给出一个解决方案，并分析复杂度；</li>
  <li>基础的可以读读 <a href="http://weibo.com/julyweibo?topnav=1&amp;wvr=6&amp;topsug=1">@研究者July</a> 的这本 <a href="http://frank19900731.github.io/ebook/the-art-of-programming-by-july/index.html">电子书</a>，更深入的可以阅读 CSDN 等博客中大牛们写的 ACM 解题报告；</li>
  <li><a href="http://www.hihocoder.com/">hihocoder</a>、<a href="http://www.topcoder.com/">topcoder</a>、<a href="https://oj.leetcode.com/">leetcode</a>、<a href="https://codility.com/">codility</a>、<a href="http://poj.org/">POJ</a> 等网站择一练手。</li>
</ul>

<h2 id="section-13">开放题目</h2>

<p>这类开放题目让你自主选择数据结构，主要是考察求职者对于数据结构的特性与使用场景的综合理解，在面对具体应用场景时能否运用已有的数据结构和算法知识提出合理的解决方案。一般来说在这类问题里哈希表的出场率会比较高……例题如下</p>

<ol>
  <li>大数据量的 url log，怎么去重且统计每个 url 的出现次数，复杂度分析；</li>
  <li>设计 cache 系统
    <ul>
      <li>设计 cache 的接口；</li>
      <li>可以用什么数据结构实现；</li>
      <li>如何实现可伸缩的容量；</li>
      <li>cache 的空间管理策略，比如 cache 哪些条目，何时清理；</li>
      <li>cache 系统启动时分配多大的空间，之后按照怎样的策略增大；</li>
    </ul>
  </li>
  <li>设计爬虫；</li>
  <li>流媒体播放客户端从多个完全相同的发送方接收视频包，同一发送方的包会按序到达，不同发送方的包则不一定，有可能会丢包，但还是要保证播放流畅度，设计播放客户端的算法。 </li>
</ol>

<h2 id="section-14">总结</h2>

<ul>
  <li>数据结构和算法的基础知识还是十分重要的，大部分题目的思路来源于此；</li>
  <li>训练自己算法复杂度的分析能力，<strong>有的时候对复杂度的分析会反过来会帮助你找到更好的算法</strong>；</li>
  <li>一定量的题目积累很重要，就好像准备高考数学压轴题一样，见识的越多，思路来得越快，当然，前提是你能够<strong>不断总结反思</strong>。</li>
</ul>

<p>继 <code>机器学习、大数据问题</code>、<code>智力题</code>、<code>数据结构与算法题</code>，我们在最后还会分享 <code>编程语言题</code>，敬请期待。</p>

<p>访问入口：</p>

<ul>
  <li><a href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">编程语言题</a></li>
</ul>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个工具控的效率观]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/13/yi-ge-gong-ju-kong-de-xiao-lu-guan/"/>
    <updated>2014-11-13T15:49:04+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/13/yi-ge-gong-ju-kong-de-xiao-lu-guan</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">时间轴</a>    <ul>
      <li><a href="#section-2">2014年5月12日</a></li>
      <li><a href="#section-3">2014年6月3日补充</a></li>
      <li><a href="#section-4">2014年6月20日补充</a></li>
      <li><a href="#section-5">2014年6月21日补充</a></li>
      <li><a href="#section-6">2014年8月17日补充</a></li>
      <li><a href="#section-7">2014年8月21日补充</a></li>
      <li><a href="#section-8">2014年8月24日补充</a></li>
      <li><a href="#section-9">2014年8月27日补充</a></li>
      <li><a href="#section-10">2014年8月29日补充</a></li>
      <li><a href="#section-11">2014年10月13日补充</a></li>
      <li><a href="#section-12">2014年10月29日补充</a></li>
      <li><a href="#section-13">2014年11月8日补充</a></li>
    </ul>
  </li>
</ul>

<!-- excerpt start -->

<h2 id="section">前言</h2>

<p><strong>这是一篇在不断更新中的文章，主要用于记录我在学习工作过程中为解决效率瓶颈而发掘的软件工具，以及该工具的使用体验和配套的工作方式。</strong></p>

<ul>
  <li><code>何为工具控？</code> 在使用 MacBook Pro 的近两年时间里，自己大大小小“使用”过超过1000款软件，常驻笔记本里的大概有700款，每周都会有添加删除，详细列表见 <a href="http://blog.sina.com.cn/s/blog_64ac3ab10101f4it.html">这篇文章</a>。“使用”的含义可就多了，可能是常用以至于开机自启动，可能是专门用于某项用途，也可能只是摸过、了解功能和适用场景。这么多软件，管理上主要使用 QuickSilver（因为自己最早用的就是这个，虽然现在大家更多提到的是 Alfred）。我觉得自己还担不起拜物教的名号，顶多是个实用主义者和收藏强迫症。工具对我的意义有两点，<strong>其一是提供了外界刺激，让我内在的学习动力有了平稳释放的渠道，比如记录美感刺激、时间规划刺激、任务消除刺激，其二是让我有了记录成长历程的手段，解放了大脑</strong>。</li>
  <li><code>工具如何提高效率？</code>
    <ul>
      <li>加速知识记录、知识分享、知识利用的过程，质量也得到保障；</li>
      <li>时间规划清晰合理，帮助自己应对纷繁复杂的事务和对象；</li>
      <li>通常，工具是手脚的延伸，而这篇文章里将要提到的软件工具则是主要是感官和记忆的延伸，让大脑做更有意义的事情，也就是思考。</li>
    </ul>
  </li>
  <li><code>为什么是 Mac？</code> 当然可以不是 Mac，只是这篇文章里的很多软件在别的操作系统上是没有的。Mac 在<strong>易用性</strong>（比如系统的升级，软件的安装卸载，强悍的 trackpad）的角度来看是最佳的，优秀的图形界面和基于 UNIX 的操作系统也算是在 Windows 和 Linux 之间取得了良好的折中，适用于科研工作者和程序猿（最近走访的一些企业要么是全 Mac，要么是 Mac 比例在提升），而 MacBook Air 的时尚感与轻便性（索尼的本感觉也有这样的特性）则赢得了白领、女性的青睐。其他方面的话不好评价优劣，毕竟我们大多数人对于 Windows和Linux的掌握也只是皮毛，别人在 Windows 下效率比你在 Mac 下高也是很正常的，因人而异。我不是果吹，但还是有一个比较矫情的想法，那就是我总感觉<strong>在 Mac 上是我在工作，而在 Windows 上是工在做我</strong>。</li>
</ul>

<p>现在 MacBook 已然不是高枝上的凤凰了，其他厂商的笔记本价格与 MacBook 持平或更贵的有很多，强烈建议有换电脑打算的时候给予考虑。有钱把手机换成 iPhone 6、6+，还不如攒个 MacBook，个人感觉性价比更高，<strong>壕请忽略我的话</strong>。</p>

<!-- excerpt end -->

<h2 id="section-1">时间轴</h2>

<h3 id="section-2">2014年5月12日</h3>

<p>最近这段时间使用Ulysses真是如有神助，</p>

<ul>
  <li>Markdown书写；</li>
  <li>层次清晰分明，非常方便组织思路，文字有魂不零碎；</li>
  <li>输出格式丰富，主题模板也很赞，直接看原稿就已经很舒服了；</li>
  <li>界面清爽，全屏模式酷炫；</li>
  <li>Typewriter 模式，写作代入感强；</li>
  <li>支持版本保存，功能相当不鸡肋；</li>
  <li>支持过滤器，虽然自己还没有用过；</li>
  <li>可以附加笔记、图片、关键词和协作目标，有助于搜索，也可以作为效率上的督促。</li>
</ul>

<p>不足之处在于，不能够编辑公式，代码段比较简单，也不能输入表格。</p>

<p>正在使用的有助效率提升的软件梳理</p>

<ul>
  <li><code>OmniFocus</code> GTD 工具，配合 iCalendar 使用爽歪歪，功能暂时掌握不全，但不耽误基本使用。</li>
  <li><code>Evernote</code> 大有被取代之势，重要性在降低，记录一些零七碎八的事情。</li>
  <li><code>FocusMask</code> 效率新贵，提高自身工作时注意力！！！</li>
  <li><code>Papers</code> 支持文献阅读、批注与引用的好工具，可以和 iOS 设备同步。</li>
  <li><code>Eggscellent</code> 番茄工作法，分段限时完成工作，把自己<strong>从无截止时间估计的低效率工作状态中拉出来</strong>。</li>
  <li><code>Timeline 3D</code> 制作高逼格的时间计划表。</li>
  <li><code>Ulysses</code> 出色的写作软件，之前说过，废话不表。</li>
</ul>

<p>期待日后更多的发现。</p>

<h3 id="section-3">2014年6月3日补充</h3>

<ul>
  <li><code>Pocket</code> 极佳的网页保存待查工具，有 Mac、iOS 客户端以及 Chrome 插件，<strong>特别适用于记录问题解决过程中所查询的重要网页资料，省得要保留大量标签页或者来回翻找浏览历史</strong>。</li>
  <li><code>Wunderlist</code> OmniFocus 的精细化补充，跨平台通用。</li>
</ul>

<h3 id="section-4">2014年6月20日补充</h3>

<p>ICML、实习接踵而至，是时候 Papers（读 Paper）以及 Ulysses（会议记录，每日总结）发挥作用的时候了。最近要<strong>规范化记录的方式方法</strong>，让自己在暑假里高效运转起来。</p>

<h3 id="section-5">2014年6月21日补充</h3>

<p>今天被 Ulysses 坑到了，软件无响应，强制关闭，重新打开后部分文件夹和文件顺序错乱、名称显示错误，今后一定要<strong>注意备份</strong>。</p>

<h3 id="section-6">2014年8月17日补充</h3>

<p>Ulysses 虽然非常强大，但是有些事情做得还不是那么好，比如表格上不如 Numbers，而涉及到复杂计算和图表，Numbers 又不如 Excel。</p>

<p>最近调试 ODPS 的过程中发现，还是需要 Numbers 做记录，才能够使得每一个步骤清晰明确，每一个对比结果记录可靠。</p>

<h3 id="section-7">2014年8月21日补充</h3>

<p>目前个人效率存在的三大瓶颈</p>

<ul>
  <li><strong>资料碎片化，需要跳跃式阅读的时候寻址消耗大</strong>；</li>
  <li><strong>项目繁多，接头人、需求、目标、工期预计等需即时管理</strong>；</li>
  <li><strong>文档管理体系亟待完善，不能沿用文件夹模式</strong>。</li>
</ul>

<p>Ulysses 搜索功能还很弱（注：当时系统还是装在机械硬盘上，后来在光驱位加了一块 1T 的 SSD 后，那都不是事儿了），要打造 Ulysses 周边生态环境。</p>

<ul>
  <li><code>Producteev</code> 可以创建 Network 和 Project，适合多项目跟踪，界面美观，可定制项丰富，满足多人协作需求。</li>
  <li><code>iDocument</code> 可导入本地文件夹，也可以维护一个iDocument自身的目录，保存相关的文件，提供标签查找。</li>
  <li><code>OneNote</code> 富文本、交互式文本定制，可以保存图片、生成表格、插入文件，排版布局方便，是对 Ulysses 的有益补充。</li>
  <li><code>mediawiki</code> 网页版 wiki，常见于某些实验室的网站，优点是其索引、链接能力，便于分享，还可以输入表格、公式，大大弥补了 Ulysses 的不足。</li>
</ul>

<h3 id="section-8">2014年8月24日补充</h3>

<p>补充使用体验</p>

<ul>
  <li><code>Producteev</code> 评论功能很赞，可以存储事件相关的命令行、网页链接、文件等，使得在众多事情的切换中保持脑袋不乱。</li>
  <li><code>iDocument</code> 界面很棒，今后零散的微博文件分享也有方法保存啦！每一个文件都要打好 tag，方便搜索查找，目前 iDocument 还不支持文件的内容搜索，可以用 EasyFind 实现。</li>
  <li><code>mediawiki</code> 从这两天的经验看，Ulysses 里面经常翻阅的东西就要考虑写到 mediawiki 中了，作为个人知识库的 cache。最最最重要的是，<strong>有效解决了诸如 Ulysses、Evernote 等笔记软件中笔记间无法加链接的问题</strong>。</li>
</ul>

<h3 id="section-9">2014年8月27日补充</h3>

<ul>
  <li><code>Octopress</code> 用法见 <a href="http://frank19900731.github.io/blog/2014/08/24/wo-de-di-yi-pian-octopress-bo-ke/">此篇博客</a>，配置见 <a href="http://frank19900731.github.io/blog/2014/10/16/octopress-gai-zao-ji-lu/">此篇博客</a>。养成知识输出与分享的习惯，争取让自己的博客小有名气。</li>
  <li><code>Byword</code> 考察了不下十款 Mac 下的 Markdown 编辑器，最终敲定此软件。非常棒的界面设计，写起来很带感的说，段落聚焦（Paragraph Focus）的功能尤赞，专注写作的不二之选，Typewritter 模式也可用，支持字体的自定义，用于 Octopress 写作。</li>
</ul>

<h3 id="section-10">2014年8月29日补充</h3>

<ul>
  <li><code>Dash</code> API大全，程序员必备，从诞生伊始就开始关注，一直用到现在，作为一个收藏强迫症患者当然全部下载，<strong>光是索引文件就有40多G</strong>，但是心里满满的踏实感。支持代码片段存储，且在 Dash 开启时，支持在代码编辑器中使用缩写替换，问题在于没有办法进行云同步。</li>
  <li><code>Gistify</code> 这是 gist 的比较好的 Mac 客户端，缺点是不能指定文件名和Description，优点是创建后自动生成的 url 在剪贴板里，可以到网页上进行修改。</li>
  <li><code>PopClip</code> 万金油，插件丰富强大，功能在不断完善。</li>
</ul>

<h3 id="section-11">2014年10月13日补充</h3>

<ul>
  <li><code>Caffeinated</code> RSS阅读器，虽然还有这排版上的一些问题，但是其优雅的展示效果还是令我不能舍弃。最近花了大力气整理了各方面的RSS资源，希望能够养成此类阅读习惯，将碎片化的时间以及之前浪费在游戏等方面的时间充分利用起来。此外，<strong>这还相当于一个优质博客集合的入口，比起让这些链接沉睡在浏览器收藏夹里要好很多</strong>。</li>
</ul>

<h3 id="section-12">2014年10月29日补充</h3>

<ul>
  <li><code>SketchBookPro</code> <strong>配合 Wacom 手写输入板，记录公式快快哒</strong>。</li>
</ul>

<h3 id="section-13">2014年11月8日补充</h3>

<ul>
  <li><code>Notebooks</code> 较好的三列组织形式，支持 Markdown 语言，是较好的写书工具。</li>
  <li><code>Gitbook</code> 类似于 pandoc，支持丰富格式导出，比如 epub、mobi、pdf、网页版，特别是网页版会有较好的传播价值。</li>
  <li><code>Daum Equation Editor</code> Latex 公式书写利器，方便博客写作。</li>
  <li><code>花瓣网（Chrome插件）</code> 图片采集神器，非常有于前端积累，<strong>给图片的高效保存提供了较完美的解决方案</strong>。</li>
</ul>

<p><strong>未完待续</strong></p>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/13/yi-ge-gong-ju-kong-de-xiao-lu-guan/">http://frank19900731.github.io/blog/2014/11/13/yi-ge-gong-ju-kong-de-xiao-lu-guan/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享之智力题]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/"/>
    <updated>2014-11-07T14:56:13+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">题目介绍</a></li>
  <li><a href="#section-2">其它经典题目</a></li>
  <li><a href="#section-3">总结</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">前言</h2>
<p>我在算法工程师面试中遇到的智力题主要是指涉及到一些数学计算、证明的题目，基本是中小学奥数题。喜欢问这类问题的主要有互联网创业公司或外企，招收数值策划的游戏公司，当然，更多的是金融、投资相关的企业。从题目类型上分，有排列组合题、概率题等。</p>

<h2 id="section-1">题目介绍</h2>

<p><strong>题目一：给定天平，问要称重1-N N种不同质量，最少需要多少种砝码？</strong></p>

<p><strong>1）砝码只允许放在天平的一端；</strong></p>

<p><strong>2）砝码可以放在天平的两端。</strong></p>

<p><strong>解答：</strong> </p>

<ul>
  <li>只允许放在一边的情况，开始自己以为是斐波那契数列，不过显然数列生成方式里存在冗余（1+2=3）。1、2 肯定是最基本的数字，<strong>新添加的砝码质量应该是原砝码集合所能称量的最大质量加一</strong>，如此生成的数列就是2的幂次，1，2，4，……想到正整数二进制表达的唯一性，应该是不存在冗余的。可表示性是有了，对于1-N N种不同的质量，最少需要 <script type="math/tex">\left\lceil \log _{ 2 }{ (N+1) }  \right\rceil </script> 种不同的砝码，那是不是最少的呢？这种做法没有冗余，且表示范围是砝码的排列组合（每一个砝码可用可不用），应该就是最少了的，不过这不是严格证明。</li>
  <li>允许放在两边的情况，1、3是最基本的，因为 2 可以用 3-1 表达，<strong>新添加砝码的质量应该满足的条件是原砝码集合所能称量的最大质量加上这个最大质量的下一个质量</strong>。这种构造方法同样没有冗余，且表示范围是砝码的排列组合（每一砝码可加、可减、可不用，再排除掉和非正数的情况），所以应该也是最少的。按照这个思路生成的数列就是3的幂次，1，3，9，27……可以用数学归纳法证明如下。</li>
</ul>

<!-- excerpt end -->

<p><strong>证明：数列 <script type="math/tex">1，3，…，3^{n-1}</script>，任取其中若干进行加减组合可以表示 <script type="math/tex">1</script> 到 <script type="math/tex">\frac{3^n - 1}{2}</script> （允许减法的排列组合所能表示的最大范围）间的不同数值。</strong></p>

<p>1）<script type="math/tex">k=1</script> 时，显然满足；</p>

<p>2）<script type="math/tex">k=n</script> 时，有 <script type="math/tex">1，3，……，3^{n-1}</script> 可以表出 <script type="math/tex">1</script> 到 <script type="math/tex">\frac{3^n - 1}{2}</script>；</p>

<p>3）<script type="math/tex">k=n+1</script> 时，要证明 <script type="math/tex">1，3，……，3^n</script> 可以表出 <script type="math/tex">1</script> 到 <script type="math/tex">\frac{3^{n+1} - 1}{2}</script> </p>

<p>3-1）<script type="math/tex">1</script> 到 <script type="math/tex">\frac{3^n - 1}{2}</script> 显然可由 <script type="math/tex">1，3，……，3^{n-1}</script> 表出； </p>

<p>3-2）<script type="math/tex">\frac{3^n + 1}{2}</script> 到 <script type="math/tex">3^n - 1</script> 可以由 <script type="math/tex">3^n</script> 减去 <script type="math/tex">\frac{3^n - 1}{2}</script>  到 <script type="math/tex">1</script> 表出；</p>

<p>3-3）<script type="math/tex">3^n</script> 是新加入的数，可以单独表出；</p>

<p>3-4）<script type="math/tex">3^n + 1</script> 到 <script type="math/tex">\frac{3^{n+1} - 1}{2}</script> 可以由 <script type="math/tex">3^n</script> 加上 <script type="math/tex">1</script> 到 <script type="math/tex">\frac{3^n - 1}{2}</script> 表出。</p>

<p>综上，有原命题成立。</p>

<p>有关本题的更多讨论参见果壳网的 <a href="http://www.guokr.com/article/3742/">这篇文章</a>。</p>

<p><strong>题目二：如下图所示概率密度分布，左边平缓，右边陡峭，指定中位数的位置，问均值在中位数的左侧还是右侧？</strong></p>

<p><a href="http://frank19900731.github.io/img/post/2014-11/1.png" class="img-up" title="概率分布，中位数和均值的位置关系"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-11/1.png" width="40%" title="概率分布，中位数和均值的位置关系" /></a></p>

<p><strong>解答：</strong> </p>

<p>我的感觉是均值在中位数的左侧，不过我希望用严格的数学推导证明出来，后来发现很有难度，因为没有给出概率密度分布的具体形式。面试官及时“制止”了我，让我想一点直观的解释。</p>

<p>我觉得可以用收入分布来类比，左边高收入人群少，右边是低收入群体，占很大的比重。统计局公布的人居年收入是均值，网友纷纷表示自己拉低了平均收入，不上网的人收入水平可能更低一些。综上，姑且认为超过一半的人收入不及均值（只是为回答问题而做的推测，超过平均水平的一般不会自己说出来，所以可能统计有偏差），也即中位数在均值的右侧。</p>

<p>面试官给出的解释比我的好很多。类比一把斧头的质量密度，中位数左右的半边斧头质量相等，而均值则是斧头的支撑平衡点（假设均值为0，这个支撑平衡点就是原点），根据力矩平衡原理，支撑点要比中位数更偏向斧头的木把儿一边。</p>

<p><strong>题目三：玩家打怪，通关一次掉落 A 装备的概率是 0.1，掉落 B 装备的概率是0.2，该玩家要获得 A、B 两件装备的期望通关次数是多少？</strong></p>

<p><strong>解答：</strong> </p>

<p>画图表示 A 和 B 的关系</p>

<p><a href="http://frank19900731.github.io/img/post/2014-11/2.png" class="img-up" title="A 和 B 的三种关系"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-11/2.png" width="70%" title="A 和 B 的三种关系" /></a></p>

<ul>
  <li>如果 A 和 B 是互斥事件，首先考虑第一次拿到一件装备的期望通关次数，这件装备有 <script type="math/tex">\frac{1}{3}</script> 的可能性是 A，<script type="math/tex">\frac{2}{3}</script> 的可能性是 B，接下来根据几何分布的无后效性进行计算，期望次数为 </li>
</ul>

<script type="math/tex; mode=display">\frac{1}{0.1 + 0.2} + \frac{1}{3}  \times  \frac{1}{0.2} + \frac{2}{3} \times \frac{1}{0.1} = \frac{35}{3}</script>

<ul>
  <li>如果 B 事件 包含 A 事件，则期望次数为 </li>
</ul>

<script type="math/tex; mode=display">\frac{1}{0.1} = 10</script>

<ul>
  <li>其他情况，期望次数在 <script type="math/tex">10</script> 和 <script type="math/tex">\frac{35}{3}</script> 之间。</li>
</ul>

<p><strong>变式：玩家一打掉落 A 装备的怪，玩家二打掉落 B 装备的怪，相互独立，他们协作收集 A、B 两件装备，则期望多少轮集齐？</strong></p>

<ul>
  <li>
    <p>思路一：有三种可能性，先拿到 A 再拿到 B，概率是 <script type="math/tex">\frac{4}{14}</script>，先拿到 B 再拿到 A，概率是 <script type="math/tex">\frac { 9 }{ 14 } </script>； A、B同时拿到，概率是 <script type="math/tex">\frac { 1 }{ 14 }</script> 。这些概率可以通过列写等比数列求和公式得到，本文不赘述，因为思路二提供了更简单的计算方法。计算期望得 </p>

    <script type="math/tex; mode=display">\frac{4}{14} \times  \frac{1}{0.2} + \frac{9}{14}  \times  \frac{1}{0.1} + \frac{1}{14} \times \frac{1}{0.1 \times 0.2} = \frac{80}{7}</script>

    <p>关于最后一项 <script type="math/tex">\frac{1}{14} \times \frac{1}{0.1 \times 0.2}</script> 的解释是，玩家一、二一定是在某一轮同时分别获得 A 和 B，那么可以认为是<strong>一个人在玩，而该关卡要么同时掉落 A 和 B，要么什么也不掉落</strong>。由这样一种解释也就自然想到了思路二。</p>
  </li>
  <li>
    <p>思路二：玩家一、玩家二可以统一为一个人，只不过这个人在通关后获得 A、B 的概率是相互独立的，<script type="math/tex">P\left( AB \right) =P\left( A \right) \cdot P\left( B \right) </script>。由此前的计算思路可得期望为 </p>

    <script type="math/tex; mode=display">\frac{1}{0.28} + \frac{0.08}{0.28} \times  \frac{1}{0.2} + \frac{0.18}{0.28}  \times  \frac{1}{0.1} + \frac{0.02}{0.28} \times 0 = \frac{80}{7}</script>
  </li>
</ul>

<p><strong>题目四：一群人每人说一到一百间的整数，接近平均数的三分之二的人会获奖，该说什么数字才能使获奖机率最大？</strong></p>

<p><strong>解答：</strong> </p>

<p>假设每个人都是理性的，那么没有人会选择 67-100，再次分析可知没有人会选择 45-66，以此类推，最终只有选择 1。<strong>不过实际当中并不是所有人都这么聪明理性，做适当的假设可以得到更接近真实情况的结果</strong>。</p>

<blockquote><p>1987年，《金融时报》刊登了一个很诡异的广告，说你可以随便写一个0~100（与本题略有不同）之间的整数	寄回编辑部，然后如果你写的这个数最接近所有寄来的数的平均数的2/3，你就可以获得一张伦敦到纽约的头等舱往返机票。最后得到的结果是……平均数为18.9。也就是写13的人赢了。</p></blockquote>

<p>更多分析见果壳网的 <a href="http://www.guokr.com/question/292144/">这篇文章</a>。</p>

<p><strong>题目五：考虑 n 维向量 X、Y，其中每个元素独立同分布，分布为 N(0，1)，请计算 X、Y 相关系数的均值和标准差。</strong></p>

<p><strong>解答：</strong></p>

<p>本题其实是百度笔试的一道题，只有5分，但还是颇有难度的，实际上本题无需进行任何复杂的积分计算。相关系数的均值表达式如下</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
E\left( r \right)  &= \iint { \frac { \left( X-EX \right) \cdot \left( Y-EY \right)  }{ \left\| X-EX \right\| \left\| Y-EY \right\|  } \cdot p\left( X \right) \cdot p\left( Y \right) dXdY }  \\
&= \iint { \frac { X\cdot Y }{ \left\| X \right\| \left\| Y \right\|  } \cdot p\left( X \right) \cdot p\left( Y \right) dXdY } 
\end{align}
 %]]&gt;</script>

<p>考察 X （或Y）<strong>关于原点的对称抵消特性</strong>，知期望值为 0。</p>

<p>相关系数的方差表达式为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
Var\left( r \right)  &= E{ \left( r-E\left( r \right)  \right)  }^{ 2 } \\
&= E{ r }^{ 2 } \\
&= \iint { \frac { \left( \left( X-EX \right) \cdot \left( Y-EY \right)  \right) ^{ 2 } }{ { \left\| X-EX \right\|  }^{ 2 }{ \left\| Y-EY \right\|  }^{ 2 } } \cdot p\left( X \right) \cdot p\left( Y \right) dXdY }   \\
&= \iint { \frac { \left( X\cdot Y \right) ^{ 2 } }{ { \left\| X \right\|  }^{ 2 }{ \left\| Y \right\|  }^{ 2 } } \cdot p\left( X \right) \cdot p\left( Y \right) dXdY } \\
&= \iint { { \left( \frac { X }{ \left\| X \right\|  } \cdot \frac { Y }{ \left\| Y \right\|  }  \right)  }^{ 2 }\cdot p\left( X \right) \cdot p\left( Y \right) dXdY } 
\end{align}
 %]]&gt;</script>

<p>最后一个式子中，X、Y 的关系是对称的，几何含义是<strong>单位球面上两个随机向量的内积平方的期望</strong>。与其让 X、Y 都随机，我们可以固定其中一个，只计算<strong>随机向量和固定向量的内积平方的期望</strong>，<strong>如果任取固定向量都有这个期望值相同，那么这个期望就是本题的待求期望</strong>。</p>

<p>我们先取固定向量为 <script type="math/tex">{ \left( 0,\quad 0,\quad \dots \quad 1 \right)  }^{ T }</script>，则积分式子转化为</p>

<script type="math/tex; mode=display">\int { \frac { { Y }_{ n }^{ 2 } }{ \sum _{ i=1 }^{ n }{ { Y }_{ i }^{ 2 } }  } \cdot p\left( Y \right) dY } </script>

<p>乍一看分子分母都是卡方分布，不过二者不是相互独立的，也就不构成 F 分布，怎么求解呢？要用到 <script type="math/tex">{ Y }_{ i }</script> 的轮换对称性。</p>

<script type="math/tex; mode=display">\int { \frac { { Y }_{ 1 }^{ 2 } }{ \sum _{ i=1 }^{ n }{ { Y }_{ i }^{ 2 } }  } \cdot p\left( Y \right) dY } =\dots =\int { \frac { { Y }_{ n }^{ 2 } }{ \sum _{ i=1 }^{ n }{ { Y }_{ i }^{ 2 } }  } \cdot p\left( Y \right) dY } </script>

<p>又</p>

<script type="math/tex; mode=display">\sum _{ k=1 }^{ n }{ \int { \frac { { Y }_{ k }^{ 2 } }{ \sum _{ i=1 }^{ n }{ { Y }_{ i }^{ 2 } }  } \cdot p\left( Y \right) dY }  } =1</script>

<p>所以</p>

<script type="math/tex; mode=display">\int { \frac { { Y }_{ k }^{ 2 } }{ \sum _{ i=1 }^{ n }{ { Y }_{ i }^{ 2 } }  } \cdot p\left( Y \right) dY } =\frac { 1 }{ n } ,\quad k=1,2,\dots ,n </script>

<p>也就是说标准差为 <script type="math/tex">\frac { 1 }{ \sqrt { n }  } </script> 咯？</p>

<p>如果随机向量在球面上是均匀分布的那我们的讨论也就停止了，不过事实并非如此。二维情况，考察单位圆周上的随机向量，斜率的分布（两个正态分布的均值为0时，它们的 <a href="http://mathworld.wolfram.com/NormalRatioDistribution.html">商是柯西分布</a> ）是不均匀的。在这种不均匀的情况下，想要得到积分值不变的结论好像没有那么直观。受 <script type="math/tex">{ \left( 0,\quad 0,\quad \dots \quad 1 \right)  }^{ T }</script> 的启发，我想到一个笨办法，还是用到轮换对称性。我们只要<strong>找到值相等的一些表达式，让他们相加等于一个常数即可</strong>。</p>

<p><span style="color: red;">更正：“不均匀”的说法是有问题的，这个不均匀是相对于斜率的不均匀，对于角度而言是均匀的，可以将柯西分布里的比值变量 <script type="math/tex">u</script> 替换为角度 <script type="math/tex">\theta </script>，由下面的表达式知是均匀分布。</span></p>

<script type="math/tex; mode=display">\int _{ -\infty  }^{ +\infty  }{ \frac { 1 }{ \pi \left( 1+{ u }^{ 2 } \right)  } du } =\int _{ -\frac { \pi  }{ 2 }  }^{ \frac { \pi  }{ 2 }  }{ \frac { 1 }{ \pi \left( 1+\tan ^{ 2 }{ \theta  }  \right)  } \frac { d\theta  }{ \cos ^{ 2 }{ \theta  }  }  } =\int _{ -\frac { \pi  }{ 2 }  }^{ \frac { \pi  }{ 2 }  }{ \frac { d\theta  }{ \pi  }  } </script>

<p><span style="color: red;">高维情况如下式所示，某向量的概率密度只与向量长度有关，而与角度无关，所以放缩到单位球面上关于角度是均匀的，所以只需要计算 <script type="math/tex">{ \left( 0,\quad 0,\quad \dots \quad 1 \right)  }^{ T }</script> 一种情况就可以。</span></p>

<script type="math/tex; mode=display">\frac { 1 }{ { \left( \sqrt { 2\pi  }  \right)  }^{ n } } { e }^{ -\frac { \sum _{ i=1 }^{ n }{ { x }_{ i }^{ 2 } }  }{ 2 }  }=\frac { 1 }{ { \left( \sqrt { 2\pi  }  \right)  }^{ n } } { e }^{ -\frac { { r }^{ 2 } }{ 2 }  }</script>

<p>轮换对称性分两步，首先是<strong>系数轮换</strong>，其次是<strong>符号轮换</strong>，以 4 维情况为例，假设固定向量为</p>

<script type="math/tex; mode=display">{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }</script>

<p>系数轮换是指以下四个固定向量计算得到的积分结果是相同的</p>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  } ,\quad \frac { 1 }{ \sqrt { 24 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  } ,\quad \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 2 }  } ,\quad \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  }  \right)  }^{ T }
</script>

<p>符号对称性是指以下八个固定向量计算得到的积分结果是相同的</p>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( -\frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad -\frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad -\frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad -\frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( -\frac { 1 }{ \sqrt { 24 }  } ,\quad -\frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( -\frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad -\frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( -\frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad -\frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<p><strong>系数轮换是为了保证加和结果中各平方项系数相等，可约去分母，符号轮换是为了保证加和结果中的交叉项系数为 0</strong>。对于 4 维向量，我们经过系数轮换和符号轮换获得了 32（<script type="math/tex">= 4 \times 8</script>） 个等值的积分表达式，累加和等于 8，每个积分表达式的值是 <script type="math/tex">{ \frac { 1 }{ 4 }  }</script>，也即 <script type="math/tex">{ \frac { 1 }{ n }  }</script>。</p>

<p>简单总结一下，系数轮换我们采用循环移位的策略，也就是 n 组系数；每组系数对应 <script type="math/tex">{ { 2 }^{ n-1 } }</script> 种（因为是平方，所以一半和另一半是等价的）符号选择。<strong>对于任给的固定向量，总可以通过这样的构造辅助等价固定向量的方式求解，而求得的积分结果总是 <script type="math/tex">{ \frac { 1 }{ n }  }</script></strong>。</p>

<p>综上，<strong>相关系数的均值是 0，标准差是 <script type="math/tex">{ \frac { 1 }{ \sqrt { n }  }  }</script></strong>。</p>

<p>以下是 Matlab 仿真结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>相关系数的均值、方差仿真</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="n">array</span> <span class="p">=</span> <span class="p">[];</span>
</span><span class="line"><span class="n">n</span> <span class="p">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line"><span class="n">iter</span> <span class="p">=</span> <span class="mi">100000</span><span class="p">;</span>
</span><span class="line"><span class="k">for</span> <span class="nb">i</span> <span class="p">=</span> <span class="mi">1</span><span class="p">:</span><span class="n">iter</span>
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="n">normrnd</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="n">y</span> <span class="p">=</span> <span class="n">normrnd</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="n">array</span> <span class="p">=</span> <span class="p">[</span><span class="n">array</span><span class="p">,</span> <span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="o">.*</span><span class="n">y</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">norm</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">norm</span><span class="p">(</span><span class="n">y</span><span class="p">))];</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">avg</span> <span class="p">=</span> <span class="n">mean</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
</span><span class="line"><span class="n">avar</span> <span class="p">=</span> <span class="n">var</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>10 万个相关系数样本，括号内为 <script type="math/tex">\frac{1}{n}</script> 的值</p>

<p>5 维，单次运行均值为 -0.0023，方差为 0.1999（0.2）；</p>

<p>11 维，单次运行均值为 -0.0011，方差为 0.0908（0.0909）；</p>

<p>23 维，单次运行均值为 0.0003，方差为 0.0433（0.0435）。</p>

<h2 id="section-2">其它经典题目</h2>

<ol>
  <li><a href="http://baike.baidu.com/view/2499752.htm?fr=aladdin">卡特兰数</a> 相关问题
    <ul>
      <li>括号化</li>
      <li>出栈次序</li>
      <li><a href="http://blog.csdn.net/jtlyuan/article/details/7440591">找钱问题</a></li>
    </ul>
  </li>
  <li><a href="http://blog.sina.com.cn/s/blog_519169510101bljn.html">帽子问题</a></li>
  <li><a href="http://blog.csdn.net/wangshihui512/article/details/8860193">海盗分金</a></li>
  <li><a href="http://www.zhihu.com/question/25420139">宝石升级</a></li>
  <li>……</li>
</ol>

<h2 id="section-3">总结</h2>

<ul>
  <li>简要复习概率、期望、常见概率分布、排列组合等知识；</li>
  <li>金融、投资领域的面试参加的不多，过段时间再补充几道有关概率、博弈论的题目;</li>
  <li>多关注 <a href="http://www.matrix67.com/blog/">Matrix67</a> 上的题目分享。
    <ul>
      <li><a href="http://www.matrix67.com/blog/archives/501">分享一些有趣的面试智力题（上）</a></li>
      <li><a href="http://www.matrix67.com/blog/archives/502">分享一些有趣的面试智力题（下）</a></li>
      <li><a href="http://www.matrix67.com/blog/archives/2671">10个精彩的智力问题</a></li>
      <li>……</li>
    </ul>
  </li>
</ul>

<p>继 <code>机器学习、大数据问题</code>、<code>智力题</code>，接下来的博文还会陆续分享 <code>编程语言题</code> 和 <code>数据结构与算法题</code>，敬请期待。</p>

<p>访问入口：</p>

<ul>
  <li><a href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">编程语言题</a></li>
</ul>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享之机器学习、大数据问题]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/"/>
    <updated>2014-11-06T14:38:33+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">机器学习、大数据相关岗位的职责</a></li>
  <li><a href="#section-1">面试问题</a></li>
  <li><a href="#section-2">答题思路</a></li>
  <li><a href="#section-3">准备建议</a></li>
  <li><a href="#section-4">总结</a></li>
</ul>

<!-- excerpt start -->

<p>自己的专业方向是机器学习、数据挖掘，就业意向是互联网行业与本专业相关的工作岗位。各个企业对这类岗位的命名可能有所不同，比如数据挖掘/自然语言处理/机器学习算法工程师，或简称算法工程师，还有的称为搜索/推荐算法工程师，甚至有的并入后台工程师的范畴，视岗位具体要求而定。</p>

<h2 id="section">机器学习、大数据相关岗位的职责</h2>

<p>自己参与面试的提供算法岗位的公司有 BAT、小米、360、飞维美地、宜信、猿题库 等，根据业务的不同，岗位职责大概分为：</p>

<ol>
  <li>平台搭建类
    <ul>
      <li>数据计算平台搭建，基础算法实现，当然，要求支持<strong>大样本量、高维度数据</strong>，所以可能还需要底层开发、并行计算、分布式计算等方面的知识；</li>
    </ul>
  </li>
  <li>算法研究类
    <ul>
      <li><strong>文本挖掘</strong>，如领域知识图谱构建、垃圾短信过滤等；</li>
      <li><strong>推荐</strong>，广告推荐、APP 推荐、题目推荐、新闻推荐等；</li>
      <li><strong>排序</strong>，搜索结果排序、广告排序等；</li>
      <li>广告投放效果分析；</li>
      <li>互联网信用评价；</li>
      <li>图像识别、理解。</li>
    </ul>
  </li>
  <li>数据挖掘类
    <ul>
      <li><strong>商业智能</strong>，如统计报表；</li>
      <li><strong>用户体验分析</strong>，预测流失用户。</li>
    </ul>
  </li>
</ol>

<p>以上是根据本人求职季有限的接触所做的总结。有的应用方向比较成熟，业界有足够的技术积累，比如搜索、推荐，也有的方向还有很多开放性问题等待探索，比如互联网金融、互联网教育。在面试的过程中，一方面要尽力向企业展现自己的能力，另一方面也是在增进对行业发展现状与未来趋势的理解，特别是可以<strong>从一些刚起步的企业和团队那里，了解到一些有价值的一手问题</strong>。</p>

<p>以下首先介绍面试中遇到的一些真实问题，然后谈一谈答题和面试准备上的建议。</p>

<!-- excerpt end -->

<h2 id="section-1">面试问题</h2>

<ol>
  <li>你在研究/项目/实习经历中主要用过哪些机器学习/数据挖掘的算法？</li>
  <li>你熟悉的机器学习/数据挖掘算法主要有哪些？</li>
  <li>你用过哪些机器学习/数据挖掘工具或框架？</li>
  <li>基础知识
    <ul>
      <li>无监督和有监督算法的区别？</li>
      <li>SVM 的推导，特性？多分类怎么处理？</li>
      <li>LR 的推导，特性？</li>
      <li>决策树的特性？</li>
      <li>SVM、LR、决策树的对比？</li>
      <li>GBDT 和 决策森林 的区别？</li>
      <li>如何判断函数凸或非凸？</li>
      <li>解释对偶的概念。</li>
      <li>如何进行特征选择？</li>
      <li>为什么会产生过拟合，有哪些方法可以预防或克服过拟合？</li>
      <li>介绍卷积神经网络，和 DBN 有什么区别？</li>
      <li>采用 EM 算法求解的模型有哪些，为什么不用牛顿法或梯度下降法？</li>
      <li>用 EM 算法推导解释 Kmeans。</li>
      <li>用过哪些聚类算法，解释密度聚类算法。</li>
      <li>聚类算法中的距离度量有哪些？</li>
      <li>如何进行实体识别？</li>
      <li>解释贝叶斯公式和朴素贝叶斯分类。</li>
      <li>写一个 Hadoop 版本的 wordcount。</li>
      <li>……</li>
    </ul>
  </li>
  <li>开放问题
    <ul>
      <li>给你公司内部群组的聊天记录，怎样区分出主管和员工？</li>
      <li>如何评估网站内容的真实性（针对代刷、作弊类）？</li>
      <li>深度学习在推荐系统上可能有怎样的发挥？</li>
      <li>路段平均车速反映了路况，在道路上布控采集车辆速度，如何对路况做出合理估计？采集数据中的异常值如何处理？</li>
      <li>如何根据语料计算两个词词义的相似度？</li>
      <li>在百度贴吧里发布 APP 广告，问推荐策略？</li>
      <li>如何判断自己实现的 LR、Kmeans 算法是否正确？</li>
      <li>100亿数字，怎么统计前100大的？</li>
      <li>……</li>
    </ul>
  </li>
</ol>

<h2 id="section-2">答题思路</h2>

<ol>
  <li>用过什么算法？
    <ul>
      <li>最好是在<strong>项目/实习的大数据场景</strong>里用过，比如推荐里用过 CF、LR，分类里用过 SVM、GBDT；</li>
      <li>一般用法是什么，是不是自己实现的，有什么比较知名的实现，使用过程中<strong>踩过哪些坑</strong>；</li>
      <li>优缺点分析。</li>
    </ul>
  </li>
  <li>熟悉的算法有哪些？
    <ul>
      <li>基础算法要多说，其它算法要挑熟悉程度高的说，不光列举算法，也适当说说应用场合；</li>
      <li>面试官和你的研究方向可能不匹配，不过在基础算法上你们还是有很多共同语言的，你说得太高大上可能效果并不好，一方面面试官还是要问基础的，另一方面一旦面试官突发奇想让你给他讲解高大上的内容，而你只是泛泛的了解，那就傻叉了。</li>
    </ul>
  </li>
  <li>用过哪些框架/算法包？
    <ul>
      <li>主流的分布式框架如 Hadoop，Spark，Graphlab，Parameter Server 等择一或多使用了解；</li>
      <li>通用算法包，如 mahout，scikit，weka 等；</li>
      <li>专用算法包，如 opencv，theano，torch7，ICTCLAS 等。</li>
    </ul>
  </li>
  <li>基础知识
    <ul>
      <li>个人感觉高频话题是 SVM、LR、决策树（决策森林）和聚类算法，要重点准备；</li>
      <li>算法要从以下几个方面来掌握
        <ul>
          <li>产生背景，适用场合（数据规模，特征维度，是否有 Online 算法，离散/连续特征处理等角度）；</li>
          <li>原理推导（最大间隔，软间隔，对偶）；</li>
          <li>求解方法（随机梯度下降、拟牛顿法等优化算法）；</li>
          <li>优缺点，相关改进；</li>
          <li>和其他基本方法的对比；</li>
        </ul>
      </li>
      <li>不能停留在能看懂的程度，还要
        <ul>
          <li>对知识进行结构化整理，比如撰写自己的 cheet sheet，我觉得<strong>面试是在有限时间内向面试官输出自己知识的过程</strong>，如果仅仅是在面试现场才开始调动知识、组织表达，总还是不如系统的梳理准备；</li>
          <li>从面试官的角度多问自己一些问题，通过查找资料总结出全面的解答，比如如何预防或克服过拟合。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>开放问题
    <ul>
      <li>由于问题具有综合性和开放性，所以不仅仅考察对算法的了解，还需要足够的实战经验作基础；</li>
      <li><strong>先不要考虑完善性或可实现性</strong>，调动你的一切知识储备和经验储备去设计，有多少说多少，想到什么说什么，方案都是在你和面试官讨论的过程里逐步完善的，不过面试官有两种风格：引导你思考考虑不周之处 or 指责你没有考虑到某些情况，遇到后者的话还请注意<strong>灵活调整答题策略</strong>;</li>
      <li>和同学朋友开展讨论，可以从上一节列出的问题开始。	</li>
    </ul>
  </li>
</ol>

<h2 id="section-3">准备建议</h2>

<ol>
  <li>基础算法复习两条线
    <ul>
      <li><code>材料阅读</code> 包括经典教材（比如 PRML，模式分类）、网上系列博客（比如 研究者July），系统梳理基础算法知识；</li>
      <li><code>面试反馈</code> <strong>面试过程中会让你发现自己的薄弱环节和知识盲区，把这些问题记录下来，在下一次面试前搞懂搞透</strong>。</li>
    </ul>
  </li>
  <li>除算法知识，还应适当掌握一些系统架构方面的知识，可以从网上分享的阿里、京东、新浪微博等的架构介绍 PPT 入手，也可以从 Hadoop、Spark 等的设计实现切入。</li>
  <li>如果真的是以就业为导向就要在平时注意实战经验的积累，在科研项目、实习、比赛（Kaggle，Netflix，天猫大数据竞赛等）中摸清算法特性、熟悉相关工具与模块的使用。</li>
</ol>

<h2 id="section-4">总结</h2>

<p>如今，好多机器学习、数据挖掘的知识都逐渐成为常识，要想在竞争中脱颖而出，就必须做到</p>

<ul>
  <li>保持学习热情，关心热点；</li>
  <li>深入学习，会用，也要理解；</li>
  <li>在实战中历练总结；</li>
  <li>积极参加学术界、业界的讲座分享，向牛人学习，与他人讨论。</li>
</ul>

<p>最后，希望自己的求职季经验总结能给大家带来有益的启发。</p>

<p>继 <code>机器学习、大数据问题</code>，接下来的博文还会陆续分享 <code>智力题</code>、<code>编程语言题</code> 和 <code>数据结构与算法题</code>，敬请期待。</p>

<p>访问入口：</p>

<ul>
  <li><a href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">编程语言题</a></li>
</ul>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的时间管理经验与工具分享]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/27/wo-de-shi-jian-guan-li-jing-yan-yu-gong-ju-fen-xiang/"/>
    <updated>2014-10-27T10:01:58+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/27/wo-de-shi-jian-guan-li-jing-yan-yu-gong-ju-fen-xiang</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">引子</a></li>
  <li><a href="#section-1">第一式：安排好你知道将要发生的</a></li>
  <li><a href="#section-2">第二式：建立消息队列</a></li>
  <li><a href="#section-3">第三式：记录你的灵感</a></li>
  <li><a href="#section-4">第四式：建立等待队列</a></li>
  <li><a href="#section-5">第五式：建立拖延事件队列</a></li>
  <li><a href="#section-6">第六式：创建富消息</a></li>
  <li><a href="#section-7">第七式：日常任务定量化</a></li>
  <li><a href="#section-8">时间管理的其它贴士</a></li>
  <li><a href="#section-9">总结</a></li>
  <li><a href="#section-10">附录</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">引子</h2>

<p>前一段时间写的<a href="http://frank19900731.github.io/blog/2014/10/23/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang/">《我的知识管理经验与工具分享》</a>（<a href="http://frank19900731.github.io/wx/2014-10-23-wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang.html">移动版</a>）一文发布后得到了不错的反响，自己倍受鼓舞，以至于这两天自己做着做着事情都会不自主的笑出来……特别是分享到微信朋友圈后，有众位同学朋友的热心支持，才使得拙作得以被展现在更多人的面前。不得不承认，社交网络给知识分享提供了太多的可能，除此以外自己觉得还有两点很关键</p>

<ul>
  <li><code>写什么</code> 分享生活工作中所思所想，不要无病呻吟、无信息量；</li>
  <li><code>怎么写</code> 尽量还原最真实的想法（人们在回忆时容易把时隔已久的困难淡化甚至扭转过来，也就是用结果重绘过程，姑且称为自我粉饰倾向吧）。</li>
</ul>

<p>我会始终坚守这两点原则进行博客写作。自己也不是什么成功人士，只是想记录分享一下自身在人生动荡的年代（从校园到社会）里头脑中的真实想法，<strong>欢迎大家提出各种意见建议</strong>。</p>

<p>一通感想之后就谈一谈自己关于时间管理的一点想法，<strong>共七式，附赠心法</strong>。对，<strong>七</strong>确实是我凑出来的，为了便于理解就得条条款款系统化嘛。我也不是学院派，没读过时间管理的书籍，都是在实践中发现问题再想解决方案的。</p>

<!-- excerpt end -->

<h2 id="section-1">第一式：安排好你知道将要发生的</h2>

<p>组会每周一次，笔试/面试安排在X月X日，大牛讲座在X月X日……这些事项一般都可以提前至少一天知道，将它们详细记录在电子日历（Google Calender）或者 GTD（Getting Things Done） 工具中，包括起止时间、项目归属、地点、要见的人、要带的东西（2B铅笔、准考证之类的）等。所使用的工具最好是PC端和移动端可同步的，前一天晚上录入事项，之后在移动端查看、标记完成。</p>

<p>GTD 源于一本书 <a href="http://book.douban.com/subject/1316569/">Getting Things Done: The Art of Stress-Free Productivity</a>。没看过原书，不过从豆瓣的这篇 <a href="http://book.douban.com/review/1930909/">GTD 心法</a> 介绍来看，有不少理念我们都在平时有意无意的实践着。大家公认的一款与原书理念匹配的 GTD 软件是 OmniFocus，入门稍复杂，只能用于苹果系列产品。大家使用自己趁手的工具就成，我的体会是再牛逼的工具也无法解决你所有的时间管理需求。</p>

<p>另，推荐一个非常知名的时间管理方面的博客——<a href="http://www.mifengtd.cn/">褪墨</a>，虽然我平时不怎么看……原因是我觉得工具和方法都是给人服务的，痴迷于工具和方法的研究有点买椟还珠的意味，把握一个度就好。</p>

<h2 id="section-2">第二式：建立消息队列</h2>

<p>有些事情你只有当天才知道将要发生，区别于 GTD 工具中记录的你提早知道的<strong>离线数据</strong>，我们可以定制一个消息队列，存入当天得到的<strong>在线数据</strong>，用这两套数据指导当天的工作。消息队列的主要考量因素是便捷性，录入一定要迅速，当然，也有跨平台同步的需求。我选择轻量级的 To Do List 工具中的 Wunderlist，主要利用到其创建任务列表、创建任务和给任务加星标的功能。</p>

<p>我把<strong>在线数据</strong>分为<code>紧急确定</code>、<code>普通未定</code>两类：</p>

<ul>
  <li><code>紧急确定</code> 如发现牙膏快用完了得买去或老板通知你下周的组会你来讲，我会仅向消息队列中记录事项名称，必要时再加入时间地点等信息，当天必须完成的事项加星标以作区别。当我遇到空闲，或者到了睡前要总结并安排今后工作的时候，我就会<strong>将积累到消息队列里的任务转移到 GTD 工具中</strong>，录入尽量详细的信息。可能有两个问题
    <ul>
      <li><code>都转移么？</code> 我觉得买牙膏就不录入了吧，消息队列侧重紧急，而 GTD 侧重重要，<a href="http://baike.baidu.com/view/6303330.htm?fr=aladdin">紧急和重要的四象限分析</a> 已是老生常谈；</li>
      <li><code>在消息队列里已经完成的任务还要转移么？</code> 我觉得还是很有必要的，在 GTD 工具中完整地、原生态地保留工作记录，方便回顾总结，特别是领导让你写个报告什么的，可好使了。一个经典场景是，<strong>当我回顾这一周的工作，我印象中已经发生了大半个月的事情其实就发生在本周二</strong>，记忆偏差实在是大，不记不行啊。每天坚持写工作日记可能耽误时间、不实用，但什么都不记也不合适，还是要找到一个<strong>前进</strong>和<strong>存档</strong>的平衡点。</li>
    </ul>
  </li>
</ul>

<div></div>

<ul>
  <li><code>普通未定</code> 比如你在碎片化阅读的过程中看到一项自己感兴趣的技术或一本众人称赞的书，让你立刻就去学习阅读有点不太可能，但仅仅将他们记录到笔记中（包括收藏啦，@我的印象笔记啦，复制粘贴啦）或者只记到脑子里，那没过两天就忘了这茬儿了，不要低估自己喜新厌旧的能力哦。我的做法是在 Wunderlist 里建一个<strong>慢消息队列，冷处理但不是不处理</strong>。队列中的每一项就是个技术名或者书名之类的。这个列表的事项是不急于转移到 GTD 工具里的，因为随便挑其中一个出来可能都是项目量级而非任务量级，甚至需要一点调研规划。比如你打算学学 hadoop 框架，得先找点儿资料、论坛什么的看看，大致掌握它的学习路径然后量化到你的 GTD 工具里。可能的问题是
    <ul>
      <li><code>记在慢消息队列和记笔记里不还是一样么？</code> 嗯，也差不多，如果你在笔记里专辟一篇记录这些东西的话。重点在于把它们聚在一起，而不是分散记录。</li>
    </ul>
  </li>
</ul>

<h2 id="section-3">第三式：记录你的灵感</h2>

<p>灵感这词儿有点夸大，不是牛顿被苹果砸了产生的那种，只是突然想明白了一个问题或者产生了一个自认为有价值的想法。比如这篇文章不少内容就是站地铁里发呆的时候寻思出来的。</p>

<p>如果你的灵感比较简短，那 Wunderlist 还是一个不错的选择，创建一个任务列表专门记录。一定要想到了就尽快掏手机记，不然一会儿的状态就是，我刚想的是什么来着？</p>

<p>如果你的灵感来的跟泄洪一样，那就赶紧用录音软件记录吧，当然如果是搞设计的，需要的就是绘图软件。多媒体笔记软件挺多的，印象中还有专门以记录灵感为卖点的。等到有时间整理灵感的时候，就有两种可能</p>

<ul>
  <li>删了，当我没说过；</li>
  <li><strong>转换成任务，实现它！</strong></li>
</ul>

<h2 id="section-4">第四式：建立等待队列</h2>

<p>等待队列想要解决的问题是，有些任务虽然我标记完成，但我仍旧需要跟踪反馈，比如我申请了XX公司的职位，但该公司要过好久才能给我确认通知及笔试通知。我的做法是原任务标记完成后，如果该任务还有待后续确认，那就在等待队列（也是在 Wunderlist 里建）里添加一条。<strong>等不到就催一催，等到了就结束</strong>。码农朋友们可能笑了，这个想法确实是受 <a href="http://baike.baidu.com/view/185289.htm?fr=aladdin">异步调用</a> 的启发。</p>

<p>还是那句话，没什么特别之处，只要把所有需要等待的任务放在一起，效果就是<strong>脑子不乱了，焦虑感也减轻了，刷起新任务更有劲儿了</strong>。</p>

<h2 id="section-5">第五式：建立拖延事件队列</h2>

<p>有时间管理工具使用经验的童鞋可能都有过类似的经历，就是有一些顽固的任务，你总倾向于把它从今天拖到明天，从这周拖到下周，依次类拖。大家都爱打任务列表里的小怪，不想打大 boss。这是一个<strong>世界性难题</strong>，我们会因此变得情绪焦虑、产生挫败感。</p>

<p>我的方法，按照故事的尿性，相信大家都能猜得出来，就是把这些顽固的任务聚在一起……剔除那些不重要的，因为拖延也可能是分配任务不合理导致的。剩下的要像狠心老板压榨员工一样强迫自己逐渐完成，人们不总是喜欢说最大的对手其是自己嘛。</p>

<p>关于拖延事件的解决，自己也还在探索中，方法还包括在 <a href="#section-7">第七式：日常任务定量化</a> 规定<strong>每日完成拖延事件队列中的一条</strong>。那么你的问题来了，<strong>拖延事件队列中还会有一些压箱底的拖延事件怎么办</strong>？</p>

<p>我也没什么好办法，一方面自己不是拖延症研究专家，相信也没有哪个专家敢说自己有完美的解决方案，另一方面，还是很看主观因素的，我就时常用大锤的 <code>走向人生巅峰</code> 这句话激励自己，拖延这副熊样是走不到巅峰的。实在不行，你就采用随机化的方法，通过掷骰子来选择做先解决哪个拖延事件吧。</p>

<h2 id="section-6">第六式：创建富消息</h2>

<p>有些任务光光记录时间、地点、人物是不够滴，还可能会包含附加资源，比如填写就业推荐表的任务需要表，申请某公司职位的任务需要网址。我期望任务的资源就近安放，点选任务就会出现。</p>

<p>前面提到的 OmniFocus 可以给任务添加笔记，但无法添加附件，而 Wunderlist 则通过评论的方式实现了这一功能。Wunderlist 起初也是没有这项功能的，更早的时候我选择用 Producteev 建立富消息，这也是一款功能和界面都让人舒服的软件，收费版和免费版对于我们小用户来说基本无差。</p>

<p>我想举例说明一下富消息的使用。</p>

<p>算法当中需要调参数，于是我们会运行多组程序对比结果。普通做法是将每次运行的结果记录到笔记或Excel里，容易记混乱，导致抓狂；高档做法是让程序生成一个总的报表，需要额外编程费时间。富消息可以为我们提供一个折中的解决方案，方法是你创建一个任务，任务名是程序id、参数与启动时间之类的，评论里可以记录运行结束的时间、运行结果、log文件、效果截图等等。妥妥儿的不会乱，还便于查看对比。需要补充的一点是，因为可能云同步，所以机密的东西就不要乱传了。</p>

<p>我估计软件设计者当初也没太想到这种用法，嘿嘿。</p>

<h2 id="section-7">第七式：日常任务定量化</h2>

<p>自己的日常任务包括，逛逛技术博客收藏点儿文章、关注周边的讲座信息、整理时间规划、完成知识输出等。既然每天都要做，那还是放在一起列成单子好一些，每天标定完成度。具体有三点好处</p>

<ul>
  <li>目标明确，是<strong>你知道要做，而不是想到了再做</strong>；</li>
  <li>积累属于自己的“大数据”，监控自己的工作状态；</li>
  <li>有助于培养长期习惯。</li>
</ul>

<p>这个想法很普通，不过真正促成我做成这件事是因为我玩了一款网页游戏。这类网页游戏都会有日常任务，比如打某个副本5次啦，招募一个新武将啦之类的，完成后给你相应的奖励。我边玩边想，你这家伙对游戏里的任务这么上心，每天都是高完成率，就不能自己给自己建立一个类似的任务列表，每天保质保量的完成么。于是我给自己建了第一张清单，分专业学习、身体健康、情绪控制、时间规划、人际拓展、新事物接触六大板块，每类有子项，总计100分。</p>

<p><strong>清单可以打印出来，也可以做成可勾选的 Excel 文件的形式</strong>。现在这种清单方式是我主要的<strong>日回顾</strong>手段。</p>

<h2 id="section-8">时间管理的其它贴士</h2>

<p>除了以上七式，还有几条感触想与大家分享。</p>

<ul>
  <li><code>注意时间的权重不均匀性</code> 典型的例子是 <a href="http://book.douban.com/subject/1083762/">《人类群星闪耀时》</a> 这本书里的故事，当然，普通人很难经历这些啦。我们身边的一个例子是，<strong>平时可以打游戏，考前必须抱佛脚，考试就那么几天，刷——，说没就没啊</strong>。</li>
  <li><code>记录周报、月报</code> 暑假里养成了记周报、月报的习惯，作用不仅仅是梳理工作，也让阶段性规划管理成为可能。平时，任务创建大多是被动的（别人口述的、邮件里通知的等等）、预告式的，而在阶段性规划中我们可以主动为下周或者下个月制定发展计划与侧重点，比如把对 hadoop 的学习穿插在下月日程中，月末总结验收。</li>
  <li><code>注意运用纸笔</code> 大部分（不敢说得太绝对呀）效率管理工具都是纸笔的延伸，在有些问题上，纸笔或许就是最高效的解决方案。</li>
</ul>

<h2 id="section-9">总结</h2>

<p>本文总结了时间管理七式，分别是</p>

<ul>
  <li>第一式：安排好你知道将要发生的</li>
  <li>第二式：建立消息队列</li>
  <li>第三式：记录你的灵感</li>
  <li>第四式：建立等待队列</li>
  <li>第五式：建立拖延事件队列</li>
  <li>第六式：创建富消息</li>
  <li>第七式：日常任务定量化</li>
</ul>

<p>有招式还要有心法口诀，那就是</p>

<ul>
  <li>遇到问题不抱怨，抽象出问题的本质，思考解决问题的手段；</li>
  <li>把相似的问题集中起来，合力解决；</li>
  <li>多给自己提需求，不要安于现状。</li>
</ul>

<p>阅读本文的亲，</p>

<p>如果你正在做类似的事情，那我很高兴自己的想法得到了印证；</p>

<p>如果对你产生了一点启发，我也很高兴自己对他人起到帮助作用；</p>

<p>如果你觉得自己有更好的办法，请不吝赐教，乐意为你传播你的想法~</p>

<h2 id="section-10">附录</h2>

<p>本文提到的软件图标合集</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/2.png" class="img-up" title="OmniFocus"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/2.png" width="20%" title="OmniFocus" /></a>
<a href="http://frank19900731.github.io/img/post/2014-10/14.png" class="img-up" title="Wunderlist"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/14.png" width="20%" title="Wunderlist" /></a>
<a href="http://frank19900731.github.io/img/post/2014-10/12.png" class="img-up" title="Producteev"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/12.png" width="20%" title="Producteev" /></a></p>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/27/wo-de-shi-jian-guan-li-jing-yan-yu-gong-ju-fen-xiang/">http://frank19900731.github.io/blog/2014/10/27/wo-de-shi-jian-guan-li-jing-yan-yu-gong-ju-fen-xiang/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[求职季的一点经验之谈]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan/"/>
    <updated>2014-10-25T22:58:48+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">早点准备好自己的中英文简历</a></li>
  <li><a href="#section-1">准备一个靠谱的手机号和靠谱的手机</a></li>
  <li><a href="#section-2">复习职位相关知识点</a></li>
  <li><a href="#section-3">准备自我介绍，回顾项目与实习经历</a></li>
  <li><a href="#tag">及时查阅收件箱与垃圾邮箱，对重要邮件做标记或打 tag，方便处理与查找</a></li>
  <li><a href="#section-4">暑期实习，把握内推机会</a></li>
  <li><a href="#section-5">笔试、面试结束后马上回忆题目，回到学校后查缺补漏</a></li>
  <li><a href="#section-6">和同学朋友结伴申请</a></li>
  <li><a href="#section-7">总结</a></li>
</ul>

<p>废话少说，直接干货。</p>

<!-- excerpt start -->

<h2 id="section">早点准备好自己的中英文简历</h2>

<ul>
  <li>我自己使用的是 mordencv 模板，正反面打印，分别介绍了自己的教育背景、专业学习、个人爱好、科研与实习经历、校内职务、校内奖励和语言水平，有新进展则更新；</li>
  <li>关于简历书写网上有很多的教诲，不再赘述，只想强调一点，要能自圆其说，写了但讲不明白是很尴尬的；</li>
  <li>不同的面试官关注点不同，有的侧重项目，有的侧重实习，还有的会问兴趣爱好，我的一个兴趣爱好 —— Mac 下的软件使用就曾被问及，这个跟技术也不沾边儿，不过能反映出我在某个方面确实动过脑子，也算是给面试官一个爱钻研的印象吧。</li>
</ul>

<h2 id="section-1">准备一个靠谱的手机号和靠谱的手机</h2>

<p>招聘季短信、电话的价值都是很高的，能否接到通知直接关乎申请的成败，不要觉得 HR 姐姐会执着的找你，候选人有的是，不差你这一个。</p>

<!-- excerpt end -->

<h2 id="section-2">复习职位相关知识点</h2>

<p>仅以算法工程师（外加一点点软开）为例，需要准备的知识可能有</p>

<ul>
  <li>程序语言基础，C++、Java 至少得熟一个吧；</li>
  <li>数据库；</li>
  <li>操作系统基础知识，如多线程；</li>
  <li>机器学习（模型、原理、适用场景与推导），大数据处理（主要是 hadoop）；</li>
  <li>数据结构与算法；</li>
  <li>智力题，如一些概率问题。</li>
</ul>

<p>我准备的主要途径是复习教材、跟踪系列分享以及重要知识点默记</p>

<ul>
  <li><code>复习教材</code> 每个人心中都有几本经典教材吧，不要畏难，先找一个下午把整本书翻完作为预热，然后找自己概念模糊的章节细读，个人经验来看，<strong>想要一章一章的把书看完，一般很难坚持到第三章的，这是大实话</strong>；</li>
  <li><code>跟踪系列分享</code> 比如<a href="http://blog.csdn.net/morewindows/article/category/859207">白话经典算法</a>、<a href="http://blog.csdn.net/v_july_v">结构之法算法之道</a> 以及 <a href="https://github.com/julycoding/The-Art-Of-Programming-by-July">The Art of Programming</a>，这类资源实用性很强；</li>
  <li><code>重要知识点默记</code> 我自己准备了一个<strong>精美的硬壳本</strong>（精美是重点，破纸早扔了），每一页记录的是基础的、重要的算法代码与模型推导，每隔几天或每当重要面试前自我抽查、默写。</li>
</ul>

<h2 id="section-3">准备自我介绍，回顾项目与实习经历</h2>

<ul>
  <li>自我介绍是必备的，不要觉得自己都写在简历上了你就看呗，求职的是你自己，面试官没有义务去做阅读理解；一个流畅并略带特色（可以体现幽默、博学、阳光等）的自我介绍，一方面可以给面试官好的第一印象，还可以<strong>将面试官引导到你希望他考察你的地方</strong>，比如你可以强调引以为豪的项目，也可以强调某种算法模型，而这个模型其实你已经在复习知识点的时候研究得很透彻了；</li>
  <li>对于自己做过的项目与实习，由于时间久远或者表达能力上的欠缺，你未必能保证给面试官介绍得通透，所以，还是花点时间回顾并书面化为好，每次面试都能用得上。</li>
</ul>

<h2 id="tag">及时查阅收件箱与垃圾邮箱，对重要邮件做标记或打 tag，方便处理与查找</h2>

<p>学校宣讲会的通知，重要材料的填写，笔试、面试通知（可能包含确认链接），等等，多了就可能遗忘，自己就曾让一封英语测试邮件睡了十天，要么新注册一个邮箱专门用于求职，要么每当看到重要邮件就做标记或打tag，逐个处理完成后再消除标记。</p>

<h2 id="section-4">暑期实习，把握内推机会</h2>

<p>如果有暑期实习的机会，请尽可能按照找工作的标准争取，主要有以下五方面好处</p>

<ul>
  <li>面试能力大练兵；</li>
  <li>暑假过得充实，与求职季完美衔接；</li>
  <li>公司前辈都能分享求职经验，甚至帮你内推其它公司；</li>
  <li>可以获得实习转正机会；</li>
  <li>拿到别的公司的实习机会但没有去，也可能入选该公司的提前批面试。</li>
</ul>

<h2 id="section-5">笔试、面试结束后马上回忆题目，回到学校后查缺补漏</h2>

<ul>
  <li>对于参加过的笔试、面试，自己都有详细的记录与分析，确实能在这个过程中感受自身的能力提升，会在之后的博文中与大家分享；</li>
  <li>求职季每天记录求职笔记，包括今天申请了什么公司、接到了什么通知、学习/复习了什么知识、与谁有过讨论、笔试/面试感受如何等等，效果嘛，谁用谁知道，最起码现在写博客做分享的素材是不愁的。</li>
</ul>

<h2 id="section-6">和同学朋友结伴申请</h2>

<p>找一个对子或者建立一个小组，互相分享感兴趣的职位信息，这样做的好处是</p>

<ul>
  <li>大家的申请进度互为参照，比如我没有收到笔试通知且伙伴也没有收到笔试通知，这很可能是正常现象，我没有收到但伙伴收到了，那就是哪里出问题了；</li>
  <li>信息整合，各取所需；</li>
  <li>面试经验可共享。</li>
</ul>

<h2 id="section-7">总结</h2>

<p>总的来说，求职季是对脑力、体力的双重考验，如果能在这个过程里边求职边思考，相信经过一个求职季的历练，你一定会有大过 offer 的感悟与收获。</p>

<p>接下来，我将从以下四方面分享一下自己的面试总结，欢迎持续关注。</p>

<ol>
  <li><a href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">编程语言题</a></li>
</ol>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan/">http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的知识管理经验与工具分享]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/23/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang/"/>
    <updated>2014-10-23T18:21:07+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/23/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">你的知识问题</a></li>
  <li><a href="#section-2">知识学习</a></li>
  <li><a href="#section-3">知识保存</a></li>
  <li><a href="#section-4">知识分享</a></li>
  <li><a href="#section-5">总结</a></li>
  <li><a href="#section-6">附录</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">前言</h2>

<p>最近我阅读了田志刚先生撰写的<a href="http://book.douban.com/subject/4630664/">《你的知识需要管理》</a>一书。这本书出版于2010年，虽然当中介绍的工具已跟不上现代的潮流，但书中的观点和例证还是发人深省，特别是第一章 <code>你的知识问题</code>。</p>

<p>阅读过程中，我感觉书中部分内容和自己在实践中摸索出的一些观点和方法很契合，于是萌生了将自己的一点知识管理经验整理并分享的念头，这就是撰写本文的初衷。</p>

<p>在你开始正式阅读之前，我先给出一点阅读忠告：</p>

<p>就我个人阅读此类文章或书籍的经验来看，如果不是有过类似的实践经验或者当前正面临类似的问题，一般不太容易产生共鸣，反而会觉得是个大杂烩，或者尝试后觉得根本不好用嘛。对于这样的想法，我想举两个例子：</p>

<ul>
  <li>高考结束后，有些小朋友（主要是学习成绩不理想的）找我学习经验，当时自己苦口婆心讲得口干舌燥，不过效果远不如我所想。后来意识到，每个人都是一个个性化的系统，经验移植很困难，自己摸索出来的才是最合适的。</li>
  <li><code>我知道很多的道理，却依然过不好这一生</code>  这句话曾风行一时，我觉得这是乱呻吟。首先道理是要放到情境里学习的（读高中的时候我对《你的知识需要管理》应该会是无感的，但快研究生毕业、要找工作了就不同了），听懂了、记住了有毛线用；其次，道理是死、人心要活，很多事情是反复博弈的或者可以举一反三，榆木脑袋才会一生都过不好（但往往是没过完一生的年轻人喜欢说这种话，彰显个性么？不懂……）；道理没给你带来好生活，你在抱怨道理、抱怨告诉你道理的人之余，是不是还得想想自身可能存在的问题呢？</li>
</ul>

<p>我觉得写这篇文章的目的不在于告诉读者你现在应该马上行动起来不怎么做、要怎么做，只是单纯的经验和工具分享，也是我阶段性的自我总结。如果有一天当你遇到和我类似的场景与问题或受困于自身的发展瓶颈时，而你隐约记得曾经有篇文章的内容可以为你所用，我所介绍的经验和工具或许就可以帮上你的忙，<strong>最最起码你会知道，有一个家伙曾经跟你一样，你不是个案</strong>……</p>

<!-- excerpt end -->

<h2 id="section-1">你的知识问题</h2>

<p>首先要区分容易混淆的三个概念，“数据”、“信息”和“知识”。在原书作者看来：</p>

<ul>
  <li>数据：单纯的数据不表示意思，比如39；</li>
  <li>信息：赋予数据以环境，比如就诊时向医生提供信息，体温是39摄氏度；</li>
  <li>知识：<strong>经过实践证明的，可以用来决策和行动的信息</strong>，比如医生运用自己的医学知识和行医经验在我提供的体温信息的基础上判定我发烧了。</li>
</ul>

<p>下面这段是我结合书中例子自行补充的……</p>

<p><strong>根据体温判定是否发烧的知识是怎么来的呢？</strong></p>

<p>医学课本里可能会写人在不同年龄段的正常体温范围是多少。</p>

<p><strong>那第一个写课本的人是怎么知道的呢？</strong></p>

<p>可能是根据更早的医生的行医经验总结得来的。</p>

<p><strong>那没有体温计的时候是怎么判定发烧的呢？</strong></p>

<p>大概是用手心触摸额头与其他人对比。</p>

<p>我其实是想通过以上三个问题表达我对于知识积累脉络的认识：从<strong>定性知识</strong>（触摸额头）到<strong>定量知识</strong>（计量体温），从<strong>隐性知识</strong>（行医经验）到<strong>显性知识</strong>（医学课本）。</p>

<p><strong>定量是科学化、标准化的目标，显性知识有利于知识的积累与传播</strong>。</p>

<p>不过需要补充两点：</p>

<ol>
  <li>某些知识领域，定量化很难做，比如名厨的经验。厨艺知识的实践性很强，知识的获取有赖于自我摸索与师徒传承。“鸡肉500g，黄瓜丁300g，鸡精5g……”，这只是给大众看的菜谱。而且也不同于化学实验，即便同样的菜谱不同的人做味道也会不同。以“鱼香肉丝”、“宫保鸡丁”为例，似乎各有各的做法。食材的选择，火候的把握，都是要靠年头磨练的，而磨练的最终结果往往是“此中有真意，欲辨已忘言”。</li>
  <li>显性知识的建立并不是终结，而是要在分享传播中、在生产实践中与更多人的隐性知识做结合，得到这些隐性知识的印证、修正与补充。</li>
</ol>

<p>从《你的知识需要管理》一书的例子中可以看出，作者其实将定量化的知识（已成书面的理论或判据）默认为显性知识，将定性化的知识（在人们头脑中俗语或经验）默认为隐性知识，所以下面的讨论仅区分隐性知识和显性知识。</p>

<p>书中提到了隐性知识、显性知识的四种转换形式：</p>

<ul>
  <li><strong>隐性知识到显性知识</strong>
    <ul>
      <li>印堂发黑的视觉认识 到 真实测量印堂亮度并规定判定为黑的阈值；</li>
    </ul>
  </li>
  <li><strong>显性知识到隐性知识</strong>
    <ul>
      <li>阅读书籍，引发自己的思考；</li>
    </ul>
  </li>
  <li><strong>显性知识到显性知识</strong>
    <ul>
      <li>阅读书籍，引发自己的思考，并写出读书笔记；</li>
    </ul>
  </li>
  <li><strong>隐性知识到隐性知识</strong>
    <ul>
      <li>师徒相承。</li>
    </ul>
  </li>
</ul>

<p>俗话说，“社会是最好的大学，生活/工作是最好的老师”，只要是一个有心人，每天能够获得的隐性知识量还是挺大的，但是极少有人坚持做显性化的工作。有的时候我们会给自己找理由说就是懒得写，真实原因是我们的理解还不够、表达能力也不够；有的时候我们会抱怨这东西我也会呀，就是运气不好没那个命，真实原因你会不会和别人知不知道你会是两回事儿，你的知识憋着就你自己知道，还比不上粪便能憋出沼气来……</p>

<p>类似的问题不一而足，这些问题就是书中所说的“你的知识问题”。</p>

<p>本书要和我们探讨的，就是作为一个<strong>信息时代的知识工作者</strong>，我们如何能够做好以下五点：</p>

<ul>
  <li><code>知识学习</code>  学什么，学习目标的聚焦，学习资源的搜集，学习的方法，保持终身学习不落伍； </li>
  <li><code>知识保存</code>  有规划、成系统的保存，便于查询；</li>
  <li><code>知识分享</code>  让别人知道你知道；</li>
  <li><code>知识利用</code>  与项目或任务结合，申请专利，知识产品化；</li>
  <li><code>知识创新</code>  需求是创新的动力，思维导图。</li>
</ul>

<p>限于社会阅历与工作经验，自己仅在前三点有些经验和工具可以分享，后两点乏善可陈。</p>

<h2 id="section-2">知识学习</h2>

<p>本科前期，受高中学习思维的影响，自己买了大量的技术书籍阅读（常去中关村图书大厦，逛亚马逊），也曾沉溺于 <a href="http://blog.sina.com.cn/s/blog_64ac3ab10100gg4u.html">谷歌搜索的奇技淫巧</a> 。后来了解了一些 ftp 站点（比如清华大学自动化系）和 P2P 软件（比如汉魅，堪比快播啊……），再到 Corsair、MeePo，下载了不少课程资源和书籍，一度陷入了大误区（见 <a href="#section-3">知识保存</a>）。</p>

<p>目前，自己的技术学习主要依赖技术官网的 Tutorial、网络教程、博客和问答网站，从BT站点（北邮人、六维空间）下载的视频教程以及公开课（Cousera、果壳MOOC、网易公开课、腾讯大讲堂），偶尔会买觉得有收藏价值的书籍。</p>

<p>需要补充的是，对于一些好的博客站点和专业知识网站，<strong>仅仅是加入收藏夹只会让它们死在那里</strong>，最好能够获取到该网站的 RSS 订阅链接，加入到你自己的 RSS 阅读器中。大多数此类网站都是有订阅链接的，因为它们是利用现成的框架搭建的，比如 Wordpress，Flask，Jekyll (Octopress) 等。即便页面上隐藏了 RSS 图标，你也能从网页源代码里搜索出来（比如搜 rss 等关键字）。实在不行可以试一试 <code>http://yu-ming/atom.xml</code> 或者 <code>http://yu-ming/rss.xml</code> 或者 <code>http://yu-ming/feed</code> 这样的链接，也许就是该网站的订阅链接。</p>

<p>推荐一款名为 Caffeinated 的阅读器，虽然称不上完美，但阅读界面还算是可选择软件当中最赏心悦目的。</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/3.jpg" class="img-up" title="Caffeinated 界面展示"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/3.jpg" width="80%" title="Caffeinated 界面展示" /></a></p>

<p>我的初始 RSS 源来自这份 <a href="http://www.zhihu.com/question/19580096">知乎问答</a>，之后就是在浏览网页的过程中发现、补充。有人对于这种碎片化阅读模式表示担忧，认为不如系统性的学习。我觉得大家说的都有道理，就想和一把稀泥。打个比方说吧，大部头的书籍像鲜花，培育费心费力，成长不易，长成则一枝独秀；碎片化阅读像水稻、棉花，大量培养，普普通通，满足基本需求。<strong>专与博，辩不出孰优孰劣，只要选择有利于现阶段自身成长的途径就可以了</strong>。</p>

<p>我觉得由对碎片化阅读的质疑引申出的一个问题更值得我们思考，那就是<strong>你到底想要学什么</strong>？</p>

<p>《你的知识需要管理》提到，</p>

<blockquote>
  <p>学习任何领域的知识必须达到一定的深度，否则你的知识就是常识。</p>

  <p>……</p>

  <p>由于现在知识更新周期很短，知识和经验在快速贬值，今天的知识可能明天就成为常识，如果你仅仅学某领域知识的基础部分，那么这些只是无法给你带来“超级价值”和竞争优势。</p>
</blockquote>

<p>书中还引用了俞敏洪的一句话，</p>

<blockquote>
  <p>要引人敬意，就要研究一个非常专业的领域，在那个领域中，你是最顶尖的，至少是中国前10名，这样无论任何时候你都有话说，有事情可做。</p>
</blockquote>

<p>看了之后顿时觉得后脊背发凉，关于“专”自己做的还远远、远远、远远不够，由于没啥成功经验，这块儿也不多说了……</p>

<p>目前自己使用比较多的知识获取工具还有：</p>

<ul>
  <li>鲜果阅读：和 RSS 类似，只是有移动 App，更适合碎片化时间；</li>
  <li>微博：微博不提供知识，但能帮你了解到你所在领域的那拨人在关心什么，他们给出的链接相当于是筛选过的知识；</li>
  <li>小酱油：也不提供知识，但能帮你汇集身边的讲座、招聘、比赛等活动信息，告诉你你身边将要发生的知识分享。</li>
</ul>

<p>此外，我已经卸载了微博、今日头条，感觉信息质量越来越低了。在今日头条的新闻评论中，你往往能找到这么一类评论：“小便（编）你过来，我保证不打死你”。</p>

<p>最后值得一提的视频自媒体，我每周必跟的是《晓松奇谈》（原《晓说》）、《罗辑思维》和《鸿观》，都是周五更新，所以周五简直像节日。我的观看习惯是记笔记并查阅相关或延伸的资料，结合自己的历史观、价值观做一些评注。</p>

<p>积累下来的效果就是，聊天的谈资多了，还帮我回答了一道面试题。</p>

<p>在百度的一轮面试中，面试官本应面我技术，但只见他看着我的简历直摇头，叹了一口气对我说，你说我问你点儿啥好？没给我吓尿了，我说都行吧，你先问。他说，你跟我说说现在大街上的垃圾箱都有啥问题？我心想新闻里好像说 <a href="http://www.oschina.net/news/41616/in-head-hunting-big-data-may-not-be-such-a-big-deal">Google现在都不面这种题</a> 了吧，但还是列了五六点说了。他又问，要是你负责北京市所有垃圾箱的管理，你会怎么办？我心想，上周五刚看过《罗辑思维》（第二季第29期，《市场的广度》），介绍过一个德国公共厕所市场化改造的案例，直接可以拿来用啊。于是我就说可以在垃圾桶表面引入商业广告，明星示范效应 + 企业对自身形象的重视 + 商业投入与运作应该可以解决当前存在的一些问题吧。面试官听后可算不摆苦瓜脸了，他说，“看来你还挺聪明，知识面挺广”。我心说，“叫你不看《罗辑思维》，真好唬啊……”。</p>

<h2 id="section-3">知识保存</h2>

<p>知识保存就是将隐性知识或显性知识转化为显性知识的过程。</p>

<p>我猜想，在知识保存方面，人们走过的弯路是大致相同的。一开始是大量文件下载、网页收藏以及 Word 复制粘贴，之后会考虑使用云盘或者云笔记。</p>

<p>就我自身而言，除非想在博文里分享文件，否则用云盘的机会不多，都是本地存储，建立 ftp 分享给身边的人。对于云笔记，自己很早就用过 Evernote，后来出了印象笔记，但越来越发现它不能满足自己所要记录内容的复杂性、分享需求以及格式定制灵活性，就逐渐放弃了。</p>

<p><strong>拿最简单的一条来说吧</strong>，印象笔记目录结构太扁平，只是笔记本+笔记本中的笔记。如果我想专门记给我妈妈的信，我要建一个笔记本，但我又想记给我女友的信，且不想弄混，我又得建一个笔记本。目录结构是</p>

<ul>
  <li>给妈妈的信</li>
  <li>给女友的信</li>
  <li>给二叔的信</li>
  <li>给三舅的信</li>
  <li>给隔壁老王的信</li>
</ul>

<p>我需要的是可定制目录逻辑的，比如</p>

<ul>
  <li>信件保存
    <ul>
      <li>给家人的信
        <ul>
          <li>妈妈
            <ul>
              <li>历史存档</li>
              <li>2014年</li>
            </ul>
          </li>
          <li>女友</li>
        </ul>
      </li>
      <li>给亲戚的信
        <ul>
          <li>二叔</li>
          <li>三舅</li>
        </ul>
      </li>
      <li>给邻居的信
        <ul>
          <li>隔壁老王</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>如果想达到这样的目的，我只能采用在磁盘自建目录、在目录里保存文件的土办法，如此一来我得在脑子里把目录存储起来，或者专门建一个文件存储目录索引。这样一来就完全丧失了印象笔记所能提供的资源整合能力和灵活机动性！</p>

<p>直到我了解了 Markdown，用上了 Ulysses，一切都有了质的飞跃。</p>

<p>当前我正在使用 Ulysses 撰写这篇文章，截图如下。</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/4.jpg" class="img-up" title="Ulysses 界面展示"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/4.jpg" width="80%" title="Ulysses 界面展示" /></a></p>

<p>不用我多说，应该都能感觉到这种目录定制形式以及三列结构对于大规模写作有多大的好处了吧。如果说印象笔记能够做碎片积累、写文章，Ulysses完全可以写一本书好么。</p>

<p>Ulysses的其他好处在于支持丰富的导出格式，比如 PDF、Word、HTML 和电子书等，采用 Markdown 语言书写，格式与内容分离，由专门的文件指定。</p>

<p>最让我惊艳的是全屏模式，适于专心写作或者听报告的时候记笔记，如下图所示。</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/5.jpg" class="img-up" title="Ulysses 全屏界面"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/5.jpg" width="80%" title="Ulysses 全屏界面" /></a></p>

<p>总而言之，在使用 Ulysses 的这五个多月（五月份开始）里，自己的工作习惯发生了很大的变化，特别是在知识输出方便，变得积极而高效。</p>

<p>当然，Ulysses 也不是那么完美的，它的同步性不好，只支持 iCloud 和 Daedalus，所以要注意内容的及时备份，不过也省得隐私泄露了。</p>

<p>虽然我不再使用印象笔记，但并不代表这不是一款好软件，只是它跟我的需求不符，而且我也在关注印象笔记新功能的添加。我对印象笔记可以创建公共笔记本的功能很喜欢，如果将来有多人协作的需要可能会选择，当然， Tower 等团队协作工具可能做的更全面。</p>

<p>知识保存了就是用来查的，Ulysses 提供了全局查找、指定文件夹查找以及文章内查找的功能，算是对查找功能的一个全方位实现，但问题还是在使用过程中暴露出来了。我需要频繁查找分布在若干文件里的重要文字或数据，要么我得记住它们在哪个文件夹，要么我得记住查询条件。在网站架构里，这部分数据是要放到 cache 里的，那么什么工具可以成为我的 cache 呢？此时 mediawiki 出现在了我的脑海，虽然我以前一直不知道应该怎么将它嵌入我的工作里。</p>

<p>我主要将一些常用指令、数据路径以及脚本代码写到 mediawiki 当中，需要时在浏览器中拷贝即可。</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/6.jpg" class="img-up" title="mediawiki 界面展示"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/6.jpg" width="80%" title="mediawiki 界面展示" /></a></p>

<p>如果我们能将每天遇到的知识都转化文字记录那固然是好的，但事实上我们没有这样的精力。对于一些文档和大量的网页，需要有工具帮助我们保存并方便日后查找。其实我的要求也不高，就是必须可以添加标签，从个人经验来看，<strong>不加标签的资源只能成为你知识库里的垃圾</strong>。</p>

<p>对于文档，我选择 iDocument Plus，界面如下</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/7.jpg" class="img-up" title="iDocument Plus 界面展示"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/7.jpg" width="80%" title="iDocument Plus 界面展示" /></a></p>

<p>对于网页，我选择 Pocket，有好用的 Chrome Extension 和客户端，跨各类平台共享。</p>

<p>此外还有代码片段需要管理，可以使用 Gistify 或者 Dash。有 Mac 下开发经验的人应该不用我介绍 Dash 有多牛逼，记得刚出这款软件的时候内购价格18元，现在在 App Store 卖20刀。这款软件整合了 150 多种编程语言的 API，还有丰富的 Stack Overflow 问答资源的离线版本，同时支持 <a href="https://xuelangzf.github.io/10-13-2014/html2dash.html">用户定制文档</a>。</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/8.jpg" class="img-up" title="Dash 界面展示"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/8.jpg" width="80%" title="Dash 界面展示" /></a></p>

<h2 id="section-4">知识分享</h2>

<p>知识分享的重要意义，引用书中的两段话来说明。</p>

<blockquote>
  <p>不在于你认识什么人，而在于什么人认识你；不在于什么人影响了你，而在于你影响了什么人。</p>
</blockquote>

<p>还记得那位热衷于给青年人写信的导师么，还记得《XX之巅》系列丛书的作者么，他们都通过这种知识分享传播的方式在中国年轻人心目中、在业界给自己赢得了受尊敬的地位，而这是埋头苦干、成果丰硕但不善包装的学问家们所没法比拟的。当然，并不是说通过知识分享扩大影响力是一件沽名钓誉的事情，我觉得满足两点条件就还是好的：<strong>保证你肚子里有干货；保证不大量夹带私货</strong>。</p>

<blockquote>
  <p>你必须有意识地去做这些显性化的工作，必须有意识地让别人能明白你知道的道理。如果你养成了这个习惯，它会促进你更深入地探究问题的本源，提升自己对知识的掌握程度。如果养成了有意识地显性化你的知识的习惯，你就会发现自己对问题的了解越来越深入，从而摆脱了许多一知半解的状态，提高了个人的知识竞争力。</p>
</blockquote>

<p>正如我们之前说到的，你不是懒得去写，而是你根本写不出来、写不对。杨绛先生回忆钱钟书先生读书都要读多遍、记笔记，每次都有<strong>新收获</strong>，更何况我辈。听懂了、看懂了和真懂了是很不一样的，真懂了和真会用又很不一样。问问自己，看懂了别人的算法和代码，事后让你重写一遍，能否保证运行正确；看懂了别人的公式推导，事后让你重推一遍，能否保证不卡壳。从自身的经验来看，强迫自己将重要知识、复杂知识显性化并分享出来是一件很有益的工作，最起码你得担心你写错了被别人笑话吧。</p>

<p>总的来说，我认为<strong>知识分享之于普通人，类似于学术论文之于学者</strong>。</p>

<p>最后，书中提醒我们在分享的过程中要注意的一点是</p>

<blockquote>
  <p>不管面对什么样的共享对象，有一个共同的原则，那就是在知识共享中不要故意炫耀和卖弄自己的知识，要尽力用平实、通俗的语言去传递你的知识，尤其不要满口或者满篇都夹杂着外语和专业术语，从知识管理的角度看，这是一种对于知识掌握不够深入的表现，同时也会引起大部分人的反感。</p>
</blockquote>

<p>除了软件名称，这篇文章没怎么用英文……</p>

<p>我的知识分享主要通过博客，前期是 <a href="http://blog.sina.cn/frank19900731">新浪博客</a>，现在在使用 Github 上搭建的 Octopress 博客。</p>

<p>好处显而易见，博客可以保存在本地，以 Markdown 格式书写，界面自由定制，想要实现的功能都可以自行添加，比如中文搜索、输入公式、定制代码块等等。</p>

<p>Markdown 输入工具我采用的是 Byword，能够满足我这个软件外观控，以下是本文编辑界面的展示。</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/9.jpg" class="img-up" title="Byword 界面展示"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/9.jpg" width="80%" title="Byword 界面展示" /></a></p>

<p>要强调的是，<strong>搭建博客什么的都不是什么难事，最难的就是坚持写作、坚持分享</strong>，立存此照，作为督促。</p>

<p>Markdown 的优势还不止体现在这里，我们完全可以用它来写书。比如 <a href="https://github.com/jgm/pandoc">pandoc</a> ，<a href="https://github.com/marchtea/mdtogh">mdtogf</a>。这两个工具功能当然强大，定制灵活，不过还是不适合小白用户。再推荐一款 <a href="https://www.gitbook.io/">Gitbook</a>，有客户端可供使用。</p>

<p>除了写博客，知识分享的途径还有很多，比如到百度知道、知乎等综合性问答网站或者 Stack Overflow 等专业问答网站上回答问题，再比如到专业论坛中和别人讨论交流（不是帝吧那种的……）。在这个过程中，相信你的影响力、表达能力和专业水平都会有提高的。</p>

<h2 id="section-5">总结</h2>

<p>本文是在《你的知识需要管理》的启发下写成的，主要分享了自己在知识管理方面的经验教训和现阶段使用的工具。希望给大家的知识管理提供一个思路和借鉴，如果对你产生了些许实质性的帮助那我不胜荣幸。要点归纳如下：</p>

<ul>
  <li>“数据”、“信息”和“知识”有很大差别，我们要做的不仅仅是走马观花的关注信息，更要将遇到的有价值的信息、知识内化为自己的隐性知识，并在输出为显性知识的过程中加深理解，甚至有所创见；</li>
  <li>碎片化学习和系统学习并重，更重要的是明白自己要学什么，什么才是自己的核心竞争力，持续深入的挖掘下去，否则你的知识将很快变成人们的常识；</li>
  <li>知识分享的良好习惯能够督促我们进行知识显性化输出，提高专业水平、扩大影响力，让自身实力体现出应有的价值。</li>
</ul>

<h2 id="section-6">附录</h2>

<p>本文提到的部分软件的图标集合</p>

<p>知识学习</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/5.png" class="img-up" title="Caffeinated"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/5.png" width="20%" title="Caffeinated" /></a>
<a href="http://frank19900731.github.io/img/post/2014-10/17.png" class="img-up" title="小酱油"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/17.png" width="20%" title="小酱油" /></a></p>

<p>知识保存</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/7.png" class="img-up" title="Evernote"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/7.png" width="20%" title="Evernote" /></a>
<a href="http://frank19900731.github.io/img/post/2014-10/13.png" class="img-up" title="Ulysses"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/13.png" width="20%" title="Ulysses" /></a>
<a href="http://frank19900731.github.io/img/post/2014-10/16.png" class="img-up" title="MediaWiki"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/16.png" width="20%" title="MediaWiki" /></a></p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/15.png" class="img-up" title="iDocument Plus"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/15.png" width="20%" title="iDocument Plus" /></a>
<a href="http://frank19900731.github.io/img/post/2014-10/6.png" class="img-up" title="Dash"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/6.png" width="20%" title="Dash" /></a>
<a href="http://frank19900731.github.io/img/post/2014-10/10.png" class="img-up" title="Pocket"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/10.png" width="20%" title="Pocket" /></a></p>

<p>知识分享</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/4.png" class="img-up" title="Byword"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/4.png" width="20%" title="Byword" /></a>
<a href="http://frank19900731.github.io/img/post/2014-10/18.png" class="img-up" title="Octopress"><img class="imgcenter-no-shadow" src="http://frank19900731.github.io/img/post/2014-10/18.png" width="20%" title="Octopress" /></a></p>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/23/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang/">http://frank19900731.github.io/blog/2014/10/23/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记某游戏公司面试经历]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/20/ji-mou-you-xi-gong-si-mian-shi-jing-li/"/>
    <updated>2014-10-20T22:34:31+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/20/ji-mou-you-xi-gong-si-mian-shi-jing-li</id>
    <content type="html"><![CDATA[<p>本文原载笔者 <a href="http://blog.sina.com.cn/s/blog_64ac3ab10102v40l.html">新浪博客</a>，因契合 <a href="http://frank19900731.github.io/category/%E9%9D%A2%E8%AF%95%E6%B1%82%E8%81%8C/">面试求职</a> 主题，所以搬运到这里。</p>

<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">题目</a></li>
  <li><a href="#section-1">设计思路</a>    <ul>
      <li><a href="#section-2">引导画面</a></li>
      <li><a href="#section-3">关卡设计</a></li>
      <li><a href="#section-4">创新点</a></li>
      <li><a href="#section-5">关卡细部</a></li>
      <li><a href="#section-6">玩法说明</a></li>
      <li><a href="#section-7">技能设计</a></li>
    </ul>
  </li>
  <li><a href="#section-8">面试过程</a></li>
  <li><a href="#section-9">经验总结</a></li>
</ul>

<!-- excerpt start -->
<p>最终的结果是面挂了。</p>

<h2 id="section">题目</h2>

<p>现场试玩三个经典游戏（十分钟），分别是贪吃蛇、别踩白块儿、泡泡龙，选一个做改编。每人发两张卡片，一个是人物，一个是场景。我的两个图片分别是Q版拿着弓箭的小女孩和中式的建筑群。要求将两幅图片融入三个经典游戏中的一款里面，编故事设计关卡技能。</p>

<ol>
  <li>设计游戏开始时的引导画面，介绍背景之类的，并埋下伏笔，接下在游戏里自然将伏笔揭开。 </li>
  <li>将游戏改造成经典关卡模式，但不改变游戏的原始玩法，要求设计三个创新点，融入关卡中。</li>
  <li>设计人物的两个技能，设定数值并分析强弱。</li>
</ol>

<p>设计时间共20分钟。</p>

<h2 id="section-1">设计思路</h2>

<p>我选择改造的是别踩白块儿，游戏玩法大概是屏幕上有很多行从上往下滑动，每行有四列，分别是三白一黑，我们要从下到上每一行只点黑块，误点白块就GG思密达，看谁坚持的时间长。</p>

<p>Q版带弓箭的的小女孩儿，唐宋风味的楼阁让我首先想到的是唐宋时期的战争题材，主角是女性角色，想到了杨家将里的杨九妹。</p>

<p>故事时代设定在北宋，正派人物杨九妹，反派人物潘仁美、耶律大王（化名，指代辽国主帅）和萧太后。</p>

<!-- excerpt end -->

<h3 id="section-2">引导画面</h3>

<ul>
  <li>第一幕：赵匡胤黄袍加身，攻北汉将杨家将收入帐下；</li>
  <li>第二幕：雁门关血战，因奸臣潘仁美的陷害和辽兵的诡计，杨家将死战沙场；</li>
  <li>第三幕：一个破损但迎风招展的杨字大旗，表明杨家忠良尽死，杨家枪法也随之失传（伏笔一）；</li>
  <li>第四幕：潘仁美恶人先告状，抄杨业的家，一本珍贵的古琴谱或者古诗集被潘仁美据为己有（伏笔二），萧太后、耶律大王对中原虎视眈眈，意图吞并；</li>
  <li>第五幕：佘太君和众嫂嫂的带领下，杨九妹要继承父兄遗志，在内清君侧，在外保卫国家的边疆安宁。</li>
</ul>

<p>故事的结局设计：杨九妹战场屡建奇功，宋辽签订和平条约（考虑到去大汉族沙文主义），边境百年安宁，百姓安居乐业，潘仁美受到了应有的惩罚。杨九妹上马可以驰骋沙场，下马也能粗茶淡饭，脱去武装能做女红，过上了普通人的幸福生活。</p>

<h3 id="section-3">关卡设计</h3>

<ol>
  <li><code>雁门血战</code>  boss为耶律大王，击败之获得杨家枪法，开始有武略值。</li>
  <li><code>为父报仇</code>  boss为潘仁美，严惩之获得古琴谱或古诗集，开始有文韬值。</li>
  <li><code>直捣黄龙</code>  boss为萧太后，击败之获得游戏最终胜利，宋辽边境自此和平，父兄志愿得以伸张。</li>
</ol>

<h3 id="section-4">创新点</h3>

<ol>
  <li>
    <p><code>前有堵截，后有追兵</code>  杨九妹单骑闯阵，安排一队辽兵在杨九妹的后面追赶，类似于神庙逃亡，这一队辽兵不出现，只是显示距离追上九妹还有多长时间，如果追上，则关卡挑战失败。杨九妹前方还有辽军营帐，她需要射箭攻击穿越营帐。九妹以固定的速度向营帐靠近（可以认为人物固定在iPad底部不动，场景以固定速度下移），如果九妹没有及时击溃兵营而与之相遇，则扣除一定的体力，在到达boss前体力为0则挑战亦失败。</p>
  </li>
  <li>
    <p><code>诗文、歌曲挑战</code>  杨九妹在成长中要培养自己的文韬武略，武略可以通过击杀敌人获得，而文韬则需要在诗词歌赋中锻炼。九妹前方可能出现文字矩阵（类似于文字矩阵中找成语），每一行取一个字可以连成一句诗（或者一首曲子啦，如果不是字而是简谱的话），比如游戏会提示是李白《侠客行》里面的一句诗，那你在第一行踩“十”、第二行踩“步”……对应于别踩白块儿中的黑块儿，形成一句诗“十步杀一人，千里不留行”。</p>
  </li>
  <li>
    <p><code>引入罚时机制</code>  想到一般游戏中有沼泽可以拖延人物的行动时间，我想可以在游戏中引入进来，相当于别踩沼泽，跟白块儿是一个意思，如果踩入，则罚时一定时间，但不会像别踩白块儿游戏那样，你踩错了就退出了。罚时机制还可以通过人物技能（保卫萝卜中的全屏冰冻、减速）以及掉落物品（比如打死小兵有几率获得一块香蕉皮，自动扔到你后面让追兵滑到）来实现。</p>
  </li>
</ol>

<h3 id="section-5">关卡细部</h3>

<p>分三种场景，兵营场景、诗歌场景和沼泽场景。</p>

<ol>
  <li><code>兵营场景</code>  对应创新点一，人物通过击杀可获得武略值</li>
  <li><code>诗歌场景</code>  对应创新点二，人物通过击杀可获得文韬值</li>
  <li><code>沼泽场景</code>  对应创新点三</li>
</ol>

<p>这些场景可以这样组合：<code>外围兵营</code> - <code>诗歌场景</code> - <code>近卫兵营</code> - <code>沼泽场景</code> - <code>中军兵营</code> - <code>boss</code>。越靠近boss的兵营血量或抗打击能力越强。每一个场景都还是多行四列的模式。</p>

<h3 id="section-6">玩法说明</h3>

<p>攻击兵营的方法是点击营垒，杨九妹就会在屏幕底部向相应的营垒射箭。</p>

<p>诗歌和沼泽跟原游戏玩法大致相同，每行只点唯一正确的那个格子即可。</p>

<h3 id="section-7">技能设计</h3>

<ol>
  <li><code>缓兵之计</code>  文韬值积累一定程度可施放技能缓兵之计，对追兵罚时5s</li>
  <li><code>以父之名</code>  武略值积累一定程度可施放技能以父之名，父兄的魂魄帮助你在5s内清空面前一切营垒（保卫萝卜的全屏炸弹）</li>
</ol>

<p>以父之名似乎会更厉害一些，可以留着在中军兵营处使用。</p>

<p>以上是20分钟内写下的设计草稿。</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/1.jpeg" class="img-up" title="设计图一"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/1.jpeg" width="80%" title="设计图一" /></a></p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/2.jpeg" class="img-up" title="设计图二"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/2.jpeg" width="80%" title="设计图二" /></a></p>

<h2 id="section-8">面试过程</h2>

<p>展示使用黑板板书，对设计进行了详细介绍。</p>

<p>被问到的问题：</p>

<ol>
  <li>小兵的攻击范围是多少，血量怎么设计？</li>
  <li>人物可以左右移动么？人物射箭可以穿透兵营还是遇到兵营就停止？人物的射箭频率如何？</li>
  <li>记不清了……</li>
</ol>

<p>具体怎么回答的就不说了，大概的思路是设定一个通关率或者掉血率，然后经游戏志愿者实测调整而成，诸如此类。</p>

<h2 id="section-9">经验总结</h2>

<ol>
  <li>故事大框说说就好，更重要的可能是那些细节问题，比如人物的箭是否可以射穿了之类的，你没说但是被问到了，就说明你没有思考这些，你的策划方案就是有问题的。</li>
  <li>不同面试官风格也是不一样的，第一条经验也可能不对。</li>
</ol>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/20/ji-mou-you-xi-gong-si-mian-shi-jing-li/">http://frank19900731.github.io/blog/2014/10/20/ji-mou-you-xi-gong-si-mian-shi-jing-li/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IDG 联合招聘笔试回忆]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/19/idg-lian-he-zhao-pin-bi-shi-hui-yi/"/>
    <updated>2014-10-19T21:53:07+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/19/idg-lian-he-zhao-pin-bi-shi-hui-yi</id>
    <content type="html"><![CDATA[<!-- excerpt start -->

<p>IDG 投资的公司有脸萌、蘑菇街、果壳网等，详见此<a href="http://campus.idgvc.ourats.com/about-us/companys">链接</a>。对于这些小规模创业公司自己还是挺感兴趣的，参加联合招聘也很省事，笔试题目（B卷）回忆如下。</p>

<h2 id="section">选择题</h2>

<ol>
  <li>三个汽水瓶可以换一瓶汽水，要让28人都喝一瓶，买几瓶水？    答： 19瓶。</li>
  <li>50人中有两人生日相同的概率是多少？    答：0.97（注意是选择题，不是当场算的……）。</li>
  <li>1000人，三场演出，分别有500，350，250人观看，400人至少看两场，100人看三场，问多少人一场没看？    答：400人。</li>
  <li>逻辑判断，条件一：<code>x or y</code>；条件二：<code>not y or not z</code>；条件三：<code>非z 则 非y</code>，可以肯定的是哪项？    答：x 为 true。假设 非x，则 y，则 非z，则 非y，矛盾。</li>
  <li>安卓属于那种系统？    答：软实时系统 。</li>
  <li>分布式系统 与 网络系统 的区别？    答：协调多个机器完成同一任务。</li>
  <li>位示图的作用？    答：管理磁盘空间。</li>
  <li>6 个方块排一排，用三种颜色涂刷，要求相邻方块不同色且三种颜色都用上，有几种涂法？    答：90种。<code>3 * 2^5 - 3*2</code></li>
  <li>二叉树，第五层最多有多少个节点？（根节点是第一层）   答：16。</li>
  <li>红球、黑球、白球共60个，摸了一阵，统计红球大约15%，黑球大约45%，问有多少个白球？    答：16。</li>
  <li>253的16进制和二进制表示？    答：0xFD，11111101</li>
  <li>ABCDE，不可能的出栈顺序？</li>
  <li>快速排序，第一次运行后的结果是？</li>
  <li>程序题，问 c 的输出是多少？    答：-1。</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>程序题</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="k">do</span> <span class="p">{</span>
</span><span class="line">    <span class="o">--</span><span class="n">c</span><span class="p">;</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>还有一道想不起来了……</p>

<h2 id="section-1">综合题</h2>

<ol>
  <li>链表每隔K个翻转，要求常数空间存储，代码实现。比如 <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</code>，k=2 变成  <code>2-&gt;1-&gt;4-&gt;3-&gt;6-&gt;5</code>，k=3 变成  <code>3-&gt;2-&gt;1-&gt;6-&gt;5-&gt;4</code>。</li>
  <li>M X N方格，从 (0,0) 走到 (M,N) 有多少种走法记为L，如果 M、N 很大那么 L 这个数也是很大的，设计算法计算 L % 13。</li>
</ol>

<h2 id="section-2">总结</h2>

<p>一开始 IDG 说将由很牛的 ACM 选手出题，心里挺忐忑，现场做题才发现不是这样。虽然题目不难，不过限时 1 小时，自己只是将将做完。</p>

<!-- excerpt end -->

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/19/idg-lian-he-zhao-pin-bi-shi-hui-yi/">http://frank19900731.github.io/blog/2014/10/19/idg-lian-he-zhao-pin-bi-shi-hui-yi/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[飞维美地笔试回忆]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/"/>
    <updated>2014-10-18T22:29:30+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">简介</a></li>
  <li><a href="#section-1">题目</a>    <ul>
      <li><a href="#linux">Linux题</a></li>
      <li><a href="#sql">SQL</a></li>
      <li><a href="#section-2">逻辑题</a></li>
      <li><a href="#section-3">读程序题</a></li>
      <li><a href="#section-4">写程序题</a></li>
      <li><a href="#section-5">网络题</a></li>
      <li><a href="#section-6">算法题</a></li>
      <li><a href="#section-7">广告算法</a></li>
      <li><a href="#section-8">吞吐量预测</a></li>
    </ul>
  </li>
  <li><a href="#section-9">总结</a></li>
</ul>

<!-- excerpt start -->

<p>这是面试、笔试总结的第一篇，其余会陆续更新直至十一月末，欢迎持续关注 <a href="http://frank19900731.github.io/category/%E9%9D%A2%E8%AF%95%E6%B1%82%E8%81%8C/">面试求职</a> 分类。</p>

<h2 id="section">简介</h2>
<p><a href="http://baike.baidu.com/view/5038799.htm?fr=aladdin">飞维美地</a> 这家公司是校招季才了解的一家公司，隶属 Comcast， 提供互联网视频广告投放、监测、预测、增值等关键解决方案，业务在欧美。公司主体在中国，纽约也有分部，恰可以提供 24 小时不间断服务。据称北京公司有120人，目标扩增至240人。</p>

<p>之前和靳导在东主楼参加了他们的算法分享会，干货多，实在。宣讲会上，进一步了解了公司的培训发展体系，感觉像一个小型大学，学习与成长的氛围都不错的样子，比较适合想在毕业后打好技术基础的同学，当然也能锻炼英语。不过作为在中国没有业务的小型外企，估计是没有北京户口吧。</p>

<p>书归正传，说题。据说这些题是公司员工近一个月想出来的，挺用心思的。共九类题，120分钟时间，可以全做，也可以挑选自己擅长的发挥。</p>

<!-- excerpt end -->

<h2 id="section-1">题目</h2>

<h3 id="linux">Linux题</h3>

<ol>
  <li>如何查看已使用的内存和剩余内存？</li>
  <li>如何查看所有进程，如何按照内存占比排序？</li>
  <li>给出 <code>ls -l</code> 的结果，写出文件类型和权限代码。</li>
  <li>子网 IP 为 192.168.10.0，子网掩码为 255.255.255.192，问子网格数和每个子网主机 IP 数？</li>
  <li>解释 DNS 的作用，举例说明 CNAME 的应用场景。</li>
</ol>

<h3 id="sql">SQL</h3>

<ul>
  <li>具体题目不描述了，反正是可以用 left + join 和 嵌套查询解决的问题。</li>
</ul>

<h3 id="section-2">逻辑题</h3>
<ul>
  <li>给定一种运算 NOTAND 及其真值表，让你仅用 NOTAND 表示 
    <ul>
      <li>OR（真值表给出）;</li>
      <li>命题（真值表给出）。</li>
    </ul>
  </li>
</ul>

<h3 id="section-3">读程序题</h3>
<ul>
  <li>GO 语言书写的二分查找，如果找到返回 Index，未找到返回 -1；现让你修改一行，使得如果找到返回 Index，未找到则返回小于待查找数的最大的数的 Index，如果还是没有，返回 -1。</li>
</ul>

<h3 id="section-4">写程序题</h3>
<ul>
  <li>给出一些函数及解释（pthread_mutex_lock， pthread_mutex_unlock， pthread_cond_wait， pthread_cond_signal， pthread_cond_broadcast），让你实现一个线程安全队列类中的 6 个函数（构造函数、析构函数、enqueue、dequeue、size、destroy，这里 destroy 的作用是清空队列 + 清空插入等待和读取等待）。</li>
</ul>

<h3 id="section-5">网络题</h3>
<ol>
  <li>页面由 A 重定向到 B，站点接受要访问 A 的请求，返回的代码是 302 还是 301，HEAD 头里 B 对应的属性是 Location 还是 Referral。 </li>
  <li>跨站脚本攻击相关</li>
  <li>忘了……</li>
</ol>

<h3 id="section-6">算法题</h3>
<ul>
  <li>如果可以在多项式时间内解决判断正整数集合内是否存在和相等的两个子集（互为补集）的问题并给出一组解，请问如何设计高效算法解决判断正整数集合内是否存在一个子集的和等于指定值这一问题并给出一组解？</li>
</ul>

<h3 id="section-7">广告算法</h3>
<ul>
  <li>已有按照优先级排列的广告，要处理广告请求。一个广告请求包含若干个指定时长的广告中断，约束条件有
    <ul>
      <li>有些广告对儿不能出现在同一个广告请求中；</li>
      <li>有些广告对儿不能出现在同一个广告中断中；</li>
      <li>广告中断中的广告时间总和不超过广告中断时长；</li>
    </ul>

    <p>请设计Advertisement、Request、Break类，实现这一算法。</p>
  </li>
</ul>

<h3 id="section-8">吞吐量预测</h3>
<ul>
  <li>给出网络带宽，读写速度，文件大小，压缩比，单条记录的长度，单服务器处理速度等数据，以及日志的处理方法，
    <ul>
      <li>要求估算单台机器处理500G 日志需要多长时间。</li>
      <li>现在想要实时处理日志，5分钟处理之前15分钟的，估计需要多少台机器。</li>
    </ul>
  </li>
</ul>

<p>这道题大致是这个意思吧，当时都给我整晕了，大概算了算，肯定不完善。</p>

<h2 id="section-9">总结</h2>

<p>题型比较广泛，不太需要 ACM 等相关技能，主要看分析思考的能力。当然，对于一些固定知识点的考察（比如网络相关的），也着实让我觉得有必要在考后夯实一下基础。<strong>基础还是记在脑子里比较好，不要太依赖搜索引擎。</strong></p>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/">http://frank19900731.github.io/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yosemite 升级及后续]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/18/yosemite-sheng-ji-ji-hou-xu/"/>
    <updated>2014-10-18T22:11:48+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/18/yosemite-sheng-ji-ji-hou-xu</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#yosemite-">Yosemite 安装</a></li>
  <li><a href="#homebrew--java">Homebrew &amp; Java</a>    <ul>
      <li><a href="#homebrew">Homebrew</a></li>
      <li><a href="#java">Java</a></li>
    </ul>
  </li>
  <li><a href="#section">常用软件恢复</a>    <ul>
      <li><a href="#chronories">Chronories</a></li>
      <li><a href="#trim-enabler">Trim Enabler</a></li>
      <li><a href="#matlab">Matlab</a></li>
      <li><a href="#vmware">VMWare</a></li>
      <li><a href="#textexpander">TextExpander</a></li>
      <li><a href="#totalfinder">Totalfinder</a></li>
      <li><a href="#bartender">Bartender</a></li>
      <li><a href="#os-x-server">OS X Server</a></li>
      <li><a href="#mysql">MySQL</a></li>
    </ul>
  </li>
  <li><a href="#section-1">总结</a></li>
</ul>

<!-- excerpt start -->

<h2 id="yosemite-">Yosemite 安装</h2>

<p>10月17日一早醒来就迫不及待的找更新，发现六维空间有人上传了一个5.19G大小的安装文件，就开始下载。当下载进度到了99%的时候卡死了，暂停重启或者删除文件重来都不管用。正当饥渴难耐，在北邮人上发现了一个4G多的安装文件，也顾不得大小的差异（想想真是胆大呀，后来知道是后者经过了压缩），顺利下载下来。</p>

<p>由于更新心切，所以没有按照规范先进行 Time Machine 的备份，直接双击、接受条款并重启。因为暑假里刚刚换成 1T 的SSD，所以对于更新安装时间自己还是很乐观的，但很不幸的是自己 <strong>玩儿屁玩儿出屎了</strong>。</p>

<blockquote>
  <p>About one minute remaing</p>
</blockquote>

<p>就这么一句话我足足看了两个小时，越看心越慌。给苹果客服打了若干次电话，比如问一下一般更新时间要多长，如果卡死可不可以中途强按电源键重启，能否通过外接硬盘安装更新等……得到的回答大概是“应该可以”、“没有资料表明可以这么做”。这样的“建议”对于眼前这台进不能10.10、退不能10.9.5的电脑来说，都太苍白了……如果真的如客服所说只能重装系统的话，就得损失最近两天的（自己的习惯是一周一备份）笔记和代码了，心有不甘啊！</p>

<p>网上查询的结果是，苹果重新定义了最后一分钟，那咱就等吧。电脑撂在寝室，去参加<a href="http://frank19900731.github.io/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/">飞维美地的笔试</a>。笔试结束后打开手机看到一个弹出对话框显示“您的Apple ID在另一台Mac设备上登录……”，百感交集，这就算是成了。</p>

<p><strong>强烈建议在升级系统之前做Time Machine的备份，比如16日晚上保持开机做备份，第二天直接更新，别老整那些悬不楞登的。</strong></p>

<!-- excerpt end -->

<h2 id="homebrew--java">Homebrew &amp; Java</h2>

<p>之前看到有人吐槽过 ruby 版本升级和 java 被阉割，所以还算有准备。按照收藏的<a href="http://chijianqiang.baijia.baidu.com/article/32621">这篇文章</a>里的方法操作。</p>

<h3 id="homebrew">Homebrew</h3>

<p>因为 ruby 版本变了，<code>cd `brew --prefix`</code> 和 <code>brew prune</code> 都会报 <code>bad interpreter</code> 错误，所以我对文中的脚本运行顺序进行了微调。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>更新 Homebrew </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /usr/local/
</span><span class="line">mv Cellar Cellar_back
</span><span class="line">rm -r <span class="sb">`</span>git ls-files<span class="sb">`</span>
</span><span class="line">rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributions
</span><span class="line">rm -rf .git
</span><span class="line">rm -rf ~/Library/Caches/Homebrew
</span><span class="line">ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span>
</span><span class="line">brew prune
</span><span class="line">brew update
</span><span class="line">mv Cellar_back Cellar
</span><span class="line">brew update
</span><span class="line">brew upgrade
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这当中注意观察输出，及时处理 <code>brew link XXX</code> 和文件夹权限等问题。upgrade 的过程中，会自动下载与 Yosemite （写在URL里头呢）匹配的包编译安装。耐心等待一段时间，Homebrew 就又满血复活了。</p>

<h3 id="java">Java</h3>

<p>按照文中介绍的方法，到苹果官网下载 <a href="http://support.apple.com/kb/DL1572?viewlocale=en_US&amp;locale=en_US">Java 6 安装包</a>，如果想要 Java 7 及以上，到 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle 官网</a>，但 Java 6 只能用苹果官网上的。</p>

<p>建议还是装个 Java 6，安装位置和此前 OS X 版本相同（/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home），像 <code>JAVA_HOME</code> 这种环境变量就正好不用改了。而且对于之后要安装的 Matlab 也够用了。</p>

<h2 id="section">常用软件恢复</h2>

<p>软件的重要程度还是有区分的，像有道词典打不开就打不开吧，可以上网查单词，但有一些软件可是命根子，用不了就抓心挠肺的，大致总结如下。</p>

<h3 id="chronories">Chronories</h3>

<p>日记软件，应该已经停止维护，不指望出 Yosemite 适配版本了。软件本身还是可以用的，只是菜单栏的按钮有点问题。10.10 的菜单按钮默认点击时变蓝/灰（System Preferences -&gt; General -&gt; Appearance），取消点击变回正常透明色。Chronories 的问题在于</p>

<ul>
  <li>点击变色，取消点击变不回去；</li>
  <li>心情选项图片无法显示。</li>
</ul>

<p>然而由于软件自身功能过于强大，可以记录很多小秘密，还是舍不得抛弃，那么取消菜单栏显示就能解决么？非也。</p>

<p>只有当菜单栏图标出现的时候，软件才会在后台工作（ChronoriesAgent），自动搜集邮件、RSS、软件使用率等信息做统计（舍不得的重要原因），那唯一可行的方法就是：保持菜单栏按钮的存在，但死也不点（始终是透明色，颜色一致强迫症），想写日志直接打开软件。</p>

<h3 id="trim-enabler">Trim Enabler</h3>

<p>每次更新系统默认 Trim 支持都会关闭，手动打开并重启机器即可。</p>

<h3 id="matlab">Matlab</h3>

<p>北邮人有 Matlab UNIX/MACOS 2014a 下载。</p>

<h3 id="vmware">VMWare</h3>

<p>5.x 版本已被拒绝运行了，还是到北邮人下载 7.x 版本，有码才幸福。</p>

<h3 id="textexpander">TextExpander</h3>

<p>包括本软件在内的一些软件（比如 FocusMask ）需要重新开启 Accessibility 权限。</p>

<h3 id="totalfinder">Totalfinder</h3>

<p>Yosemite 修改了 Codesign 机制，导致大批算号器、注册机无法启动。如果只是算号倒还好，再准备一台机器（或者虚拟机）就行，就怕让你指定软件位置或者模块位置来打 Patch。部分解决方案是用网上提供的 10.9.4 或 10.9.5 中的 <code>codesign</code> 替换 <code>/usr/bin/codesign</code> 。</p>

<h3 id="bartender">Bartender</h3>

<p>更换 codesign 神马的在这里不好用了。尝试从命令行启动，得到的错误是 <code>exited; Killed: 9</code>，到处查得不到解释。最后，花了一百软妹币的学费终于搞明白了，启动方法见下图，CMD + I。</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/19.png" class="img-up" title="Bartender 算号器用法"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/19.png" width="40%" title="Bartender 算号器用法" /></a></p>

<p>感叹一句，经验就是财富啊！</p>

<p>此外，使用时会发现菜单栏按钮错乱的问题，可以使用 CMD + 拖拽的方式移动。</p>

<h3 id="os-x-server">OS X Server</h3>

<p>4.0 正式版无法启动，报错与 Bartender 中说的相同，改用早一些的 4.0 DP 版本就可以了，功能正常。好歹先把我的 mediawiki 给救活，以后伺机升级吧。</p>

<h3 id="mysql">MySQL</h3>

<p>MySQL 无法开机启动，尽管在 System Preference 中可以勾选。在网上看到如果是在 Yosemite 上新装 MySQL，如果勾选安装 Startup 组件，会导致安装失败。解决方法传送门<a href="http://my.oschina.net/huyuaning/blog/334584">在此</a>。</p>

<h2 id="section-1">总结</h2>

<ul>
  <li>无论做任何改动，数据安全最重要；</li>
  <li>欲速则不达，不要着急咬第一口，兴许咬到的是包装盒呢，看清情况、做好计划再行动。</li>
</ul>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/18/yosemite-sheng-ji-ji-hou-xu/">http://frank19900731.github.io/blog/2014/10/18/yosemite-sheng-ji-ji-hou-xu/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 改造记录]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/16/octopress-gai-zao-ji-lu/"/>
    <updated>2014-10-16T20:45:34+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/16/octopress-gai-zao-ji-lu</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">网上资源</a></li>
  <li><a href="#section-1">特色工作</a>    <ul>
      <li><a href="#section-2">支持中文搜索</a></li>
      <li><a href="#section-3">移动版阅读优化</a></li>
      <li><a href="#section-4">其它</a></li>
    </ul>
  </li>
</ul>

<!-- excerpt start -->

<p>Octopress 安装不是难事，后期定制可真是慢功夫。以下分两部分介绍自己的定制过程，前一部分是网上资源，后一部分是自己的一点特色工作。</p>

<h2 id="section">网上资源</h2>
<ul>
  <li><a href="http://wangmuy.github.io/blog/2013/09-01-octopress-setup.html">安装方法、lunr.js 搜索、社交分享</a></li>
  <li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">页面主题选择</a></li>
  <li><a href="http://xoyo.name/2012/04/auto-spacing-for-octopress/">中英文加空格</a></li>
  <li><a href="http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html">链接在新标签页中打开</a></li>
  <li><a href="http://www.qq.com/404/">公益404页面</a></li>
  <li><a href="http://www.douban.com/service/badgemakerjs">豆瓣收藏秀</a></li>
  <li><a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/">添加标签云</a></li>
  <li><a href="http://octopress.org/docs/blogging/code/">插入代码块</a></li>
  <li><a href="http://cn.soulmachine.me/blog/20130402/">启用 MathJax、Kramdown 替换、嵌入多说评论</a></li>
  <li><a href="http://codemacro.com/2012/07/26/post-footer-plugin-for-octopress/">加入文章版权</a></li>
  <li><a href="http://blog.csdn.net/lcliliil/article/details/13727927">SEO 优化</a></li>
  <li><a href="https://github.com/frank19900731/frank19900731.github.io/tree/source/plugins">Archive分页、Category分页、Tag分页等插件</a></li>
</ul>

<!-- excerpt end -->

<h2 id="section-1">特色工作</h2>

<h3 id="section-2">支持中文搜索</h3>

<p>lunr.js 功能强大，但不支持中文搜索。其实原因在于没有使用中文分词器，只要对生成的 search.json 文件进行分词即可。用 Java 写了一个 <a href="https://github.com/frank19900731/lunr-Chinese">小工具</a>，主要做法是</p>

<ul>
  <li>读取 search.json</li>
  <li>对中文内容进行分词</li>
  <li>内容写回到 search.json</li>
</ul>

<p>用法参见这个 <a href="https://github.com/frank19900731/frank19900731.github.io/blob/source/lunr-parse.sh">脚本</a>，大家可以右上角搜索一下试试。这种方式的问题在于分词分不出就搜索不出来。比如“蛋疼”，也许就查不到，不过这个小工具支持字典扩展。</p>

<h3 id="section-3">移动版阅读优化</h3>
<p>想要推广博客，SEO 是一方面，利用社交媒体的分享能力也很关键，但尴尬的是很多主题对移动端支持不够好，需要重新定制 layout。本博客的移动访问入口 <a href="http://frank19900731.github.io/wx/archives/">在此</a>，供参考。另，CNZZ 的跟踪实时性更好，我的博客是 Google Analytics 和 CNZZ 并用的。 </p>

<h3 id="section-4">其它</h3>

<ul>
  <li>使用 <a href="http://fancyapps.com/fancybox/">FancyBox</a> 优化图片显示</li>
  <li><a href="https://github.com/frank19900731/frank19900731.github.io/blob/source/plugins/image_tag.rb">改造 img 标签</a>，使可以使用相对宽度（这样一来PC端和移动端的图片设置就一样了）</li>
  <li><a href="http://www.shejidaren.com/use-css3-to-create-a-beautiful-comment-ui.html">定制多说评论显示</a></li>
  <li>窗口右侧添加临时目录</li>
</ul>

<p><a href="http://frank19900731.github.io/img/post/2014-10/10.jpg" class="img-up" title="临时目录"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/10.jpg" width="80%" title="临时目录" /></a></p>

<ul>
  <li>使用 dlmenu 整合访问入口</li>
</ul>

<p><a href="http://frank19900731.github.io/img/post/2014-10/11.jpg" class="img-up" title="dlmenu"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/11.jpg" width="35%" title="dlmenu" /></a></p>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/16/octopress-gai-zao-ji-lu/">http://frank19900731.github.io/blog/2014/10/16/octopress-gai-zao-ji-lu/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[提高效率与情趣的九种程序工具推荐]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/16/ti-gao-xiao-lu-yu-qing-qu-de-jiu-chong-cheng-xu-gong-ju-tui-jian/"/>
    <updated>2014-10-16T17:28:06+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/16/ti-gao-xiao-lu-yu-qing-qu-de-jiu-chong-cheng-xu-gong-ju-tui-jian</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">选题目的</a></li>
  <li><a href="#section-1">介绍角度</a></li>
  <li><a href="#section-2">代码开发篇</a>    <ul>
      <li><a href="#section-3">引言</a></li>
      <li><a href="#git">Git</a></li>
      <li><a href="#shell-script">Shell Script</a></li>
    </ul>
  </li>
  <li><a href="#section-4">文档整理篇</a>    <ul>
      <li><a href="#section-5">引言</a></li>
      <li><a href="#markdown">Markdown</a></li>
      <li><a href="#octopress">Octopress</a></li>
      <li><a href="#knitr">knitr</a></li>
    </ul>
  </li>
  <li><a href="#section-6">自我展示篇</a>    <ul>
      <li><a href="#tpp2">tpp</a></li>
      <li><a href="#jmpressjs">jmpress.js</a></li>
    </ul>
  </li>
  <li><a href="#section-7">数据展示篇</a>    <ul>
      <li><a href="#shiny">Shiny</a></li>
      <li><a href="#d3">D3</a></li>
    </ul>
  </li>
  <li><a href="#section-8">其它工具</a></li>
  <li><a href="#section-9">总结</a></li>
</ul>

<!-- excerpt start -->
<p>自己平时爱鼓捣些工程上的小玩意儿，在一次实验室的Paper Reading上给大家分享了自己的一点体会，给大家推荐了几款能够提高工作效率与生活情趣的工具，整理于此。</p>

<p>想了解更多有趣的工具，请持续关注 <a href="http://frank19900731.github.io/category/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/">工作效率</a> 分类。</p>

<h2 id="section">选题目的</h2>

<ul>
  <li>把自己知道的，用过的，感觉有意思或有用的分享给大家，实现自己的知识梳理与输出</li>
  <li>让大家在遇到类似应用场景的时候知道有某种工具是很适用的</li>
  <li>督促大家掌握某种工具（比如 git，shell，markdown ），进而提升工作效率，也可以以工具为杠杆撬动更多的资源</li>
</ul>

<h2 id="section-1">介绍角度</h2>
<ul>
  <li>类型</li>
  <li>星级评定（1星-5星）
    <ul>
      <li>入门难度</li>
      <li>实用性</li>
      <li>装X效果</li>
    </ul>
  </li>
  <li>描述</li>
  <li>适用场合</li>
  <li>实例说明</li>
  <li>参考资料</li>
</ul>

<!-- excerpt end -->

<h2 id="section-2">代码开发篇</h2>

<h3 id="section-3">引言</h3>
<p>摘自<a href="http://www.oschina.net/question/817257_112066">《程序员装逼指南》</a></p>

<blockquote><p>千万不要说自己是做Java或者.Net的，一下子就屌丝了。</p><p>PHP也不行，Python稍微有点烂大街，但还是明显要强过前几个。</p><p>剩下的可以说自己是做Ruby的，但不要做Rails，说Sinatra。</p><p>Go、Erlang、Clojure、Scala能给80分，你要是说会个Lisp就是85分，Haskell直接捅到90分，但是千万注意，一定要说只是精通Haskell，没事喜欢研究Haskell，千万不要说干这个的。</p><p>最后再拽出来一个Prolog就成仙了。</p><p>如果怕被继续追问就说自己做C++的，就是放了个大烟雾弹，让对面也猜不透究竟有几斤几两。</p><p>C是什么？不知道。</p></blockquote>

<p>以上顺序列举的编程语言（C、C++除外）学习难度增大，对逻辑思维能力要求提升，代码实现向人的思维靠拢。</p>

<p>TIOBE程序语言排行榜<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，2014年5月最新统计（括号内前一数值为排名，后一数值为占比）：</p>

<p>Java（2，16.907%）</p>

<p>.Net（C# 6，3.745%，VB.NET 11，1.264%，F# 13，1.030%）</p>

<p>PHP（7，3.386%） Python（8，3.057%）</p>

<p>Ruby（12，1.242%）</p>

<p>Go（31，0.423%） Erlang（47，0.236%） Clojure（65, -） Scala（35，0.331）</p>

<p>Lisp（16，0.967）</p>

<p>Haskell（40，0.281%）</p>

<p>Prolog（45，0.252%）</p>

<p>C++ （4，5.986%）</p>

<p>C （1，16.926%）</p>

<p>以上结果与《程序员装逼指南》中对编程语言的逼格划定大致接近。</p>

<p>至于C、C++，个人感觉，它们向来是程序员入门语言，使用的人也很多，但真正驾驭它们还是很难的。有兴趣请移步欣赏 <a href="http://v.youku.com/v_show/id_XNzEyMDU2NDYw.html">猿泡沫</a></p>

<p>更多有关程序语言的种类与它们之间的程序关联请见 <a href="http://exploringdata.github.io/vis/programming-languages-influence-network/">编程语言关系图</a>，这是一件优美的数据可视化作品，托管于Github。</p>

<p><a href="http://frank19900731.github.io/img/post/2014-10/1.png" class="img-up" title="程序语言关系图"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/1.png" width="80%" title="程序语言关系图" /></a></p>

<p>扯远了，举例说明与人类语言、思维相近的编程语言：</p>

<ul>
  <li>Haskell</li>
</ul>

<p>Haskell号称“证明即程序，命题为类型”。</p>

<p>以下代码中，<code>[a | a &lt;- xs, a &lt;= x]</code> 是集合语言，<code>smallerSorted ++ [x] ++ biggerSorted</code> 蕴含了递归。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Haskell 快速排序</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">quicksort</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Ord</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">quicksort</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line"><span class="nf">quicksort</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">smallerSorted</span> <span class="ow">=</span> <span class="n">quicksort</span> <span class="p">[</span><span class="n">a</span> <span class="o">|</span> <span class="n">a</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="p">,</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">]</span>
</span><span class="line">      <span class="n">biggerSorted</span> <span class="ow">=</span> <span class="n">quicksort</span> <span class="p">[</span><span class="n">a</span> <span class="o">|</span> <span class="n">a</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="p">,</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">]</span>
</span><span class="line">  <span class="kr">in</span> <span class="n">smallerSorted</span> <span class="o">++</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">++</span> <span class="n">biggerSorted</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Prolog</li>
</ul>

<p>人工智能中的演绎推理，谓词逻辑。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Prolog 示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="prolog"><span class="line"><span class="nf">human</span><span class="p">(</span><span class="s-Atom">kate</span><span class="p">).</span>
</span><span class="line"><span class="nf">human</span><span class="p">(</span><span class="s-Atom">bill</span><span class="p">).</span>
</span><span class="line"><span class="nf">likes</span><span class="p">(</span><span class="s-Atom">kate</span><span class="p">,</span><span class="s-Atom">bill</span><span class="p">).</span>
</span><span class="line"><span class="nf">friend</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span><span class="nv">Y</span><span class="p">):-</span><span class="nf">likes</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span><span class="nv">Y</span><span class="p">),</span><span class="nf">likes</span><span class="p">(</span><span class="nv">Y</span><span class="p">,</span><span class="nv">X</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>引言讲了这么多，意义何在？</strong></p>

<ul>
  <li>茶余饭后的谈资；</li>
  <li>程序语言的设计也是一门很深的学问，流行的语言有自身的优势，小众的语言也有不俗的理念，多一些了解有助于我们认清程序语言——我们每天打交道的日常工具——的本质属性；</li>
  <li>程序语言是开源世界的钥匙。</li>
</ul>

<h3 id="git">Git</h3>

<p><strong>类型</strong>  ——  版本控制</p>

<p><strong>入门难度</strong>  ——  ★✩✩✩✩</p>

<p><strong>实用性</strong>  ——  ★★★★★</p>

<p><strong>装X效果</strong>  ——  ★★✩✩✩</p>

<p><strong>描述</strong></p>

<ul>
  <li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000">Git诞生的故事</a></li>
  <li>集中式（SVN为代表） vs 分布式（Git为代表）</li>
  <li>SVN与Git的区别与优劣争论有很多，不予详述，但Github着实具有很强的吸引力</li>
  <li>Github Education
    <ul>
      <li>Private空间免费使用</li>
      <li>教学使用
        <ul>
          <li>收发作业的平台</li>
          <li>自动测试</li>
        </ul>
      </li>
      <li>申请方式
        <ul>
          <li>个人名义：需要学校邮箱，立即审核通过，5个private项目</li>
          <li>组织名义：一周审批时间，可能不通过……</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Github 提供免费空间建站，如本站
    <ul>
      <li>稳定性强，小网站不太担心流量冲击</li>
    </ul>
  </li>
  <li>在自己的linux系统上搭建git服务器（gitosis），并安装Gitweb提供外部访问
    <ul>
      <li>适合小团队内部使用，比如实验室，但要注意备份！</li>
      <li>项目访问权限可控，网页上项目可见性可控</li>
    </ul>
  </li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>代码分享</li>
  <li>合作开发
    <ul>
      <li>版本控制</li>
      <li>冲突合并</li>
      <li>新功能添加</li>
      <li>Bug查找</li>
    </ul>
  </li>
</ul>

<p>详见参考资料中的实用教程。</p>

<p><strong>实例说明</strong></p>

<p>Github建站实例：<a href="http://gabrielecirulli.github.io/2048/">2048游戏</a></p>

<p>Gitweb实例：<a href="https://git-wip-us.apache.org/repos/asf?p=spark.git;a=summary">Spark</a></p>

<p><strong>参考资料</strong></p>

<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git实用教程</a></p>

<p><a href="http://wiki.ubuntu.org.cn/index.php?title=Git%E6%9C%8D%E5%8A%A1%E5%99%A8Gitosis%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE&amp;variant=zh-hans">Git服务器配置</a></p>

<h3 id="shell-script">Shell Script</h3>

<p><strong>类型</strong>  ——  文本处理，系统设置</p>

<p><strong>入门难度</strong>  ——  ★★✩✩✩</p>

<p><strong>实用性</strong>  ——  ★★★★★</p>

<p><strong>装X效果</strong>  ——  ★★★★✩</p>

<p><strong>描述</strong></p>

<ul>
  <li>Shell：操作系统中，提供访问内核所提供之服务的程序，比如终端（Terminal）。</li>
  <li>Bourne Again Shell (bash)
    <ul>
      <li>bash是GNU计划的一部分，用于基于GNU的系统如Linux。大多数的Linux都以bash作为缺省的shell。</li>
    </ul>
  </li>
  <li>Shell Scripts 书写与matlab脚本类似，使用变量、逻辑控制、linux命令等完成较为底层的操作
    <ul>
      <li>环境变量设置，如在hadoop设置中的运用</li>
      <li>文本处理，如网站log分析、天猫大赛数据处理</li>
      <li>复杂功能的集成与自动运行，如下文中tunet自动登录脚本</li>
    </ul>
  </li>
  <li>文本处理 awk/gawk sed</li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>文本数据（特别是有规范格式的）处理</li>
  <li>重复性劳动</li>
</ul>

<p><strong>实例说明</strong></p>

<p>tunet登录脚本（摘自网络），实测可用：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>tunet 登录脚本 </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="c"># your info&#39;s username</span>
</span><span class="line"><span class="nv">uname</span><span class="o">=</span>your account name
</span><span class="line"><span class="c"># your info&#39;s password&#39;s md5sum</span>
</span><span class="line"><span class="nv">pass</span><span class="o">=</span>md5sum of your password
</span><span class="line"><span class="c">####################################################</span>
</span><span class="line">do_login<span class="o">()</span> <span class="o">{</span>
</span><span class="line"><span class="nv">login_data</span><span class="o">=</span><span class="s1">&#39;username=&#39;</span><span class="nv">$uname</span><span class="s1">&#39;&amp;password=&#39;</span><span class="nv">$pass</span><span class="s1">&#39;&amp;drop=0&amp;type=1&amp;n=100&#39;</span>
</span><span class="line"><span class="nv">check_data</span><span class="o">=</span><span class="s1">&#39;action=check_online&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c"># check whether already online</span>
</span><span class="line"><span class="nv">con</span><span class="o">=</span><span class="sb">`</span>curl -d <span class="nv">$check_data</span> -s http://net.tsinghua.edu.cn/cgi-bin/do_login<span class="sb">`</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -z <span class="nv">$con</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="c"># start login</span>
</span><span class="line"><span class="nv">res</span><span class="o">=</span><span class="sb">`</span>curl -d <span class="nv">$login_data</span> -s http://net.tsinghua.edu.cn/cgi-bin/do_login<span class="sb">`</span>
</span><span class="line">
</span><span class="line"><span class="c">#handle result</span>
</span><span class="line"><span class="nv">pe</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$res</span> | grep error<span class="sb">`</span>
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -z <span class="nv">$pe</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Login Success!&quot;</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="nb">echo</span> <span class="nv">$pe</span>
</span><span class="line"><span class="nb">exit </span>0
</span><span class="line"><span class="k">fi</span>
</span><span class="line">
</span><span class="line"><span class="c"># display flux infomation</span>
</span><span class="line"><span class="nv">flux</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$res</span> | awk -F <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;{print $3}&#39;</span><span class="sb">`</span>
</span><span class="line"><span class="nv">a</span><span class="o">=</span><span class="k">$((</span><span class="nv">$flux</span><span class="o">/</span><span class="m">1000000000</span><span class="k">))</span>
</span><span class="line"><span class="nv">b</span><span class="o">=</span><span class="k">$((</span><span class="o">(</span><span class="nv">$flux</span><span class="o">%</span><span class="m">1000000000</span><span class="o">)/</span><span class="m">100000000</span><span class="k">))</span>
</span><span class="line"><span class="nv">c</span><span class="o">=</span><span class="k">$((</span><span class="o">(</span><span class="nv">$flux</span><span class="o">%</span><span class="m">100000000</span><span class="o">)/</span><span class="m">10000000</span><span class="k">))</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Used Flux: &quot;</span><span class="nv">$a</span><span class="s2">&quot;.&quot;</span><span class="nv">$b$c</span><span class="s2">&quot;G.&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Already Online!&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># display flux information and online time</span>
</span><span class="line"><span class="nv">flux</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$con</span> | awk -F <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;{print $3}&#39;</span><span class="sb">`</span>
</span><span class="line"><span class="nb">time</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$con</span> | awk -F <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;{print $5}&#39;</span><span class="sb">`</span>
</span><span class="line"><span class="nv">a</span><span class="o">=</span><span class="k">$((</span><span class="nv">$flux</span><span class="o">/</span><span class="m">1000000000</span><span class="k">))</span>
</span><span class="line"><span class="nv">b</span><span class="o">=</span><span class="k">$((</span><span class="o">(</span><span class="nv">$flux</span><span class="o">%</span><span class="m">1000000000</span><span class="o">)/</span><span class="m">100000000</span><span class="k">))</span>
</span><span class="line"><span class="nv">c</span><span class="o">=</span><span class="k">$((</span><span class="o">(</span><span class="nv">$flux</span><span class="o">%</span><span class="m">100000000</span><span class="o">)/</span><span class="m">10000000</span><span class="k">))</span>
</span><span class="line"><span class="nv">h</span><span class="o">=</span><span class="k">$((</span><span class="nv">$time</span><span class="o">/</span><span class="m">3600</span><span class="k">))</span>
</span><span class="line"><span class="nv">m</span><span class="o">=</span><span class="k">$(($((</span><span class="nv">$time</span><span class="o">%</span><span class="m">3600</span><span class="k">))</span><span class="o">/</span><span class="m">60</span><span class="k">))</span>
</span><span class="line"><span class="nv">s</span><span class="o">=</span><span class="k">$(($((</span><span class="nv">$time</span><span class="o">%</span><span class="m">3600</span><span class="k">))</span><span class="o">%</span><span class="m">60</span><span class="k">))</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Used Flux: &quot;</span><span class="nv">$a</span><span class="s2">&quot;.&quot;</span><span class="nv">$b$c</span><span class="s2">&quot;G, Online Time: &quot;</span><span class="nv">$h</span><span class="s2">&quot;:&quot;</span><span class="nv">$m</span><span class="s2">&quot;:&quot;</span><span class="nv">$s</span><span class="s2">&quot;.&quot;</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">do_logout<span class="o">()</span> <span class="o">{</span>
</span><span class="line"><span class="c"># start logout</span>
</span><span class="line"><span class="nv">res</span><span class="o">=</span><span class="sb">`</span>curl -s http://net.tsinghua.edu.cn/cgi-bin/do_logout<span class="sb">`</span>
</span><span class="line">
</span><span class="line"><span class="c">#handle result</span>
</span><span class="line"><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$res&quot;</span> <span class="o">==</span> <span class="s2">&quot;logout_ok&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Logout Success!&quot;</span>
</span><span class="line"><span class="k">elif</span> <span class="o">[</span> <span class="s2">&quot;$res&quot;</span> <span class="o">==</span> <span class="s2">&quot;not_online_error&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;You&#39;re not Online!&quot;</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Operation Failed!&quot;</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="c">##################################################################################</span>
</span><span class="line"><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$1&quot;</span> <span class="o">==</span> <span class="s2">&quot;login&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line">do_login
</span><span class="line"><span class="k">elif</span> <span class="o">[</span> <span class="s2">&quot;$1&quot;</span> <span class="o">==</span> <span class="s2">&quot;logout&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line">do_logout
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Usage: &quot;</span><span class="nv">$0</span><span class="s2">&quot; {login|logout}&quot;</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>参考资料</strong></p>

<p>任意一本shell入门教程</p>

<h2 id="section-4">文档整理篇</h2>

<h3 id="section-5">引言</h3>

<p>摘自<a href="http://www.cnblogs.com/rollenholt/articles/2235713.html">《高级程序员装逼指南》</a></p>

<blockquote><p>在CSDN/ITeye/cnblogs这种地方写技术博客确实比在人人上写技术博客好多了</p><p>但是你要知道，大牛们都是有自己的个人网站的</p><p>而且，一个共同点是，他们的网站都是自己写的html（没有css）并且界面十分难看</p><p>整个网站散发着一种“我这的文章都很牛所以界面什么的都不重要”的气质</p><p>例如这个 <a href="http://xahlee.org/index.html" target="_blank">http://xahlee.org/index.html</a></p></blockquote>

<p><a href="http://frank19900731.github.io/img/post/2014-10/3.png" class="img-up" title="李杀网截屏"><img class="imgcenter" src="http://frank19900731.github.io/img/post/2014-10/3.png" width="70%" title="李杀网截屏" /></a></p>

<p>当然，用优美的外在包裹充实的内在，总还是更加让人赏心悦目的。</p>

<p><strong>这个引言的目的是……</strong></p>

<ul>
  <li>输出重要，积累重要，有个网站就更好了。</li>
</ul>

<h3 id="markdown">Markdown</h3>

<p><strong>类型</strong>  ——  微量级文本标记语言</p>

<p><strong>入门难度</strong>  ——  ★✩✩✩✩</p>

<p><strong>实用性</strong>  ——  ★★★★★</p>

<p><strong>装X效果</strong>  ——  ★★✩✩✩</p>

<p><strong>描述</strong></p>

<ul>
  <li>Evernote？有道笔记？XX笔记？
    <ul>
      <li>编辑复杂，小word</li>
      <li>先天不足，不是给科研人员用的，而是给大众记录用的，文字、图片、音频</li>
      <li>部分有偿使用，高级功能要收费</li>
      <li>分享方式单一</li>
    </ul>
  </li>
  <li>文档编辑类软件的一种趋势让人<strong>更专注于内容，而非格式</strong>，不必频繁在输入区和菜单工具栏之间切换</li>
  <li>语法简洁，容易学习（5分钟足够）</li>
  <li>导出格式丰富，latex，html，pdf，ebook，mobi……</li>
  <li><strong>样式丰富，内容与样式独立</strong>，由css文件及与之类似文件定制样式，称为主题</li>
  <li>扩展丰富
    <ul>
      <li>latex公式输入</li>
      <li>插入代码块 highlight.js</li>
      <li>……</li>
    </ul>
  </li>
  <li>较多在线编辑器可供使用，如<a href="https://www.zybuluo.com/mdeditor">作业部落</a>，Chrome插件 MaDe</li>
  <li>Github、StackOverflow、Google Code都支持</li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>快速写出有公式、有代码的笔记报告</li>
  <li>能够以较多方式分享自己的报告，特别是放在自己的个人主页上</li>
</ul>

<p><strong>实例说明</strong></p>

<p>本页面</p>

<p><strong>参考资料</strong></p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明</a></p>

<h3 id="octopress">Octopress</h3>

<p><strong>类型</strong>  ——  博客</p>

<p><strong>入门难度</strong>  ——  ★★★✩✩</p>

<p><strong>实用性</strong>  ——  ★★★✩✩</p>

<p><strong>装X效果</strong>  ——  ★★★★✩</p>

<p><strong>描述</strong></p>

<ul>
  <li><a href="http://blog.csdn.net/pongba/article/details/3896311">《[BetterExplained]为什么你应该（从现在开始就）写博客》</a></li>
  <li>Wordpress？ 摘自 <a href="http://www.tuicool.com/articles/rA7Bjq">从wordpress到octopress</a>
    <ul>
      <li>编辑环境复杂</li>
      <li>臃肿，累赘功能多</li>
      <li>定制性差</li>
      <li>过度依赖数据库，数据安全性低</li>
      <li>速度慢，优化门槛高</li>
      <li>迁移成本高</li>
    </ul>
  </li>
  <li>所需知识
    <ul>
      <li>ruby基础知识</li>
      <li>Git基本命令</li>
      <li>Github用法</li>
    </ul>
  </li>
  <li>基于Jekyll</li>
  <li><strong>纯静态</strong>，响应快</li>
  <li><strong>版本化管理</strong>，Word及其他笔记软件无法提供</li>
  <li><strong>不依赖数据库</strong>，Disqus、多说</li>
  <li><strong>定制容易，开源支持多</strong></li>
  <li><strong>支持Markdown</strong></li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>文章内容以文字图片居多，不需要视频音频或者华丽的动画效果</li>
</ul>

<p><strong>实例说明</strong></p>

<p>本博客</p>

<p><strong>参考资料</strong></p>

<p><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">Github搭建Octopress博客的方法</a></p>

<h3 id="knitr">knitr</h3>

<p><strong>类型</strong>  ——  自动化报告</p>

<p><strong>入门难度</strong>  ——  ★★★✩✩</p>

<p><strong>实用性</strong>  ——  ★★★★★</p>

<p><strong>装X效果</strong>  ——  ★★✩✩✩</p>

<p><strong>描述</strong></p>

<ul>
  <li>国人写的R包，出于对功能相近的 Sweave 的不满足</li>
  <li>代码与文档混编，编译时执行代码输出结果（数据、图片）
    <ul>
      <li><strong>数据可伪造，图形可拷贝，只有源代码是最可靠的</strong></li>
      <li>代码可以进行版本管理</li>
    </ul>
  </li>
  <li>文学化编程，Knuth</li>
  <li>支持 latex，markdown 等多种文档类型</li>
  <li><a href="http://ggplot2.org/">ggplot2</a> 的诱惑力
    <ul>
      <li>入门缓慢，功能强大</li>
    </ul>
  </li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>收取、检查作业</li>
  <li>写一份图文码并茂的报告</li>
</ul>

<p><strong>实例说明</strong></p>

<p><a href="http://www.rpubs.com/">RPubs</a></p>

<p><strong>参考资料</strong></p>

<p><a href="http://yihui.name/knitr/">knitr官网</a> 顺便说一句，这个官网就是用Octopress搭建的</p>

<h2 id="section-6">自我展示篇</h2>

<h3 id="tpp2">tpp<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3>

<p><strong>类型</strong>  ——  命令行展示</p>

<p><strong>入门难度</strong>  ——  ★✩✩✩✩</p>

<p><strong>实用性</strong>  ——  ★★✩✩✩</p>

<p><strong>装X效果</strong>  ——  ★★★★✩</p>

<p><strong>描述</strong></p>

<ul>
  <li>基于ncurses（字符终端处理库），ruby-ncurses，figlet（字符图）</li>
  <li>名称来源是PPT的逆向</li>
  <li>语法极易（1分钟？）</li>
  <li>支持中文</li>
  <li>支持导出latex、txt格式</li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>纯linux命令行下文档记录、演示</li>
</ul>

<p><strong>实例说明</strong></p>

<p><a href="http://songchengru.eicp.net/tpp/">展示效果</a> in Chrome Extension - Secure Shell</p>

<p><strong>参考资料</strong></p>

<p><a href="http://www.ngolde.de/tpp.html">官网</a></p>

<p><a href="https://github.com/chinageek/fun/tree/master/tpp">实例代码</a></p>

<p><a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=705965">字符编码 bug fix</a></p>

<h3 id="jmpressjs">jmpress.js</h3>

<p><strong>类型</strong>  ——  浏览器富动态效果展示</p>

<p><strong>入门难度</strong>  ——  ★★★★✩</p>

<p><strong>实用性</strong>  ——  ★★★✩✩</p>

<p><strong>装X效果</strong>  ——  ★★★★★</p>

<p><strong>描述</strong></p>

<ul>
  <li>非线性展示
    <ul>
      <li>一个页面</li>
      <li>区域间可跳跃</li>
      <li>位移、缩放与旋转</li>
      <li>揭示概念、事物间的复杂联系</li>
      <li>动态思维导图</li>
    </ul>
  </li>
  <li>Prezi vs jmpress.js
    <ul>
      <li>Adobe Flash &amp; Flex vs HTML5</li>
      <li>臃肿 vs 轻量级</li>
      <li>扩展受限（中文、字体等） vs 开源支持（大量js功能支持）</li>
      <li>所见即所得 vs 较复杂设计</li>
    </ul>
  </li>
  <li>impress.js 受Prezi启发，jmpress.js在其基础上进行了封装，成为jQuery插件
    <ul>
      <li>支持新版Chrome、Safari、Firefox，IE 10 poorly supported</li>
    </ul>
  </li>
  <li>所需知识
    <ul>
      <li>熟悉CSS3、Javascript</li>
    </ul>
  </li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>有趣的故事、新颖的观点，不仅仅是为了追求酷炫的过渡效果（TED talk）</li>
  <li>网站上的个性化介绍、流程展示</li>
</ul>

<p><strong>实例说明</strong></p>

<p><a href="http://songchengru.eicp.net/jmpress/ex1/">Demo</a></p>

<p><a href="http://andrewyuan.github.io/methodology.html#/init">巴西世界杯预测</a></p>

<p><strong>参考资料</strong></p>

<p><a href="https://github.com/jmpressjs/jmpress.js">Github 项目托管地址</a></p>

<h2 id="section-7">数据展示篇</h2>

<h3 id="shiny">Shiny</h3>

<p><strong>类型</strong>  ——  数据动态交互展示</p>

<p><strong>入门难度</strong>  ——  ★★★✩✩</p>

<p><strong>实用性</strong>  ——  ★★★★✩</p>

<p><strong>装X效果</strong>  ——  ★★★★✩</p>

<p><strong>描述</strong></p>

<ul>
  <li>Data visualization or data visualisation is a modern branch of descriptive statistics. It involves the creation and study of the visual representation of data, meaning “information that has been abstracted in some schematic form, including attributes or variables for the units of information”.  ——  摘自维基百科</li>
  <li>数据可视化工具种类繁多，网搜都是“XX种数据可视化工具推荐”
    <ul>
      <li>Online vs Desktop</li>
      <li>代码开发 vs 图形界面操作</li>
    </ul>
  </li>
  <li>属于 <a href="http://rdata.wicp.net/rstudio/">RStudio</a>  这一火热的开源项目</li>
  <li><strong>动态展示</strong>，以R的丰富资源为支撑
    <ul>
      <li><a href="http://rdata.wicp.net/shiny/imgsvd/">SVD实例</a></li>
      <li>自动生成HTML、CSS、Javascript，只需编写R代码</li>
      <li>申请项目空间 <a href="https://www.shinyapps.io/">Shiny app 空间</a></li>
    </ul>
  </li>
  <li>R最大的优势是：它是由统计学家们开发的。R最大的劣势是……它是由统计学家门开发的。—— Bo Cowgill
    <ul>
      <li>速度慢</li>
      <li>需要对R有了解</li>
    </ul>
  </li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>简单的数据交互、模型演示</li>
</ul>

<p><strong>实例说明</strong></p>

<p><a href="http://rdata.wicp.net/shiny/">Shiny 例程</a></p>

<p><strong>参考资料</strong></p>

<p><a href="http://shiny.rstudio.com/">Shiny 官网</a></p>

<h3 id="d3">D3</h3>

<p><strong>类型</strong>  ——  数据静态展示</p>

<p><strong>入门难度</strong>  ——  ★★★★✩</p>

<p><strong>实用性</strong>  ——  ★★★★✩</p>

<p><strong>装X效果</strong>  ——  ★★★★★</p>

<p><strong>描述</strong></p>

<ul>
  <li>D3（Data Driven Documents），支持SVG渲染，图表类型丰富
    <ul>
      <li>数据绑定网页元素</li>
      <li>设置元素可视化属性</li>
      <li>元素变换与动态过渡</li>
    </ul>
  </li>
  <li>所需知识
    <ul>
      <li>jQuery</li>
      <li>CSS</li>
      <li>SVG</li>
      <li>数据可视化知识</li>
    </ul>
  </li>
  <li>浏览器兼容性好</li>
  <li>有多款基于D3开发的适用于不同展示对象的工具
    <ul>
      <li>Planetary.js 地理信息</li>
      <li>Ember Charts、 xCharts 图表库</li>
      <li>Richshaw 绘制时序图</li>
    </ul>
  </li>
  <li>BSD许可，适用于商业或非商业目的</li>
</ul>

<p><strong>适用场合</strong>
* 展示已有数据规律，且数据可以共享</p>

<p><strong>实例说明</strong></p>

<p><a href="https://github.com/mbostock/d3/wiki/Gallery">官方示例</a></p>

<p><a href="http://andrewyuan.github.io/EDAV-project.html">巴西世界杯预测</a></p>

<p><strong>参考资料</strong></p>

<p><a href="http://d3js.org/">D3 官网</a></p>

<p><a href="https://github.com/mbostock/d3">Github托管地址</a></p>

<h2 id="section-8">其它工具</h2>

<p><strong>ADOBE MUSE - 自我展示类工具</strong></p>

<p><a href="http://muse.adobe.com/">官方网站</a> 教程丰富，讲解细致 </p>

<p>无须编程，实现流行的网页效果</p>

<p>例如 <a href="http://songchengru.eicp.net/scroll/">Scroll Effects</a></p>

<p><strong>LATEX CV - 自我展示类工具</strong></p>

<p><a href="https://launchpad.net/moderncv">mordencv官网</a></p>

<p><a href="http://www.ctan.org/tex-archive/macros/latex/contrib/moderncv">mordencv代码</a></p>

<p><strong>PROCESSING - 数据展示类工具</strong></p>

<p>MIT Media laboratory 创制的编程绘图语言，连接艺术设计与计算机程序</p>

<p><a href="http://processing.org/">Processing 官网</a></p>

<p><a href="https://www.processing.org/exhibition/">作品展示</a></p>

<p>基于Processing的jQuery插件：<a href="http://processingjs.org/">processing.js</a></p>

<h2 id="section-9">总结</h2>

<ul>
  <li>蜻蜓点水，抛砖引玉</li>
  <li>经验之谈，一家之言</li>
  <li>如能产生一点启发，激发一点兴趣，也不枉一番准备</li>
</ul>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/16/ti-gao-xiao-lu-yu-qing-qu-de-jiu-chong-cheng-xu-gong-ju-tui-jian/">http://frank19900731.github.io/blog/2014/10/16/ti-gao-xiao-lu-yu-qing-qu-de-jiu-chong-cheng-xu-gong-ju-tui-jian/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>一种语言的占比等于其在8大网站（Google 30%，Blogger 30%，Wikipedia 15%，YouTube 9%，Baidu 6%，Yahoo! 3%，Bing 3%，Amazon 3%）上被搜索出的结果总数，除以前50名语言的结果总数。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>展示结束后，又发现了一款名为 <a href="https://github.com/visit1985/mdp">MDP</a> 的命令行展示工具，大家可以试试，当然，以 Markdown 为书写语言的网页版展示工具就更多了，比如 <a href="https://github.com/onesuper/weakpoint">WeakPoint</a>。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
