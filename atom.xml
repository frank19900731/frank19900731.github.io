<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog of 太极儒]]></title>
  <link href="http://frank19900731.github.io/atom.xml" rel="self"/>
  <link href="http://frank19900731.github.io/"/>
  <updated>2014-08-31T13:29:40+08:00</updated>
  <id>http://frank19900731.github.io/</id>
  <author>
    <name><![CDATA[Frank Song]]></name>
    <email><![CDATA[scr_0731@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014年8月份第4周总结]]></title>
    <link href="http://frank19900731.github.io/blog/2014/08/31/2014nian-8yue-fen-di-4zhou-zong-jie/"/>
    <updated>2014-08-31T10:35:49+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/08/31/2014nian-8yue-fen-di-4zhou-zong-jie</id>
    <content type="html"><![CDATA[<h2 id="section">代码展示</h2>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Obj-C 用例</span><a href="https://github.com/frank19900731/ObjcDemo/blob/master/ObjcDemo/Animal.m">Github</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &quot;Animal.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">Animal</span>
</span><span class="line"><span class="k">@synthesize</span> <span class="n">name</span><span class="p">,</span> <span class="n">birthday</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">Animal</span> <span class="o">*</span><span class="p">)</span><span class="nf">initWithParams:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">n</span> <span class="nf">birthday:</span><span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">b</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">setName:</span><span class="n">n</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">setBirthday:</span><span class="n">b</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">description</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;I&#39;m a cute animal.&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">eat</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@ : eat delicious food&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sleep</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@ : sleep for a while&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[支持的语言]http://pygments.org/docs/lexers/ <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Test.js for download (test.js)</span> <a href="http://frank19900731.github.io/downloads/code/test.js">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> sample javascript from xui</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class="line">    <span class="nx">xui</span><span class="p">,</span>
</span><span class="line">    <span class="nb">window</span>     <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class="line">    <span class="nx">string</span>     <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="nb">document</span>   <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
</span><span class="line">    <span class="nx">simpleExpr</span> <span class="o">=</span> <span class="sr">/^#?([\w-]+)$/</span><span class="p">,</span>
</span><span class="line">    <span class="nx">idExpr</span>     <span class="o">=</span> <span class="sr">/^#/</span><span class="p">,</span>
</span><span class="line">    <span class="nx">tagExpr</span>    <span class="o">=</span> <span class="sr">/&lt;([\w:]+)/</span><span class="p">,</span>
</span><span class="line">    <span class="nx">slice</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="k">try</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeType</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span> <span class="nx">slice</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">ret</span><span class="o">=</span><span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span> <span class="p">};</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">x$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">xui</span> <span class="o">=</span> <span class="nx">xui</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nx">xui</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div><script src="https://gist.github.com/4321346.js?file=gistfile1.diff"></script>
<noscript><pre><code>@@ -590,7 +590,7 @@ class SpritesTest &lt; Test::Unit::TestCase
  it &quot;should generate a sprite from nested folders&quot; do
    css = render &lt;&lt;-SCSS
-     @import &quot;nested/*.png&quot;;
+     @import &quot;nested/**/*.png&quot;;
      @include all-nested-sprites;
    SCSS
    assert_correct css, &lt;&lt;-CSS</code></pre></noscript></div>

<div><script src="https://gist.github.com/1059334.js?file=svg_bullets.rb"></script>
<noscript><pre><code>require &#39;sass&#39;

module Sass::Script::Functions
  def svg_circle(radius, color, circle_type)
    img = if circle_type.value == &quot;disc&quot;
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke-width=&quot;0&quot; fill=&quot;#{color}&quot;/&gt;}
    else
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke=&quot;#{color}&quot; stroke-width=&quot;1&quot; fill=&quot;white&quot;/&gt;}
    end
    inline_image_string(svg_circle_envelope(img).gsub(/  +/, &#39; &#39;), &#39;image/svg+xml&#39;)
  end
  private
  def svg_circle_envelope(content)
    %Q{&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;#{content}&lt;/svg&gt;}
  end
end
</code></pre></noscript></div>

<div><script src="https://gist.github.com/1059334.js?file=usage.scss"></script>
<noscript><pre><code>// Draw a list style image in svg using the radius and color specified.
@mixin colored-bullet($radius, $color, $type: disc) {
  list-style-type: $type;
  list-style-image: svg-circle($radius, $color, $type);
}


ul {
  @include colored-bullet(2px, $green, disc);
  ul {
    @include colored-bullet(2px, $green, circle);
  }
}
</code></pre></noscript></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Coffeescript Tricks </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># Given an alphabet:
</span><span class="line">alphabet = 'abcdefghijklmnopqrstuvwxyz'
</span><span class="line">
</span><span class="line"># Iterate over part of the alphabet:
</span><span class="line">console.log letter for letter in alphabet[4..8]</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-1">1</h1>

<h2 id="section-2">2</h2>

<h3 id="section-3">3</h3>

<blockquote><p>Wheeee!</p><footer><strong>Bobby Willis</strong> <cite><a href="http://google.com/search?q=pants">The Search for Bobby&#8217;s Pants</a></cite></footer></blockquote>

<pre><code class="language-haskell">main = putStrLn "Hello world"
-- kramdown's tilde fencing
</code></pre>

<ul id="markdown-toc">
  <li><a href="#section">代码展示</a></li>
  <li><a href="#section-1">1</a>    <ul>
      <li><a href="#section-2">2</a>        <ul>
          <li><a href="#section-3">3</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>random variables <script type="math/tex">X_1, X_2, X_3</script> from</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align}
 %]]&gt;</script>

<p><a href="http://www.jekyllrb.com">Jekyll</a> is a very popular and very powerful static blog generator. Out of the box it’s able to generate sophisticated site structures, and has a ton of configurability. One of the areas where I feel that Jekyll lacks some sophistication is around the handling of categories and tags; these are two data-sets that are core to Jekyll, but there isn’t a lot of functionality actually built around them. This is in contrast to dynamic blogging platforms like <a href="http://www.wordpress.com">WordPress</a>, or possibly <a href="http://www.drupal.org">Drupal</a>, where these two data points are used to drive a lot of central navigation for the site.</p>

<p>To be fair, Jekyll is really intended to be a framework for expansion into larger degrees of customization and sophistication, and thankfully it has a very powerful plugin model. Higher-level frameworks like <a href="http://www.octopress.org">Octopress</a> and <a href="http://www.jekyllbootstrap.com">Jekyll Bootstrap</a> have shown what you can do with a little extra tweaking - as have the long list of <a href="https://github.com/mojombo/jekyll/wiki/Plugins">Jekyll plugins</a>.</p>

<p>When I set out to move my site over to Jekyll, one of my key goals was to still support all of the key navigation my site was capable of with my custom platform code, and Wordpress before it. That pretty much amounts to:</p>

<ul>
  <li>A date descending paging root for all blog entries (<a href="http://frank19900731.github.io/index.html">/index.html</a>).</li>
  <li>A matching Atom feed for the root index.</li>
  <li>Static pages like <a href="http://frank19900731.github.io/about.html">About</a> and <a href="http://frank19900731.github.io/contact.html">Contact</a>.</li>
  <li>Individual blog pages (I suppose this one is obvious).</li>
  <li>Date desceding paging indexes for all categories and tags I use (for example: <a href="http://frank19900731.github.io/category/article">/category/article/</a> and <a href="http://frank19900731.github.io/tag/jruby/">/tag/jruby/</a>).</li>
  <li>Matching atom feeds for each of the paging indexes above (for example: <a href="http://frank19900731.github.io/category/article/atom.xml">/category/article/atom.xml</a> and <a href="http://frank19900731.github.io/tag/jruby/atom.xml">/tag/jruby/atom.xml</a>).</li>
</ul>

<p><img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" /></p>

<p><span class="pullquote-right" data-pullquote="surround it like this">
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, surround it like this and that’s all there is to it.
</span></p>

<div class="foo">
  <table>
    <thead>
      <tr>
        <th>Default aligned</th>
        <th style="text-align: left">Left aligned</th>
        <th style="text-align: center">Center aligned</th>
        <th style="text-align: right">Right aligned</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>First body part</td>
        <td style="text-align: left">Second cell</td>
        <td style="text-align: center">Third cell</td>
        <td style="text-align: right">fourth cell</td>
      </tr>
      <tr>
        <td>Second line</td>
        <td style="text-align: left">foo</td>
        <td style="text-align: center"><strong>strong</strong></td>
        <td style="text-align: right">baz</td>
      </tr>
      <tr>
        <td>Third line</td>
        <td style="text-align: left">quux</td>
        <td style="text-align: center">baz</td>
        <td style="text-align: right">bar</td>
      </tr>
    </tbody>
  </table>

</div>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>脚注<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的第一篇 Octopress 博客]]></title>
    <link href="http://frank19900731.github.io/blog/2014/08/24/wo-de-di-yi-pian-octopress-bo-ke/"/>
    <updated>2014-08-24T21:50:56+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/08/24/wo-de-di-yi-pian-octopress-bo-ke</id>
    <content type="html"><![CDATA[<h2 id="section">代码展示</h2>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Obj-C 用例</span><a href="https://github.com/frank19900731/ObjcDemo/blob/master/ObjcDemo/Animal.m">Github</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &quot;Animal.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">Animal</span>
</span><span class="line"><span class="k">@synthesize</span> <span class="n">name</span><span class="p">,</span> <span class="n">birthday</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">Animal</span> <span class="o">*</span><span class="p">)</span><span class="nf">initWithParams:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">n</span> <span class="nf">birthday:</span><span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">b</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">setName:</span><span class="n">n</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">setBirthday:</span><span class="n">b</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">description</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;I&#39;m a cute animal.&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">eat</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@ : eat delicious food&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sleep</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@ : sleep for a while&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[支持的语言]http://pygments.org/docs/lexers/ <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Test.js for download (test.js)</span> <a href="http://frank19900731.github.io/downloads/code/test.js">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> sample javascript from xui</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class="line">    <span class="nx">xui</span><span class="p">,</span>
</span><span class="line">    <span class="nb">window</span>     <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class="line">    <span class="nx">string</span>     <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="nb">document</span>   <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
</span><span class="line">    <span class="nx">simpleExpr</span> <span class="o">=</span> <span class="sr">/^#?([\w-]+)$/</span><span class="p">,</span>
</span><span class="line">    <span class="nx">idExpr</span>     <span class="o">=</span> <span class="sr">/^#/</span><span class="p">,</span>
</span><span class="line">    <span class="nx">tagExpr</span>    <span class="o">=</span> <span class="sr">/&lt;([\w:]+)/</span><span class="p">,</span>
</span><span class="line">    <span class="nx">slice</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="k">try</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeType</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span> <span class="nx">slice</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">ret</span><span class="o">=</span><span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span> <span class="p">};</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">x$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">xui</span> <span class="o">=</span> <span class="nx">xui</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nx">xui</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div><script src="https://gist.github.com/4321346.js?file=gistfile1.diff"></script>
<noscript><pre><code>@@ -590,7 +590,7 @@ class SpritesTest &lt; Test::Unit::TestCase
  it &quot;should generate a sprite from nested folders&quot; do
    css = render &lt;&lt;-SCSS
-     @import &quot;nested/*.png&quot;;
+     @import &quot;nested/**/*.png&quot;;
      @include all-nested-sprites;
    SCSS
    assert_correct css, &lt;&lt;-CSS</code></pre></noscript></div>

<div><script src="https://gist.github.com/1059334.js?file=svg_bullets.rb"></script>
<noscript><pre><code>require &#39;sass&#39;

module Sass::Script::Functions
  def svg_circle(radius, color, circle_type)
    img = if circle_type.value == &quot;disc&quot;
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke-width=&quot;0&quot; fill=&quot;#{color}&quot;/&gt;}
    else
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke=&quot;#{color}&quot; stroke-width=&quot;1&quot; fill=&quot;white&quot;/&gt;}
    end
    inline_image_string(svg_circle_envelope(img).gsub(/  +/, &#39; &#39;), &#39;image/svg+xml&#39;)
  end
  private
  def svg_circle_envelope(content)
    %Q{&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;#{content}&lt;/svg&gt;}
  end
end
</code></pre></noscript></div>

<div><script src="https://gist.github.com/1059334.js?file=usage.scss"></script>
<noscript><pre><code>// Draw a list style image in svg using the radius and color specified.
@mixin colored-bullet($radius, $color, $type: disc) {
  list-style-type: $type;
  list-style-image: svg-circle($radius, $color, $type);
}


ul {
  @include colored-bullet(2px, $green, disc);
  ul {
    @include colored-bullet(2px, $green, circle);
  }
}
</code></pre></noscript></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Coffeescript Tricks </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># Given an alphabet:
</span><span class="line">alphabet = 'abcdefghijklmnopqrstuvwxyz'
</span><span class="line">
</span><span class="line"># Iterate over part of the alphabet:
</span><span class="line">console.log letter for letter in alphabet[4..8]</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-1">1</h1>

<h2 id="section-2">2</h2>

<h3 id="section-3">3</h3>

<blockquote><p>Wheeee!</p><footer><strong>Bobby Willis</strong> <cite><a href="http://google.com/search?q=pants">The Search for Bobby&#8217;s Pants</a></cite></footer></blockquote>

<pre><code class="language-haskell">main = putStrLn "Hello world"
-- kramdown's tilde fencing
</code></pre>

<ul id="markdown-toc">
  <li><a href="#section">代码展示</a></li>
  <li><a href="#section-1">1</a>    <ul>
      <li><a href="#section-2">2</a>        <ul>
          <li><a href="#section-3">3</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>random variables <script type="math/tex">X_1, X_2, X_3</script> from</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align}
 %]]&gt;</script>

<p><a href="http://www.jekyllrb.com">Jekyll</a> is a very popular and very powerful static blog generator. Out of the box it’s able to generate sophisticated site structures, and has a ton of configurability. One of the areas where I feel that Jekyll lacks some sophistication is around the handling of categories and tags; these are two data-sets that are core to Jekyll, but there isn’t a lot of functionality actually built around them. This is in contrast to dynamic blogging platforms like <a href="http://www.wordpress.com">WordPress</a>, or possibly <a href="http://www.drupal.org">Drupal</a>, where these two data points are used to drive a lot of central navigation for the site.</p>

<p>To be fair, Jekyll is really intended to be a framework for expansion into larger degrees of customization and sophistication, and thankfully it has a very powerful plugin model. Higher-level frameworks like <a href="http://www.octopress.org">Octopress</a> and <a href="http://www.jekyllbootstrap.com">Jekyll Bootstrap</a> have shown what you can do with a little extra tweaking - as have the long list of <a href="https://github.com/mojombo/jekyll/wiki/Plugins">Jekyll plugins</a>.</p>

<p>When I set out to move my site over to Jekyll, one of my key goals was to still support all of the key navigation my site was capable of with my custom platform code, and Wordpress before it. That pretty much amounts to:</p>

<ul>
  <li>A date descending paging root for all blog entries (<a href="http://frank19900731.github.io/index.html">/index.html</a>).</li>
  <li>A matching Atom feed for the root index.</li>
  <li>Static pages like <a href="http://frank19900731.github.io/about.html">About</a> and <a href="http://frank19900731.github.io/contact.html">Contact</a>.</li>
  <li>Individual blog pages (I suppose this one is obvious).</li>
  <li>Date desceding paging indexes for all categories and tags I use (for example: <a href="http://frank19900731.github.io/category/article">/category/article/</a> and <a href="http://frank19900731.github.io/tag/jruby/">/tag/jruby/</a>).</li>
  <li>Matching atom feeds for each of the paging indexes above (for example: <a href="http://frank19900731.github.io/category/article/atom.xml">/category/article/atom.xml</a> and <a href="http://frank19900731.github.io/tag/jruby/atom.xml">/tag/jruby/atom.xml</a>).</li>
</ul>

<p><img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" /></p>

<p><span class="pullquote-right" data-pullquote="surround it like this">
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, surround it like this and that’s all there is to it.
</span></p>

<div class="foo">
  <table>
    <thead>
      <tr>
        <th>Default aligned</th>
        <th style="text-align: left">Left aligned</th>
        <th style="text-align: center">Center aligned</th>
        <th style="text-align: right">Right aligned</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>First body part</td>
        <td style="text-align: left">Second cell</td>
        <td style="text-align: center">Third cell</td>
        <td style="text-align: right">fourth cell</td>
      </tr>
      <tr>
        <td>Second line</td>
        <td style="text-align: left">foo</td>
        <td style="text-align: center"><strong>strong</strong></td>
        <td style="text-align: right">baz</td>
      </tr>
      <tr>
        <td>Third line</td>
        <td style="text-align: left">quux</td>
        <td style="text-align: center">baz</td>
        <td style="text-align: right">bar</td>
      </tr>
    </tbody>
  </table>

</div>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>脚注<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
