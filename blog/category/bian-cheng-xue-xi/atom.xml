<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 编程学习 | Blog of 太极儒]]></title>
  <link href="http://frank19900731.github.io/blog/category/bian-cheng-xue-xi/atom.xml" rel="self"/>
  <link href="http://frank19900731.github.io/"/>
  <updated>2015-02-26T23:49:19+08:00</updated>
  <id>http://frank19900731.github.io/</id>
  <author>
    <name><![CDATA[Frank Song]]></name>
    <email><![CDATA[scr_0731@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《测试驱动开发和函数式编程》在线演示]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi/"/>
    <updated>2014-11-27T16:08:27+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi</id>
    <content type="html"><![CDATA[<!-- excerpt start -->

<p>在 Scala 微信群里了解到了 <a href="http://together.iagile.me/activities/28">《万花筒活动: 测试驱动开发和函数式编程 —— 在线代码演示如何对函数式语言 (Scala) 进行测试驱动开发》</a> 这么一个活动，以在线视频会议的形式举行。跟着讲解抄代码，对 <a href="http://baike.baidu.com/subview/76310/8243857.htm#viewPageContent">TDD</a>（Test-Driven Development）有了点粗浅的了解。</p>

<p>讲解围绕一道叫 <a href="http://codingdojo.org/">KataAnagram</a> 的题目展开，用《哈利·波特》里面的例子很好解释。</p>

<blockquote>
  <p>Tom Marvolo Riddle =&gt; I am Lord Voldemort</p>
</blockquote>

<p>上面是一个字母重排的过程。给定一个单词 S 和一个单词列表 L，要求从 L 中找到两个词（可以重复），用这两个词的全体字母重排出 S。</p>

<p>讲者主要是用这道题讲解测试驱动开发的思路流程，顺便讲解一下如何在代码重构时从 Java 转换到函数式编程的思维，而不是从算法角度考虑最优。</p>

<p>讲者开始提到测试驱动开发的大致思路是</p>

<ol>
  <li>写一个失败的测试；</li>
  <li>写最简单的代码使得测试通过；</li>
  <li>重构代码和测试。</li>
</ol>

<p>2、3 步骤应该是迭代进行的。从以下测试代码的撰写思路上，可以看到想法的逐层深入。</p>

<!-- excerpt end -->

<p>```scala 测试代码
import org.junit.Assert.assertEquals
import org.junit.Test
import org.scalatest.junit.JUnitSuite</p>

<p>class TestAnagram extends JUnitSuite {</p>

<pre><code>def assertAnagramEqual(expectedAnagram: List[String], input: String, wordList: List[String]) = {
	val generator = new Anagram(wordList)
	assertEquals(expectedAnagram, generator.generate(input))
}	

// 处理空单词列表输入
@Test def empty_word_list_and_input_is_any_word {
	val generator = new Anagram(List())
	assertAnagramEqual(List(), "anyWord", List())
}

// 处理只含一个元素的单词列表，double 出单词 S
@Test def one_character_word_list_and_input_is_double_of_this_word {
	assertAnagramEqual(List("a a"), "aa", List("a"))
}

// 处理只含一个元素的单词列表，不存在符合条件的两单词
@Test def one_word_list_and_input_has_no_anagram {
	assertAnagramEqual(List(), "bb", List("a"))
}

// 处理只含一个元素的单词列表，double 时有字母序的变化
@Test def one_word_list_and_input_has_anagram_with_different_character_order {
	assertAnagramEqual(List("an an"), "anna", List("an"))
}

// 处理含有两个元素的单词列表，最后一个单词 double 出单词 S
@Test def two_word_list_and_input_has_anagram_of_second_word {
	assertAnagramEqual(List("a a"), "aa", List("b", "a"))
}

// 处理含有三个元素的单词列表，最后一个单词 double 出单词 S
@Test def three_word_list_and_input_has_anagram_of_third_word {
	assertAnagramEqual(List("a a"), "aa", List("c", "b", "a"))
}

// 处理含有多个元素的单词列表，其中某个单词 double 出单词 S
@Test def more_than_one_word_list_and_input_has_anagram_of_single_word {
	assertAnagramEqual(List("b b"), "bb", List("c", "b", "a", "d"))
}

// 处理含有多个元素的单词列表，其中两个单词重排出单词 S
@Test def two_word_list_and_input_has_anagram_of_both_word {
	assertAnagramEqual(List("a b"), "ab", List("a", "b"))
	assertAnagramEqual(List("a b"), "ab", List("c", "a", "b"))
}

// 处理含有多个元素的单词列表，其中多对单词重排出单词 S
@Test def input_has_two_anagrams {
	assertAnagramEqual(List("a bc", "ab c"), "abc", List("a", "bc", "ab", "c"))
	assertAnagramEqual(List("ab ab", "ba ba", "ab ba", "abb a"), "abba", List("ab", "ba", "abb", "d", "a"))
}
</code></pre>

<p>}
```</p>

<p>在功能代码的实现方面，经过了多次函数化重构，最后一种比较简单的方式如下。</p>

<p>```scala 功能代码
class Anagram(wordList: List[String]) {</p>

<pre><code>def generate(input: String): List[String] = {			
		
	def isAnagram(candidates: List[String]) = (candidates.mkString).sorted == input.sorted
	
	def output(anagrams: List[String]) = anagrams.mkString(" ")

	def candidates = List(wordList, wordList).transpose ++ wordList.combinations(2)
	
	return candidates.filter(isAnagram).map(output)
	
} } ```
</code></pre>

<p>历次重构的过程写起来就比较啰嗦了，不在这里列出。不过从测试代码一点点完善的过程里，能够看出一个大致的思路。</p>

<p>对于一个小问题，如果技艺熟练，完全有可能直接写出功能代码的最简形式，不过对于一个较大规模的项目来说，这种做法确实有优势，学习了。</p>

<p>最后附上老师课后分享的资料。</p>

<ul>
  <li><a href="https://github.com/JosephYao/Kata-Anagram/tree/iteration_19/src">代码</a> </li>
  <li><a href="http://www.tudou.com/programs/view/NUPTlyGkVcU/">视频</a></li>
  <li><a href="https://www.evernote.com/shard/s188/sh/55ba699d-05f7-4baa-9032-1692fff28cad/c08df590e81753fef302b5773b3b7d8e">Kata 接力</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Open Workshop — Scala 从零到入门》课堂笔记]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/23/open-workshop-scalacong-ling-dao-ru-men-ke-tang-bi-ji/"/>
    <updated>2014-11-23T09:56:19+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/23/open-workshop-scalacong-ling-dao-ru-men-ke-tang-bi-ji</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#thoughtworks">关于 ThoughtWorks</a></li>
  <li><a href="#section">培训记录</a>    <ul>
      <li><a href="#section-1">第一小节</a></li>
    </ul>
  </li>
</ul>

<!-- excerpt start -->

<h2 id="thoughtworks">关于 ThoughtWorks</h2>

<p>从 <a href="http://www.huodongxing.com/event/1256701125300">活动行</a> 上了解到有这么一门关于 Scala 的入门培训，周六闲来无事也就去了。一来因为 Scala 语言有 Spark 这样的杀手级应用，自己正要了解学习，二来想体验一些业界培训的氛围。</p>

<p>东直门地铁站 D 口一出就能望见国华投资大厦，活动主办方 ThoughtWorks 在 1105 室。进了公司感觉规模不小，于是在培训开始前查了一下 <a href="http://baike.baidu.com/item/thoughtworks?fr=aladdin">ThoughtWorks</a> 是干啥的，顿时感觉自己孤陋寡闻了。本次活动的讲师是 ThoughtWorks 的员工吴雪峰，他是 Scala 的大牛，在 github 上有分享一些 <a href="https://github.com/XuefengWu/ScalaTraining">培训材料</a>。</p>

<p>培训从早上九点开始，晚上六点结束，<strong>包学包问包午饭</strong>。培训中间穿插了一些 Social 环节，比如自我介绍，闲话讨论，让人感受到码农大家庭的温暖。有小二十个同学参与了此次活动，都是对 Scala 感兴趣或工作当中要用到，除了我和另外一个叫张淞的同学（<a href="http://book.douban.com/subject/25843224/">《Haskell函数式编程入门》</a>的作者）还没工作，其他都是有业界开发经验的人员。有些人已经用了一阵子 Scala，有些人刚配置好环境，比如俺，不过幸好之前看过 <a href="http://book.douban.com/subject/25803388/">《Haskell 趣学指南》</a>，能够跟上老师节奏。</p>

<p>在 Scala 培训进行的同时，还有一个 <a href="http://www.beijing-open-party.org/event/32">Open Party</a> 在公司里举行，加之自己所经历的这次周到细致的培训，我对 ThoughtWorks 这家公司越发好奇。进一步查询获知，ThoughtWorks 举办的分享、报告非常频繁，质量、反响也很好，这其中的推动力是什么呢？</p>

<p>也许公司自有或长期或短期的利益因素考量，但除此之外，我作为一个小白用户，在他们的活动中学到了知识，认识了同路人，还写了这篇文章分享、宣传，这样的效果应该也是 ThoughWorks 所乐见的吧。知乎上有人提问 <a href="http://www.zhihu.com/question/24738030">在 ThoughtWorks 工作是怎样一种体验？</a>，从回答的字里行间我也看到了对“推动力”问题的解答。</p>

<p>总而言之，对 ThoughtWorks 举办的这次活动表示感谢~</p>

<!-- excerpt end -->

<h2 id="section">培训记录</h2>

<p>老师讲的东西到自己的耳朵脑子里，从脑子到笔记，从笔记再到需要字斟句酌的博客文章，这中间会有很多损耗，另限于表达能力和理解能力，仅能保证记录下随堂练习、一些知识要点和学习资料，<strong>建议大家有机会还是亲自报名体验</strong>。</p>

<p>吴雪峰老师大致是按照如下的思维导图来讲述的，分四节课，前三节各一小时，第四节两个多小时……</p>

<p><a href="/img/post/2014-11/1.bmp" class="img-up" title="Scala 介绍思维导图"><img class="imgcenter" src="/img/post/2014-11/1.bmp" width="80%" title="Scala 介绍思维导图" ></a></p>

<h3 id="section-1">第一小节</h3>

<p>Scala 允许面向对象编程和函数式编程结合起来，使用后者代码更加简练优美。代码编写效率上，Scala 优于 Java，但都会被编译成 JVM 字节码运行。因为有<strong>杀手级应用 Spark 和 Akka</strong>，所以 Scala 近来越来越受重视。ThoughtWorks 北京接手的 Scala 项目基本都是为了满足客户的数据处理需求。</p>

<p>基本数据类型和语法知识简单讲了一下，val 和 var 的区别需要注意，前者声明常量而后者声明变量。出于效率考虑，尽量避免在 Scala 程序中使用 var，记住<strong>不可变的可以共享，可变的不共享</strong>。</p>

<p>接下来是函数式编程的一些概念。</p>

<p>函数是独立存在的值，是<strong>类型为 ParamsType=&gt;ResultType 的变量</strong>，可以作为另一个函数的参数传入，而方法则是类中的行为，一般用 def 关键字声明，<strong>编译器某些场景下会自动把方法封装为一个函数对象来传递</strong>。</p>

<p>如下 add 即为一个函数。</p>

<p><code>scala add 函数
scala&gt; val add: Int =&gt; Int =&gt;Int = x =&gt; y =&gt; x + y
add: Int =&gt; (Int =&gt; Int) = &lt;function1&gt;
</code></p>

<p>一个函数接受另外一个函数作为参数，前者称为高阶函数。<strong>严格地说，在本例中，auto 并不是一个函数，而是方法，第三小节会作解释</strong>。</p>

<p>``` scala 高阶函数
scala&gt; def auto(x:Int, f:Int =&gt; Int) = f(x)
auto: (x: Int, f: Int =&gt; Int)Int</p>

<p>scala&gt; val add1:Int =&gt; Int = x =&gt; x + 1
add1: Int =&gt; Int = <function1></function1></p>

<p>scala&gt; add1(2)
res6: Int = 3</p>

<p>scala&gt; auto(3, add1)
res7: Int = 4
```</p>

<p>其中 auto 的返回值类型虽然没有在定义时给出，但 <strong>Scala 可以自动推断出返回值类型</strong>是 Int。auto 函数接收两个参数，x 是 Int 类型的值，f 是将 Int 映射为 Int 的函数，本例中 add1 就是一个满足条件的函数，它将输入参数加一返回。</p>

<p>Scala 中有很多语法糖，比如流式调用，</p>

<p>``` scala Scala 语法糖一
scala&gt; 0.to(10)
res9: scala.collection.immutable.Range.Inclusive = Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</p>

<p>scala&gt; 0 to 10
res10: scala.collection.immutable.Range.Inclusive = Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</p>

<p>scala&gt; 1+2
res11: Int = 3</p>

<p>scala&gt; 1.+(2)
res12: Int = 3</p>

<p>scala&gt; object o {def add1(x: Int): Int = { x + 1 } }
defined object o</p>

<p>scala&gt; o add1 0
res18: Int = 1
```</p>

<p>再比如 () 操作符默认调用对象的 apply 函数。</p>

<p>```scala Scala 语法糖二
scala&gt; object o {
     | def apply(name: String) = println(s”hi,$name”)
     | }
defined object o</p>

<p>scala&gt; o(“abc”)
hi,abc
```</p>

<p>更多语法糖介绍可以看之前提到的吴老师的培训材料。上例定义的 object 是 Scala 中的单例表达形式，类还是 class。</p>

<p>下面的例子是高阶函数进行判断。</p>

<p>```scala 高阶函数判断
scala&gt; def cond(x:Int, f: Int =&gt; Boolean):Boolean = { f(x) }
cond: (x: Int, f: Int =&gt; Boolean)Boolean</p>

<p>scala&gt; cond(9, x =&gt; x &gt; 8)
res3: Boolean = true</p>

<p>scala&gt; cond(9, _ &lt; 9)
res4: Boolean = false
```</p>

<p>但我们不希望把其中 x 的类型 Int 写死，要求具有泛化能力，可以写成模板形式如下。</p>

<p>```scala 类型泛化
scala&gt; def cond<a href="x:T, f:T =&gt; Boolean">T</a>: Boolean = f(x)
cond: <a href="x: T, f: T =&gt; Boolean">T</a>Boolean</p>

<p>scala&gt; cond(10, _ &lt; 9)</p>
<console>:9: error: missing parameter type for expanded function ((x$1) =&gt; x$1.$less(9))
              cond(10, _ &lt; 9)
                       ^

scala&gt; cond(10, (_:Int) &lt; 9)
res7: Boolean = false
```

其中 T 可以表示任意合理的类型。因为无法推断出数据类型，所以中间的运行结果出错，指定后运行正确。

接下来讲到 [柯里化](http://baike.baidu.com/view/2804134.htm?fr=aladdin)，也就是

<blockquote><p>把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p></blockquote>

上面的高阶函数的柯里化形式为

```scala 函数柯里化
scala&gt; def cond[T](x:T)(f:T =&gt; Boolean): Boolean = f(x)
cond: [T](x: T)(f: T =&gt; Boolean)Boolean
```

也就是将两个参数分别用括号括起来。函数柯里化有助于我们用函数生成函数，如下例。

```scala 用函数生成函数
scala&gt; val add: Int =&gt; Int =&gt; Int = x =&gt; y =&gt; x + y
add: Int =&gt; (Int =&gt; Int) = <function1>

scala&gt; val add1 = add(1)
add1: Int =&gt; Int = <function1>

scala&gt; add1(9)
res0: Int = 10
```

我们用加法函数生成了一个自增一的函数。

关于 callbyname，老师讲解的不详细，不过有一个好的 [参考资料](http://www.cnblogs.com/nixil/archive/2012/05/31/2528068.html) 。与之相对应的概念就是 callbyvalue，区别在于 callbyname 传入的是产生相应结果的过程的入口，而 callbyvalue 传入的是产生好的结果。

**【随堂练习一】**

补全函数，使得判断条件符合时打印 welcome，不符合则什么也不做。

```scala 随堂练习一
scala&gt; def cond[T,U](x:T)(p:T =&gt; Boolean)(f: () =&gt; U): Unit = ???
```

**解答：**

```scala 随堂练习一解答
scala&gt; def cond[T,U](x:T)(p:T =&gt; Boolean)(f: () =&gt; U): Unit = { if (p(x)) f() }
cond: [T, U](x: T)(p: T =&gt; Boolean)(f: () =&gt; U)Unit

scala&gt; cond("Hello World")(x =&gt; { x.contains("Hello") })(() =&gt; { println("Welcome")} )
Welcome
```

###第二小节

列表和元组介绍

```scala 列表和元组
scala&gt; List(1,2,3, "f")
res33: List[Any] = List(1, 2, 3, f)

scala&gt; (1,2,3, "f")
res35: (Int, Int, Int, String) = (1,2,3,f)

scala&gt; res35._2
res36: Int = 2

scala&gt; Tuple3(1,2, "a")
res37: (Int, Int, String) = (1,2,a)
```

**【随堂练习二】**

打印函数的运行时间。

```scala 随堂练习二
def recordTime[T](msg: String)(body: =&gt; T):T = ???
```

**解答：**

```scala 随堂练习二解答
import scala.compat.Platform

def recordTime[T](msg: String)(body: =&gt; T):T = {
	var t1 = Platform.currentTime
	var result = body
	var t2 = Platform.currentTime
	// println(msg + " spend time " + (t2 - t1).toString + " ms")
	println(s"$msg spend time ${t2 - t1} ms")
	result
}

def body() {
	(0 to 3000000).map(_.toLong).reduce(_ + _)
}

recordTime("List")(body)
```

思路是调用待测函数，记录运行结果作为返回值，过程中记录运行时间并输出。

定义一个函数变量，并查看其类型

```scala 函数变量定义，查看类型
scala&gt; val add: Int =&gt; Int =&gt; Int = x =&gt; y =&gt; x + y
add: Int =&gt; (Int =&gt; Int) = <function1>

scala&gt; :type add
Int =&gt; (Int =&gt; Int)
```

然而方法本身并不是一个值，也是没有类型的，需要加 _ 变成函数才能查看相应函数的类型。

```scala 方法转变为函数，查看类型
scala&gt; def add(x:Int)(y:Int) = x + y
add: (x: Int)(y: Int)Int

scala&gt; :type add
<console>:9: error: missing arguments for method add;
follow this method with `_' if you want to treat it as a partially applied function
              add
              ^

scala&gt; :type add _
Int =&gt; (Int =&gt; Int)
```

接下来吴老师讲了一个租借的实例，大概想法是打开文件流，内容供你使用，但关闭是由程序自身负责的。

```scala Scala 租借
scala&gt; import java.io.InputStream
import java.io.InputStream

scala&gt; def lend[T](in: InputStream)(f: InputStream =&gt; T):T = {
     | val res = f(in)
     | in.close()
     | res
     | }
lend: [T](in: java.io.InputStream)(f: java.io.InputStream =&gt; T)T
```

由此引申出，Scala 中 对 Java的调用是很容易的，反之则比较难，因为前者特性更加丰富。

**【随堂练习三】**

分级别打印 log，要求代码尽量精简。

**解答：**

```scala 随堂练习三解答
def log(level: String)(content: =&gt; String):Unit = {
	println(s"[$level]$content")
}

def debug(msg: =&gt; String) = log("Debug")(msg)
def info(msg: =&gt; String) = log("Info")(msg)
def warning(msg: =&gt; String) = log("Warning")(msg)
def error(msg: =&gt; String) = log("Error")(msg)
```

这里 log 可以被称为偏函数，运用了用函数生成函数的思路。

###第三小节

吴老师简要讲解了一下 Future，给出了一个示例，当然，关于多线程、高并发的处理还得自己深入去研究啦。

```scala Future 示例
scala&gt; import scala.concurrent.Future
import scala.concurrent.Future

scala&gt; import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.ExecutionContext.Implicits.global

scala&gt; val f = Future{ Thread.sleep(1000); println("Hello"); "hi" }
f: scala.concurrent.Future[String] = scala.concurrent.impl.Promise$DefaultPromise@464daa7d

scala&gt; Hello


scala&gt; f.value
res0: Option[scala.util.Try[String]] = Some(Success(hi))
```

Scala 中也可以使用闭包，示例如下。

```scala Scala 中的闭包
scala&gt; def makeIncreaser(start: Int, step: Int): () =&gt; () =&gt; Int = {
     | var count = start
     | () =&gt; {
     | count += step
     | () =&gt; count
     | }
     | }
makeIncreaser: (start: Int, step: Int)() =&gt; () =&gt; Int

scala&gt; makeIncreaser(0, 3)
res47: () =&gt; () =&gt; Int = <function0>

scala&gt; res47()
res48: () =&gt; Int = <function0>

scala&gt; res47()()
res49: Int = 6
```

上一小节最后的 log 函数是一个偏函数，还有一种函数形式是函数组合。所谓函数组合就是把多个函数联结在一起，共同完成一项任务。示例见随堂练习四。

**【随堂练习四】**

将字符串转为整数类型，并加一，函数声明如下。

```scala 随堂练习四
def str2Int(s:String): Int = s.toInt
def add1(x: Int): Int = x + 1
def addThen(f: String =&gt; Int)(g: Int =&gt; Int): String =&gt; Int = ???
```

**解答：**

```scala 随堂练习四解答
def str2Int(s:String): Int = s.toInt
def add1(x: Int): Int = x + 1
def addThen(f: String =&gt; Int)(g: Int =&gt; Int): String =&gt; Int = {
	x: String =&gt; add1(f(x))
}

val f = addThen(str2Int)(add1)
println(f("12"))
```

为了提高泛化能力，函数组合 andThen 的更一般形式如下

```scala andThen 泛化
scala&gt; def add1(x: Int) = x + 1
add1: (x: Int)Int

scala&gt; def addThen[A,B,C](f: A =&gt; B)(g: B =&gt; C): A =&gt; C = { x =&gt; g(f(x)) }
addThen: [A, B, C](f: A =&gt; B)(g: B =&gt; C)A =&gt; C

scala&gt; var f = addThen(add1)(add1)
f: Int =&gt; Int = <function1>

scala&gt; f(1)
res55: Int = 3
```

接下来讲解的是 pattern match，因为用过 Haskell，这里我再熟悉不过了。

用 pattern match 实现斐波那契数列

```scala 斐波那契数列
def fib(n: Int): Int = n match {
	case 0 =&gt; 0
	case 1 =&gt; 1
	case _ =&gt; fib(n-2) + fib(n-1)
}

println(fib(5))
```

用 pattern match 实现过滤器

```scala 实现 Filter
def filter[A](l: List[A], p: A =&gt; Boolean): List[A] = l match {
	case Nil =&gt; Nil
	case x :: xs =&gt; {
		if (p(x))
			x :: filter(xs, p)
		else
			filter(xs, p)
	}
}

def fil(x: Int): Boolean = { x &lt; 5 }

val result = filter((0 to 9).toList, fil)
result.foreach(println)
```

用 pattern match 实现快速排序

```scala 快速排序
def quicksort(xs: List[Int]): List[Int] = {
	xs match {
		case Nil =&gt; Nil
		case x :: Nil =&gt; xs
		case pivot :: tail =&gt; 
			val (low, high) = tail.partition(_ &lt; pivot)
			quicksort(low) ::: pivot :: quicksort(high)
	}
}

val randoms = (0 to 20).map(_ =&gt; scala.util.Random.nextInt(100)).toList
val sorted = quicksort(randoms)
randoms.foreach(n =&gt; (print(n), print(" ")))
println()
sorted.foreach(n =&gt; (print(n), print(" ")))
```

###第四小节

最后一小节讲得比较杂，吴老师用到了很多他自己培训材料上的内容。**因为对 Scala 了解尚浅，所以很多内容由于理解不深也不方便复述，比如 case class、Monads、Scalaz、Akka 相关**。

本节简要举例讲解了一下 Scala 中的面向对象。引入了 Trait（特质），类似于 Java 中的接口，不过可以定义方法。Scala 有自己的判别机制识别多重继承中的方法冲突。

```scala Scala 面向对象
scala&gt; trait Fly {def fly() = println("fly...") }
defined trait Fly

scala&gt; trait Eat {def eat() = println("eat...") }
defined trait Eat

scala&gt; class Duck extends Fly with Eat
defined class Duck

scala&gt; new Duck
res1: Duck = Duck@5511e6b9

scala&gt; res1.eat
eat...

scala&gt; res1.fly
fly...

scala&gt; trait Fly2 {def fly() = println("fly2...") }
defined trait Fly2

scala&gt; class Bird extends Fly with Fly2
<console>:11: error: class Bird inherits conflicting members:
  method fly in trait Fly of type ()Unit  and
  method fly in trait Fly2 of type ()Unit
(Note: this can be resolved by declaring an override in class Bird.)
       class Bird extends Fly with Fly2
             ^

scala&gt; class Bird extends Fly2
defined class Bird

scala&gt; class Duck extends Bird with Fly {
     | override def fly() = super.fly()
     | }
defined class Duck

scala&gt; new Duck
res4: Duck = Duck@8a10ea2

scala&gt; res4.fly
fly...
```

**【随堂练习五】**

实现 Some 泛型的乘法计算，一种方法是，

```scala 随堂练习五
scala&gt; for {
     | v1 &lt;- opt1
     | v2 &lt;- opt2
     | } yield v1 * v2
```

现请用 flatMap 实现乘法计算。

**解答：**

```scala 随堂练习五解答
opt1.flatMap(v1 =&gt; opt2.map(v2 =&gt; v1 * v2))
```

###学习材料

这次培训里了解的很多概念只能算是听了个热闹，之后还得通过阅读大量的学习资料来加深理解。**特别是着手写这篇博客的时候，真的是边查资料边写，有些内容一时半会儿搞不懂就暂时不写了**……

除[官方文档](http://docs.scala-lang.org/)，从大家的交流中可以整理出如下资料

- [《Programming in Scala : A Comprehensive Step-by-step Guide, 2nd Edition》](http://book.douban.com/subject/6050104/)
- [《Scala for the Impatient》](http://book.douban.com/subject/7070564/)，中译本为[《快学 Scala》](http://www.douban.com/link2/?url=http%3A%2F%2Fbook.douban.com%2Fsubject%2F19971952%2F&amp;query=%E5%BF%AB%E5%AD%A6scala&amp;cat_id=1001&amp;type=search&amp;pos=0)
- [Learning Scalaz](http://eed3si9n.com/learning-scalaz/index.html)
- [Effective Scala](http://twitter.github.io/effectivescala/)
- [Scala School](http://twitter.github.io/scala_school/index.html)
- [Scala 函数式编程原理公开课](https://www.coursera.org/course/progfun)

##写在最后

晚上六点钟从国华大厦走出来，筋疲力竭，大脑既充实又麻木。一群码农在一个小屋子里一起学习了九个小时，码农的工作很辛苦，码农大多单身，码农经常熬夜加班、长黑眼圈，码农一般秃顶、蓬头垢面，码农善于自嘲（但请外人不要嘲笑某个个人是码农），那么问题来了，怎么还有这么多人要做码农？

我自己的回答是两个词，`热爱` 与 `分享`。**热爱让你心笃定，分享让你不孤单**。不能代表码农整体，但我相信一起学了九个小时的小伙伴们应该会同意我的看法。

唉，一个培训能引发自己这样的感想也是够够儿了，再写就矫情了。
</console></function1></function0></function0></console></function1></function1></function1></console>
]]></content>
  </entry>
  
</feed>
