<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 工作效率 | Blog of 太极儒]]></title>
  <link href="http://frank19900731.github.io/blog/category/gong-zuo-xiao-lu/atom.xml" rel="self"/>
  <link href="http://frank19900731.github.io/"/>
  <updated>2014-11-13T22:04:45+08:00</updated>
  <id>http://frank19900731.github.io/</id>
  <author>
    <name><![CDATA[Frank Song]]></name>
    <email><![CDATA[scr_0731@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一个工具控的效率观]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/13/yi-ge-gong-ju-kong-de-xiao-lu-guan/"/>
    <updated>2014-11-13T15:49:04+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/13/yi-ge-gong-ju-kong-de-xiao-lu-guan</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">时间轴</a>    <ul>
      <li><a href="#section-2">2014年5月12日</a></li>
      <li><a href="#section-3">2014年6月3日补充</a></li>
      <li><a href="#section-4">2014年6月20日补充</a></li>
      <li><a href="#section-5">2014年6月21日补充</a></li>
      <li><a href="#section-6">2014年8月17日补充</a></li>
      <li><a href="#section-7">2014年8月21日补充</a></li>
      <li><a href="#section-8">2014年8月24日补充</a></li>
      <li><a href="#section-9">2014年8月27日补充</a></li>
      <li><a href="#section-10">2014年8月29日补充</a></li>
      <li><a href="#section-11">2014年10月13日补充</a></li>
      <li><a href="#section-12">2014年10月29日补充</a></li>
      <li><a href="#section-13">2014年11月8日补充</a></li>
    </ul>
  </li>
</ul>

<!-- excerpt start -->

<h2 id="section">前言</h2>

<p><strong>这是一篇在不断更新中的文章，主要用于记录我在学习工作过程中为解决效率瓶颈而发掘的软件工具，以及该工具的使用体验和配套的工作方式。</strong></p>

<ul>
  <li><code>何为工具控？</code> 在使用 MacBook Pro 的近两年时间里，自己大大小小“使用”过超过1000款软件，常驻笔记本里的大概有700款，每周都会有添加删除，详细列表见 <a href="http://blog.sina.com.cn/s/blog_64ac3ab10101f4it.html">这篇文章</a>。“使用”的含义可就多了，可能是常用以至于开机自启动，可能是专门用于某项用途，也可能只是摸过、了解功能和适用场景。这么多软件，管理上主要使用 QuickSilver（因为自己最早用的就是这个，虽然现在大家更多提到的是 Alfred）。我觉得自己还担不起拜物教的名号，顶多是个实用主义者和收藏强迫症。工具对我的意义有两点，<strong>其一是提供了外界刺激，让我内在的学习动力有了平稳释放的渠道，比如记录美感刺激、时间规划刺激、任务消除刺激，其二是让我有了记录成长历程的手段，解放了大脑</strong>。</li>
  <li><code>工具如何提高效率？</code>
    <ul>
      <li>加速知识记录、知识分享、知识利用的过程，质量也得到保障；</li>
      <li>时间规划清晰合理，帮助自己应对纷繁复杂的事务和对象；</li>
      <li>通常，工具是手脚的延伸，而这篇文章里将要提到的软件工具则是主要是感官和记忆的延伸，让大脑做更有意义的事情，也就是思考。</li>
    </ul>
  </li>
  <li><code>为什么是 Mac？</code> 当然可以不是 Mac，只是这篇文章里的很多软件在别的操作系统上是没有的。Mac 在<strong>易用性</strong>（比如系统的升级，软件的安装卸载，强悍的 trackpad）的角度来看是最佳的，优秀的图形界面和基于 UNIX 的操作系统也算是在 Windows 和 Linux 之间取得了良好的折中，适用于科研工作者和程序猿（最近走访的一些企业要么是全 Mac，要么是 Mac 比例在提升），而 MacBook Air 的时尚感与轻便性（索尼的本感觉也有这样的特性）则赢得了白领、女性的青睐。其他方面的话不好评价优劣，毕竟我们大多数人对于 Windows和Linux的掌握也只是皮毛，别人在 Windows 下效率比你在 Mac 下高也是很正常的，因人而异。我不是果吹，但还是有一个比较矫情的想法，那就是我总感觉<strong>在 Mac 上是我在工作，而在 Windows 上是工在做我</strong>。</li>
</ul>

<p>现在 MacBook 已然不是高枝上的凤凰了，其他厂商的笔记本价格与 MacBook 持平或更贵的有很多，强烈建议有换电脑打算的时候给予考虑。有钱把手机换成 iPhone 6、6+，还不如攒个 MacBook，个人感觉性价比更高，<strong>壕请忽略我的话</strong>。</p>

<!-- excerpt end -->

<h2 id="section-1">时间轴</h2>

<h3 id="section-2">2014年5月12日</h3>

<p>最近这段时间使用Ulysses真是如有神助，</p>

<ul>
  <li>Markdown书写；</li>
  <li>层次清晰分明，非常方便组织思路，文字有魂不零碎；</li>
  <li>输出格式丰富，主题模板也很赞，直接看原稿就已经很舒服了；</li>
  <li>界面清爽，全屏模式酷炫；</li>
  <li>Typewriter 模式，写作代入感强；</li>
  <li>支持版本保存，功能相当不鸡肋；</li>
  <li>支持过滤器，虽然自己还没有用过；</li>
  <li>可以附加笔记、图片、关键词和协作目标，有助于搜索，也可以作为效率上的督促。</li>
</ul>

<p>不足之处在于，不能够编辑公式，代码段比较简单，也不能输入表格。</p>

<p>正在使用的有助效率提升的软件梳理</p>

<ul>
  <li><code>OmniFocus</code> GTD 工具，配合 iCalendar 使用爽歪歪，功能暂时掌握不全，但不耽误基本使用。</li>
  <li><code>Evernote</code> 大有被取代之势，重要性在降低，记录一些零七碎八的事情。</li>
  <li><code>FocusMask</code> 效率新贵，提高自身工作时注意力！！！</li>
  <li><code>Papers</code> 支持文献阅读、批注与引用的好工具，可以和 iOS 设备同步。</li>
  <li><code>Eggscellent</code> 番茄工作法，分段限时完成工作，把自己<strong>从无截止时间估计的低效率工作状态中拉出来</strong>。</li>
  <li><code>Timeline 3D</code> 制作高逼格的时间计划表。</li>
  <li><code>Ulysses</code> 出色的写作软件，之前说过，废话不表。</li>
</ul>

<p>期待日后更多的发现。</p>

<h3 id="section-3">2014年6月3日补充</h3>

<ul>
  <li><code>Pocket</code> 极佳的网页保存待查工具，有 Mac、iOS 客户端以及 Chrome 插件，<strong>特别适用于记录问题解决过程中所查询的重要网页资料，省得要保留大量标签页或者来回翻找浏览历史</strong>。</li>
  <li><code>Wunderlist</code> OmniFocus 的精细化补充，跨平台通用。</li>
</ul>

<h3 id="section-4">2014年6月20日补充</h3>

<p>ICML、实习接踵而至，是时候 Papers（读 Paper）以及 Ulysses（会议记录，每日总结）发挥作用的时候了。最近要<strong>规范化记录的方式方法</strong>，让自己在暑假里高效运转起来。</p>

<h3 id="section-5">2014年6月21日补充</h3>

<p>今天被 Ulysses 坑到了，软件无响应，强制关闭，重新打开后部分文件夹和文件顺序错乱、名称显示错误，今后一定要<strong>注意备份</strong>。</p>

<h3 id="section-6">2014年8月17日补充</h3>

<p>Ulysses 虽然非常强大，但是有些事情做得还不是那么好，比如表格上不如 Numbers，而涉及到复杂计算和图表，Numbers 又不如 Excel。</p>

<p>最近调试 ODPS 的过程中发现，还是需要 Numbers 做记录，才能够使得每一个步骤清晰明确，每一个对比结果记录可靠。</p>

<h3 id="section-7">2014年8月21日补充</h3>

<p>目前个人效率存在的三大瓶颈</p>

<ul>
  <li><strong>资料碎片化，需要跳跃式阅读的时候寻址消耗大</strong>；</li>
  <li><strong>项目繁多，接头人、需求、目标、工期预计等需即时管理</strong>；</li>
  <li><strong>文档管理体系亟待完善，不能沿用文件夹模式</strong>。</li>
</ul>

<p>Ulysses 搜索功能还很弱（注：当时系统还是装在机械硬盘上，后来在光驱位加了一块 1T 的 SSD 后，那都不是事儿了），要打造 Ulysses 周边生态环境。</p>

<ul>
  <li><code>Producteev</code> 可以创建 Network 和 Project，适合多项目跟踪，界面美观，可定制项丰富，满足多人协作需求。</li>
  <li><code>iDocument</code> 可导入本地文件夹，也可以维护一个iDocument自身的目录，保存相关的文件，提供标签查找。</li>
  <li><code>OneNote</code> 富文本、交互式文本定制，可以保存图片、生成表格、插入文件，排版布局方便，是对 Ulysses 的有益补充。</li>
  <li><code>mediawiki</code> 网页版 wiki，常见于某些实验室的网站，优点是其索引、链接能力，便于分享，还可以输入表格、公式，大大弥补了 Ulysses 的不足。</li>
</ul>

<h3 id="section-8">2014年8月24日补充</h3>

<p>补充使用体验</p>

<ul>
  <li><code>Producteev</code> 评论功能很赞，可以存储事件相关的命令行、网页链接、文件等，使得在众多事情的切换中保持脑袋不乱。</li>
  <li><code>iDocument</code> 界面很棒，今后零散的微博文件分享也有方法保存啦！每一个文件都要打好 tag，方便搜索查找，目前 iDocument 还不支持文件的内容搜索，可以用 EasyFind 实现。</li>
  <li><code>mediawiki</code> 从这两天的经验看，Ulysses 里面经常翻阅的东西就要考虑写到 mediawiki 中了，作为个人知识库的 cache。最最最重要的是，<strong>有效解决了诸如 Ulysses、Evernote 等笔记软件中笔记间无法加链接的问题</strong>。</li>
</ul>

<h3 id="section-9">2014年8月27日补充</h3>

<ul>
  <li><code>Octopress</code> 用法见 <a href="http://frank19900731.github.io/blog/2014/08/24/wo-de-di-yi-pian-octopress-bo-ke/">此篇博客</a>，配置见 <a href="http://frank19900731.github.io/blog/2014/10/16/octopress-gai-zao-ji-lu/">此篇博客</a>。养成知识输出与分享的习惯，争取让自己的博客小有名气。</li>
  <li><code>Byword</code> 考察了不下十款 Mac 下的 Markdown 编辑器，最终敲定此软件。非常棒的界面设计，写起来很带感的说，段落聚焦（Paragraph Focus）的功能尤赞，专注写作的不二之选，Typewritter 模式也可用，支持字体的自定义，用于 Octopress 写作。</li>
</ul>

<h3 id="section-10">2014年8月29日补充</h3>

<ul>
  <li><code>Dash</code> API大全，程序员必备，从诞生伊始就开始关注，一直用到现在，作为一个收藏强迫症患者当然全部下载，<strong>光是索引文件就有40多G</strong>，但是心里满满的踏实感。支持代码片段存储，且在 Dash 开启时，支持在代码编辑器中使用缩写替换，问题在于没有办法进行云同步。</li>
  <li><code>Gistify</code> 这是 gist 的比较好的 Mac 客户端，缺点是不能指定文件名和Description，优点是创建后自动生成的 url 在剪贴板里，可以到网页上进行修改。</li>
  <li><code>PopClip</code> 万金油，插件丰富强大，功能在不断完善。</li>
</ul>

<h3 id="section-11">2014年10月13日补充</h3>

<ul>
  <li><code>Caffeinated</code> RSS阅读器，虽然还有这排版上的一些问题，但是其优雅的展示效果还是令我不能舍弃。最近花了大力气整理了各方面的RSS资源，希望能够养成此类阅读习惯，将碎片化的时间以及之前浪费在游戏等方面的时间充分利用起来。此外，<strong>这还相当于一个优质博客集合的入口，比起让这些链接沉睡在浏览器收藏夹里要好很多</strong>。</li>
</ul>

<h3 id="section-12">2014年10月29日补充</h3>

<ul>
  <li><code>SketchBookPro</code> <strong>配合 Wacom 手写输入板，记录公式快快哒</strong>。</li>
</ul>

<h3 id="section-13">2014年11月8日补充</h3>

<ul>
  <li><code>Notebooks</code> 较好的三列组织形式，支持 Markdown 语言，是较好的写书工具。</li>
  <li><code>Gitbook</code> 类似于 pandoc，支持丰富格式导出，比如 epub、mobi、pdf、网页版，特别是网页版会有较好的传播价值。</li>
  <li><code>Daum Equation Editor</code> Latex 公式书写利器，方便博客写作。</li>
  <li><code>花瓣网（Chrome插件）</code> 图片采集神器，非常有于前端积累，<strong>给图片的高效保存提供了较完美的解决方案</strong>。</li>
</ul>

<p><strong>未完待续</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的时间管理经验与工具分享]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/27/wo-de-shi-jian-guan-li-jing-yan-yu-gong-ju-fen-xiang/"/>
    <updated>2014-10-27T10:01:58+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/27/wo-de-shi-jian-guan-li-jing-yan-yu-gong-ju-fen-xiang</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">引子</a></li>
  <li><a href="#section-1">第一式：安排好你知道将要发生的</a></li>
  <li><a href="#section-2">第二式：建立消息队列</a></li>
  <li><a href="#section-3">第三式：记录你的灵感</a></li>
  <li><a href="#section-4">第四式：建立等待队列</a></li>
  <li><a href="#section-5">第五式：建立拖延事件队列</a></li>
  <li><a href="#section-6">第六式：创建富消息</a></li>
  <li><a href="#section-7">第七式：日常任务定量化</a></li>
  <li><a href="#section-8">时间管理的其它贴士</a></li>
  <li><a href="#section-9">总结</a></li>
  <li><a href="#section-10">附录</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">引子</h2>

<p>前一段时间写的<a href="http://frank19900731.github.io/blog/2014/10/23/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang/">《我的知识管理经验与工具分享》</a>（<a href="http://frank19900731.github.io/wx/2014-10-23-wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang.html">移动版</a>）一文发布后得到了不错的反响，自己倍受鼓舞，以至于这两天自己做着做着事情都会不自主的笑出来……特别是分享到微信朋友圈后，有众位同学朋友的热心支持，才使得拙作得以被展现在更多人的面前。不得不承认，社交网络给知识分享提供了太多的可能，除此以外自己觉得还有两点很关键</p>

<ul>
  <li><code>写什么</code> 分享生活工作中所思所想，不要无病呻吟、无信息量；</li>
  <li><code>怎么写</code> 尽量还原最真实的想法（人们在回忆时容易把时隔已久的困难淡化甚至扭转过来，也就是用结果重绘过程，姑且称为自我粉饰倾向吧）。</li>
</ul>

<p>我会始终坚守这两点原则进行博客写作。自己也不是什么成功人士，只是想记录分享一下自身在人生动荡的年代（从校园到社会）里头脑中的真实想法，<strong>欢迎大家提出各种意见建议</strong>。</p>

<p>一通感想之后就谈一谈自己关于时间管理的一点想法，<strong>共七式，附赠心法</strong>。对，<strong>七</strong>确实是我凑出来的，为了便于理解就得条条款款系统化嘛。我也不是学院派，没读过时间管理的书籍，都是在实践中发现问题再想解决方案的。</p>

<!-- excerpt end -->

<h2 id="section-1">第一式：安排好你知道将要发生的</h2>

<p>组会每周一次，笔试/面试安排在X月X日，大牛讲座在X月X日……这些事项一般都可以提前至少一天知道，将它们详细记录在电子日历（Google Calender）或者 GTD（Getting Things Done） 工具中，包括起止时间、项目归属、地点、要见的人、要带的东西（2B铅笔、准考证之类的）等。所使用的工具最好是PC端和移动端可同步的，前一天晚上录入事项，之后在移动端查看、标记完成。</p>

<p>GTD 源于一本书 <a href="http://book.douban.com/subject/1316569/">Getting Things Done: The Art of Stress-Free Productivity</a>。没看过原书，不过从豆瓣的这篇 <a href="http://book.douban.com/review/1930909/">GTD 心法</a> 介绍来看，有不少理念我们都在平时有意无意的实践着。大家公认的一款与原书理念匹配的 GTD 软件是 OmniFocus，入门稍复杂，只能用于苹果系列产品。大家使用自己趁手的工具就成，我的体会是再牛逼的工具也无法解决你所有的时间管理需求。</p>

<p>另，推荐一个非常知名的时间管理方面的博客——<a href="http://www.mifengtd.cn/">褪墨</a>，虽然我平时不怎么看……原因是我觉得工具和方法都是给人服务的，痴迷于工具和方法的研究有点买椟还珠的意味，把握一个度就好。</p>

<h2 id="section-2">第二式：建立消息队列</h2>

<p>有些事情你只有当天才知道将要发生，区别于 GTD 工具中记录的你提早知道的<strong>离线数据</strong>，我们可以定制一个消息队列，存入当天得到的<strong>在线数据</strong>，用这两套数据指导当天的工作。消息队列的主要考量因素是便捷性，录入一定要迅速，当然，也有跨平台同步的需求。我选择轻量级的 To Do List 工具中的 Wunderlist，主要利用到其创建任务列表、创建任务和给任务加星标的功能。</p>

<p>我把<strong>在线数据</strong>分为<code>紧急确定</code>、<code>普通未定</code>两类：</p>

<ul>
  <li><code>紧急确定</code> 如发现牙膏快用完了得买去或老板通知你下周的组会你来讲，我会仅向消息队列中记录事项名称，必要时再加入时间地点等信息，当天必须完成的事项加星标以作区别。当我遇到空闲，或者到了睡前要总结并安排今后工作的时候，我就会<strong>将积累到消息队列里的任务转移到 GTD 工具中</strong>，录入尽量详细的信息。可能有两个问题
    <ul>
      <li><code>都转移么？</code> 我觉得买牙膏就不录入了吧，消息队列侧重紧急，而 GTD 侧重重要，<a href="http://baike.baidu.com/view/6303330.htm?fr=aladdin">紧急和重要的四象限分析</a> 已是老生常谈；</li>
      <li><code>在消息队列里已经完成的任务还要转移么？</code> 我觉得还是很有必要的，在 GTD 工具中完整地、原生态地保留工作记录，方便回顾总结，特别是领导让你写个报告什么的，可好使了。一个经典场景是，<strong>当我回顾这一周的工作，我印象中已经发生了大半个月的事情其实就发生在本周二</strong>，记忆偏差实在是大，不记不行啊。每天坚持写工作日记可能耽误时间、不实用，但什么都不记也不合适，还是要找到一个<strong>前进</strong>和<strong>存档</strong>的平衡点。</li>
    </ul>
  </li>
</ul>

<div></div>

<ul>
  <li><code>普通未定</code> 比如你在碎片化阅读的过程中看到一项自己感兴趣的技术或一本众人称赞的书，让你立刻就去学习阅读有点不太可能，但仅仅将他们记录到笔记中（包括收藏啦，@我的印象笔记啦，复制粘贴啦）或者只记到脑子里，那没过两天就忘了这茬儿了，不要低估自己喜新厌旧的能力哦。我的做法是在 Wunderlist 里建一个<strong>慢消息队列，冷处理但不是不处理</strong>。队列中的每一项就是个技术名或者书名之类的。这个列表的事项是不急于转移到 GTD 工具里的，因为随便挑其中一个出来可能都是项目量级而非任务量级，甚至需要一点调研规划。比如你打算学学 hadoop 框架，得先找点儿资料、论坛什么的看看，大致掌握它的学习路径然后量化到你的 GTD 工具里。可能的问题是
    <ul>
      <li><code>记在慢消息队列和记笔记里不还是一样么？</code> 嗯，也差不多，如果你在笔记里专辟一篇记录这些东西的话。重点在于把它们聚在一起，而不是分散记录。</li>
    </ul>
  </li>
</ul>

<h2 id="section-3">第三式：记录你的灵感</h2>

<p>灵感这词儿有点夸大，不是牛顿被苹果砸了产生的那种，只是突然想明白了一个问题或者产生了一个自认为有价值的想法。比如这篇文章不少内容就是站地铁里发呆的时候寻思出来的。</p>

<p>如果你的灵感比较简短，那 Wunderlist 还是一个不错的选择，创建一个任务列表专门记录。一定要想到了就尽快掏手机记，不然一会儿的状态就是，我刚想的是什么来着？</p>

<p>如果你的灵感来的跟泄洪一样，那就赶紧用录音软件记录吧，当然如果是搞设计的，需要的就是绘图软件。多媒体笔记软件挺多的，印象中还有专门以记录灵感为卖点的。等到有时间整理灵感的时候，就有两种可能</p>

<ul>
  <li>删了，当我没说过；</li>
  <li><strong>转换成任务，实现它！</strong></li>
</ul>

<h2 id="section-4">第四式：建立等待队列</h2>

<p>等待队列想要解决的问题是，有些任务虽然我标记完成，但我仍旧需要跟踪反馈，比如我申请了XX公司的职位，但该公司要过好久才能给我确认通知及笔试通知。我的做法是原任务标记完成后，如果该任务还有待后续确认，那就在等待队列（也是在 Wunderlist 里建）里添加一条。<strong>等不到就催一催，等到了就结束</strong>。码农朋友们可能笑了，这个想法确实是受 <a href="http://baike.baidu.com/view/185289.htm?fr=aladdin">异步调用</a> 的启发。</p>

<p>还是那句话，没什么特别之处，只要把所有需要等待的任务放在一起，效果就是<strong>脑子不乱了，焦虑感也减轻了，刷起新任务更有劲儿了</strong>。</p>

<h2 id="section-5">第五式：建立拖延事件队列</h2>

<p>有时间管理工具使用经验的童鞋可能都有过类似的经历，就是有一些顽固的任务，你总倾向于把它从今天拖到明天，从这周拖到下周，依次类拖。大家都爱打任务列表里的小怪，不想打大 boss。这是一个<strong>世界性难题</strong>，我们会因此变得情绪焦虑、产生挫败感。</p>

<p>我的方法，按照故事的尿性，相信大家都能猜得出来，就是把这些顽固的任务聚在一起……剔除那些不重要的，因为拖延也可能是分配任务不合理导致的。剩下的要像狠心老板压榨员工一样强迫自己逐渐完成，人们不总是喜欢说最大的对手其是自己嘛。</p>

<p>关于拖延事件的解决，自己也还在探索中，方法还包括在 <a href="#section-7">第七式：日常任务定量化</a> 规定<strong>每日完成拖延事件队列中的一条</strong>。那么你的问题来了，<strong>拖延事件队列中还会有一些压箱底的拖延事件怎么办</strong>？</p>

<p>我也没什么好办法，一方面自己不是拖延症研究专家，相信也没有哪个专家敢说自己有完美的解决方案，另一方面，还是很看主观因素的，我就时常用大锤的 <code>走向人生巅峰</code> 这句话激励自己，拖延这副熊样是走不到巅峰的。实在不行，你就采用随机化的方法，通过掷骰子来选择做先解决哪个拖延事件吧。</p>

<h2 id="section-6">第六式：创建富消息</h2>

<p>有些任务光光记录时间、地点、人物是不够滴，还可能会包含附加资源，比如填写就业推荐表的任务需要表，申请某公司职位的任务需要网址。我期望任务的资源就近安放，点选任务就会出现。</p>

<p>前面提到的 OmniFocus 可以给任务添加笔记，但无法添加附件，而 Wunderlist 则通过评论的方式实现了这一功能。Wunderlist 起初也是没有这项功能的，更早的时候我选择用 Producteev 建立富消息，这也是一款功能和界面都让人舒服的软件，收费版和免费版对于我们小用户来说基本无差。</p>

<p>我想举例说明一下富消息的使用。</p>

<p>算法当中需要调参数，于是我们会运行多组程序对比结果。普通做法是将每次运行的结果记录到笔记或Excel里，容易记混乱，导致抓狂；高档做法是让程序生成一个总的报表，需要额外编程费时间。富消息可以为我们提供一个折中的解决方案，方法是你创建一个任务，任务名是程序id、参数与启动时间之类的，评论里可以记录运行结束的时间、运行结果、log文件、效果截图等等。妥妥儿的不会乱，还便于查看对比。需要补充的一点是，因为可能云同步，所以机密的东西就不要乱传了。</p>

<p>我估计软件设计者当初也没太想到这种用法，嘿嘿。</p>

<h2 id="section-7">第七式：日常任务定量化</h2>

<p>自己的日常任务包括，逛逛技术博客收藏点儿文章、关注周边的讲座信息、整理时间规划、完成知识输出等。既然每天都要做，那还是放在一起列成单子好一些，每天标定完成度。具体有三点好处</p>

<ul>
  <li>目标明确，是<strong>你知道要做，而不是想到了再做</strong>；</li>
  <li>积累属于自己的“大数据”，监控自己的工作状态；</li>
  <li>有助于培养长期习惯。</li>
</ul>

<p>这个想法很普通，不过真正促成我做成这件事是因为我玩了一款网页游戏。这类网页游戏都会有日常任务，比如打某个副本5次啦，招募一个新武将啦之类的，完成后给你相应的奖励。我边玩边想，你这家伙对游戏里的任务这么上心，每天都是高完成率，就不能自己给自己建立一个类似的任务列表，每天保质保量的完成么。于是我给自己建了第一张清单，分专业学习、身体健康、情绪控制、时间规划、人际拓展、新事物接触六大板块，每类有子项，总计100分。</p>

<p><strong>清单可以打印出来，也可以做成可勾选的 Excel 文件的形式</strong>。现在这种清单方式是我主要的<strong>日回顾</strong>手段。</p>

<h2 id="section-8">时间管理的其它贴士</h2>

<p>除了以上七式，还有几条感触想与大家分享。</p>

<ul>
  <li><code>注意时间的权重不均匀性</code> 典型的例子是 <a href="http://book.douban.com/subject/1083762/">《人类群星闪耀时》</a> 这本书里的故事，当然，普通人很难经历这些啦。我们身边的一个例子是，<strong>平时可以打游戏，考前必须抱佛脚，考试就那么几天，刷——，说没就没啊</strong>。</li>
  <li><code>记录周报、月报</code> 暑假里养成了记周报、月报的习惯，作用不仅仅是梳理工作，也让阶段性规划管理成为可能。平时，任务创建大多是被动的（别人口述的、邮件里通知的等等）、预告式的，而在阶段性规划中我们可以主动为下周或者下个月制定发展计划与侧重点，比如把对 hadoop 的学习穿插在下月日程中，月末总结验收。</li>
  <li><code>注意运用纸笔</code> 大部分（不敢说得太绝对呀）效率管理工具都是纸笔的延伸，在有些问题上，纸笔或许就是最高效的解决方案。</li>
</ul>

<h2 id="section-9">总结</h2>

<p>本文总结了时间管理七式，分别是</p>

<ul>
  <li>第一式：安排好你知道将要发生的</li>
  <li>第二式：建立消息队列</li>
  <li>第三式：记录你的灵感</li>
  <li>第四式：建立等待队列</li>
  <li>第五式：建立拖延事件队列</li>
  <li>第六式：创建富消息</li>
  <li>第七式：日常任务定量化</li>
</ul>

<p>有招式还要有心法口诀，那就是</p>

<ul>
  <li>遇到问题不抱怨，抽象出问题的本质，思考解决问题的手段；</li>
  <li>把相似的问题集中起来，合力解决；</li>
  <li>多给自己提需求，不要安于现状。</li>
</ul>

<p>阅读本文的亲，</p>

<p>如果你正在做类似的事情，那我很高兴自己的想法得到了印证；</p>

<p>如果对你产生了一点启发，我也很高兴自己对他人起到帮助作用；</p>

<p>如果你觉得自己有更好的办法，请不吝赐教，乐意为你传播你的想法~</p>

<h2 id="section-10">附录</h2>

<p>本文提到的软件图标合集</p>

<p><a href="/img/post/2014-10/2.png" class="img-up" title="OmniFocus"><img class="imgcenter-no-shadow" src="/img/post/2014-10/2.png" width="20%" title="OmniFocus" ></a>
<a href="/img/post/2014-10/14.png" class="img-up" title="Wunderlist"><img class="imgcenter-no-shadow" src="/img/post/2014-10/14.png" width="20%" title="Wunderlist" ></a>
<a href="/img/post/2014-10/12.png" class="img-up" title="Producteev"><img class="imgcenter-no-shadow" src="/img/post/2014-10/12.png" width="20%" title="Producteev" ></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的知识管理经验与工具分享]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/23/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang/"/>
    <updated>2014-10-23T18:21:07+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/23/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">你的知识问题</a></li>
  <li><a href="#section-2">知识学习</a></li>
  <li><a href="#section-3">知识保存</a></li>
  <li><a href="#section-4">知识分享</a></li>
  <li><a href="#section-5">总结</a></li>
  <li><a href="#section-6">附录</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">前言</h2>

<p>最近我阅读了田志刚先生撰写的<a href="http://book.douban.com/subject/4630664/">《你的知识需要管理》</a>一书。这本书出版于2010年，虽然当中介绍的工具已跟不上现代的潮流，但书中的观点和例证还是发人深省，特别是第一章 <code>你的知识问题</code>。</p>

<p>阅读过程中，我感觉书中部分内容和自己在实践中摸索出的一些观点和方法很契合，于是萌生了将自己的一点知识管理经验整理并分享的念头，这就是撰写本文的初衷。</p>

<p>在你开始正式阅读之前，我先给出一点阅读忠告：</p>

<p>就我个人阅读此类文章或书籍的经验来看，如果不是有过类似的实践经验或者当前正面临类似的问题，一般不太容易产生共鸣，反而会觉得是个大杂烩，或者尝试后觉得根本不好用嘛。对于这样的想法，我想举两个例子：</p>

<ul>
  <li>高考结束后，有些小朋友（主要是学习成绩不理想的）找我学习经验，当时自己苦口婆心讲得口干舌燥，不过效果远不如我所想。后来意识到，每个人都是一个个性化的系统，经验移植很困难，自己摸索出来的才是最合适的。</li>
  <li><code>我知道很多的道理，却依然过不好这一生</code>  这句话曾风行一时，我觉得这是乱呻吟。首先道理是要放到情境里学习的（读高中的时候我对《你的知识需要管理》应该会是无感的，但快研究生毕业、要找工作了就不同了），听懂了、记住了有毛线用；其次，道理是死、人心要活，很多事情是反复博弈的或者可以举一反三，榆木脑袋才会一生都过不好（但往往是没过完一生的年轻人喜欢说这种话，彰显个性么？不懂……）；道理没给你带来好生活，你在抱怨道理、抱怨告诉你道理的人之余，是不是还得想想自身可能存在的问题呢？</li>
</ul>

<p>我觉得写这篇文章的目的不在于告诉读者你现在应该马上行动起来不怎么做、要怎么做，只是单纯的经验和工具分享，也是我阶段性的自我总结。如果有一天当你遇到和我类似的场景与问题或受困于自身的发展瓶颈时，而你隐约记得曾经有篇文章的内容可以为你所用，我所介绍的经验和工具或许就可以帮上你的忙，<strong>最最起码你会知道，有一个家伙曾经跟你一样，你不是个案</strong>……</p>

<!-- excerpt end -->

<h2 id="section-1">你的知识问题</h2>

<p>首先要区分容易混淆的三个概念，“数据”、“信息”和“知识”。在原书作者看来：</p>

<ul>
  <li>数据：单纯的数据不表示意思，比如39；</li>
  <li>信息：赋予数据以环境，比如就诊时向医生提供信息，体温是39摄氏度；</li>
  <li>知识：<strong>经过实践证明的，可以用来决策和行动的信息</strong>，比如医生运用自己的医学知识和行医经验在我提供的体温信息的基础上判定我发烧了。</li>
</ul>

<p>下面这段是我结合书中例子自行补充的……</p>

<p><strong>根据体温判定是否发烧的知识是怎么来的呢？</strong></p>

<p>医学课本里可能会写人在不同年龄段的正常体温范围是多少。</p>

<p><strong>那第一个写课本的人是怎么知道的呢？</strong></p>

<p>可能是根据更早的医生的行医经验总结得来的。</p>

<p><strong>那没有体温计的时候是怎么判定发烧的呢？</strong></p>

<p>大概是用手心触摸额头与其他人对比。</p>

<p>我其实是想通过以上三个问题表达我对于知识积累脉络的认识：从<strong>定性知识</strong>（触摸额头）到<strong>定量知识</strong>（计量体温），从<strong>隐性知识</strong>（行医经验）到<strong>显性知识</strong>（医学课本）。</p>

<p><strong>定量是科学化、标准化的目标，显性知识有利于知识的积累与传播</strong>。</p>

<p>不过需要补充两点：</p>

<ol>
  <li>某些知识领域，定量化很难做，比如名厨的经验。厨艺知识的实践性很强，知识的获取有赖于自我摸索与师徒传承。“鸡肉500g，黄瓜丁300g，鸡精5g……”，这只是给大众看的菜谱。而且也不同于化学实验，即便同样的菜谱不同的人做味道也会不同。以“鱼香肉丝”、“宫保鸡丁”为例，似乎各有各的做法。食材的选择，火候的把握，都是要靠年头磨练的，而磨练的最终结果往往是“此中有真意，欲辨已忘言”。</li>
  <li>显性知识的建立并不是终结，而是要在分享传播中、在生产实践中与更多人的隐性知识做结合，得到这些隐性知识的印证、修正与补充。</li>
</ol>

<p>从《你的知识需要管理》一书的例子中可以看出，作者其实将定量化的知识（已成书面的理论或判据）默认为显性知识，将定性化的知识（在人们头脑中俗语或经验）默认为隐性知识，所以下面的讨论仅区分隐性知识和显性知识。</p>

<p>书中提到了隐性知识、显性知识的四种转换形式：</p>

<ul>
  <li><strong>隐性知识到显性知识</strong>
    <ul>
      <li>印堂发黑的视觉认识 到 真实测量印堂亮度并规定判定为黑的阈值；</li>
    </ul>
  </li>
  <li><strong>显性知识到隐性知识</strong>
    <ul>
      <li>阅读书籍，引发自己的思考；</li>
    </ul>
  </li>
  <li><strong>显性知识到显性知识</strong>
    <ul>
      <li>阅读书籍，引发自己的思考，并写出读书笔记；</li>
    </ul>
  </li>
  <li><strong>隐性知识到隐性知识</strong>
    <ul>
      <li>师徒相承。</li>
    </ul>
  </li>
</ul>

<p>俗话说，“社会是最好的大学，生活/工作是最好的老师”，只要是一个有心人，每天能够获得的隐性知识量还是挺大的，但是极少有人坚持做显性化的工作。有的时候我们会给自己找理由说就是懒得写，真实原因是我们的理解还不够、表达能力也不够；有的时候我们会抱怨这东西我也会呀，就是运气不好没那个命，真实原因你会不会和别人知不知道你会是两回事儿，你的知识憋着就你自己知道，还比不上粪便能憋出沼气来……</p>

<p>类似的问题不一而足，这些问题就是书中所说的“你的知识问题”。</p>

<p>本书要和我们探讨的，就是作为一个<strong>信息时代的知识工作者</strong>，我们如何能够做好以下五点：</p>

<ul>
  <li><code>知识学习</code>  学什么，学习目标的聚焦，学习资源的搜集，学习的方法，保持终身学习不落伍； </li>
  <li><code>知识保存</code>  有规划、成系统的保存，便于查询；</li>
  <li><code>知识分享</code>  让别人知道你知道；</li>
  <li><code>知识利用</code>  与项目或任务结合，申请专利，知识产品化；</li>
  <li><code>知识创新</code>  需求是创新的动力，思维导图。</li>
</ul>

<p>限于社会阅历与工作经验，自己仅在前三点有些经验和工具可以分享，后两点乏善可陈。</p>

<h2 id="section-2">知识学习</h2>

<p>本科前期，受高中学习思维的影响，自己买了大量的技术书籍阅读（常去中关村图书大厦，逛亚马逊），也曾沉溺于 <a href="http://blog.sina.com.cn/s/blog_64ac3ab10100gg4u.html">谷歌搜索的奇技淫巧</a> 。后来了解了一些 ftp 站点（比如清华大学自动化系）和 P2P 软件（比如汉魅，堪比快播啊……），再到 Corsair、MeePo，下载了不少课程资源和书籍，一度陷入了大误区（见 <a href="#section-3">知识保存</a>）。</p>

<p>目前，自己的技术学习主要依赖技术官网的 Tutorial、网络教程、博客和问答网站，从BT站点（北邮人、六维空间）下载的视频教程以及公开课（Cousera、果壳MOOC、网易公开课、腾讯大讲堂），偶尔会买觉得有收藏价值的书籍。</p>

<p>需要补充的是，对于一些好的博客站点和专业知识网站，<strong>仅仅是加入收藏夹只会让它们死在那里</strong>，最好能够获取到该网站的 RSS 订阅链接，加入到你自己的 RSS 阅读器中。大多数此类网站都是有订阅链接的，因为它们是利用现成的框架搭建的，比如 Wordpress，Flask，Jekyll (Octopress) 等。即便页面上隐藏了 RSS 图标，你也能从网页源代码里搜索出来（比如搜 rss 等关键字）。实在不行可以试一试 <code>http://yu-ming/atom.xml</code> 或者 <code>http://yu-ming/rss.xml</code> 或者 <code>http://yu-ming/feed</code> 这样的链接，也许就是该网站的订阅链接。</p>

<p>推荐一款名为 Caffeinated 的阅读器，虽然称不上完美，但阅读界面还算是可选择软件当中最赏心悦目的。</p>

<p><a href="/img/post/2014-10/3.jpg" class="img-up" title="Caffeinated 界面展示"><img class="imgcenter" src="/img/post/2014-10/3.jpg" width="80%" title="Caffeinated 界面展示" ></a></p>

<p>我的初始 RSS 源来自这份 <a href="http://www.zhihu.com/question/19580096">知乎问答</a>，之后就是在浏览网页的过程中发现、补充。有人对于这种碎片化阅读模式表示担忧，认为不如系统性的学习。我觉得大家说的都有道理，就想和一把稀泥。打个比方说吧，大部头的书籍像鲜花，培育费心费力，成长不易，长成则一枝独秀；碎片化阅读像水稻、棉花，大量培养，普普通通，满足基本需求。<strong>专与博，辩不出孰优孰劣，只要选择有利于现阶段自身成长的途径就可以了</strong>。</p>

<p>我觉得由对碎片化阅读的质疑引申出的一个问题更值得我们思考，那就是<strong>你到底想要学什么</strong>？</p>

<p>《你的知识需要管理》提到，</p>

<blockquote>
  <p>学习任何领域的知识必须达到一定的深度，否则你的知识就是常识。</p>

  <p>……</p>

  <p>由于现在知识更新周期很短，知识和经验在快速贬值，今天的知识可能明天就成为常识，如果你仅仅学某领域知识的基础部分，那么这些只是无法给你带来“超级价值”和竞争优势。</p>
</blockquote>

<p>书中还引用了俞敏洪的一句话，</p>

<blockquote>
  <p>要引人敬意，就要研究一个非常专业的领域，在那个领域中，你是最顶尖的，至少是中国前10名，这样无论任何时候你都有话说，有事情可做。</p>
</blockquote>

<p>看了之后顿时觉得后脊背发凉，关于“专”自己做的还远远、远远、远远不够，由于没啥成功经验，这块儿也不多说了……</p>

<p>目前自己使用比较多的知识获取工具还有：</p>

<ul>
  <li>鲜果阅读：和 RSS 类似，只是有移动 App，更适合碎片化时间；</li>
  <li>微博：微博不提供知识，但能帮你了解到你所在领域的那拨人在关心什么，他们给出的链接相当于是筛选过的知识；</li>
  <li>小酱油：也不提供知识，但能帮你汇集身边的讲座、招聘、比赛等活动信息，告诉你你身边将要发生的知识分享。</li>
</ul>

<p>此外，我已经卸载了微博、今日头条，感觉信息质量越来越低了。在今日头条的新闻评论中，你往往能找到这么一类评论：“小便（编）你过来，我保证不打死你”。</p>

<p>最后值得一提的视频自媒体，我每周必跟的是《晓松奇谈》（原《晓说》）、《罗辑思维》和《鸿观》，都是周五更新，所以周五简直像节日。我的观看习惯是记笔记并查阅相关或延伸的资料，结合自己的历史观、价值观做一些评注。</p>

<p>积累下来的效果就是，聊天的谈资多了，还帮我回答了一道面试题。</p>

<p>在百度的一轮面试中，面试官本应面我技术，但只见他看着我的简历直摇头，叹了一口气对我说，你说我问你点儿啥好？没给我吓尿了，我说都行吧，你先问。他说，你跟我说说现在大街上的垃圾箱都有啥问题？我心想新闻里好像说 <a href="http://www.oschina.net/news/41616/in-head-hunting-big-data-may-not-be-such-a-big-deal">Google现在都不面这种题</a> 了吧，但还是列了五六点说了。他又问，要是你负责北京市所有垃圾箱的管理，你会怎么办？我心想，上周五刚看过《罗辑思维》（第二季第29期，《市场的广度》），介绍过一个德国公共厕所市场化改造的案例，直接可以拿来用啊。于是我就说可以在垃圾桶表面引入商业广告，明星示范效应 + 企业对自身形象的重视 + 商业投入与运作应该可以解决当前存在的一些问题吧。面试官听后可算不摆苦瓜脸了，他说，“看来你还挺聪明，知识面挺广”。我心说，“叫你不看《罗辑思维》，真好唬啊……”。</p>

<h2 id="section-3">知识保存</h2>

<p>知识保存就是将隐性知识或显性知识转化为显性知识的过程。</p>

<p>我猜想，在知识保存方面，人们走过的弯路是大致相同的。一开始是大量文件下载、网页收藏以及 Word 复制粘贴，之后会考虑使用云盘或者云笔记。</p>

<p>就我自身而言，除非想在博文里分享文件，否则用云盘的机会不多，都是本地存储，建立 ftp 分享给身边的人。对于云笔记，自己很早就用过 Evernote，后来出了印象笔记，但越来越发现它不能满足自己所要记录内容的复杂性、分享需求以及格式定制灵活性，就逐渐放弃了。</p>

<p><strong>拿最简单的一条来说吧</strong>，印象笔记目录结构太扁平，只是笔记本+笔记本中的笔记。如果我想专门记给我妈妈的信，我要建一个笔记本，但我又想记给我女友的信，且不想弄混，我又得建一个笔记本。目录结构是</p>

<ul>
  <li>给妈妈的信</li>
  <li>给女友的信</li>
  <li>给二叔的信</li>
  <li>给三舅的信</li>
  <li>给隔壁老王的信</li>
</ul>

<p>我需要的是可定制目录逻辑的，比如</p>

<ul>
  <li>信件保存
    <ul>
      <li>给家人的信
        <ul>
          <li>妈妈
            <ul>
              <li>历史存档</li>
              <li>2014年</li>
            </ul>
          </li>
          <li>女友</li>
        </ul>
      </li>
      <li>给亲戚的信
        <ul>
          <li>二叔</li>
          <li>三舅</li>
        </ul>
      </li>
      <li>给邻居的信
        <ul>
          <li>隔壁老王</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>如果想达到这样的目的，我只能采用在磁盘自建目录、在目录里保存文件的土办法，如此一来我得在脑子里把目录存储起来，或者专门建一个文件存储目录索引。这样一来就完全丧失了印象笔记所能提供的资源整合能力和灵活机动性！</p>

<p>直到我了解了 Markdown，用上了 Ulysses，一切都有了质的飞跃。</p>

<p>当前我正在使用 Ulysses 撰写这篇文章，截图如下。</p>

<p><a href="/img/post/2014-10/4.jpg" class="img-up" title="Ulysses 界面展示"><img class="imgcenter" src="/img/post/2014-10/4.jpg" width="80%" title="Ulysses 界面展示" ></a></p>

<p>不用我多说，应该都能感觉到这种目录定制形式以及三列结构对于大规模写作有多大的好处了吧。如果说印象笔记能够做碎片积累、写文章，Ulysses完全可以写一本书好么。</p>

<p>Ulysses的其他好处在于支持丰富的导出格式，比如 PDF、Word、HTML 和电子书等，采用 Markdown 语言书写，格式与内容分离，由专门的文件指定。</p>

<p>最让我惊艳的是全屏模式，适于专心写作或者听报告的时候记笔记，如下图所示。</p>

<p><a href="/img/post/2014-10/5.jpg" class="img-up" title="Ulysses 全屏界面"><img class="imgcenter" src="/img/post/2014-10/5.jpg" width="80%" title="Ulysses 全屏界面" ></a></p>

<p>总而言之，在使用 Ulysses 的这五个多月（五月份开始）里，自己的工作习惯发生了很大的变化，特别是在知识输出方便，变得积极而高效。</p>

<p>当然，Ulysses 也不是那么完美的，它的同步性不好，只支持 iCloud 和 Daedalus，所以要注意内容的及时备份，不过也省得隐私泄露了。</p>

<p>虽然我不再使用印象笔记，但并不代表这不是一款好软件，只是它跟我的需求不符，而且我也在关注印象笔记新功能的添加。我对印象笔记可以创建公共笔记本的功能很喜欢，如果将来有多人协作的需要可能会选择，当然， Tower 等团队协作工具可能做的更全面。</p>

<p>知识保存了就是用来查的，Ulysses 提供了全局查找、指定文件夹查找以及文章内查找的功能，算是对查找功能的一个全方位实现，但问题还是在使用过程中暴露出来了。我需要频繁查找分布在若干文件里的重要文字或数据，要么我得记住它们在哪个文件夹，要么我得记住查询条件。在网站架构里，这部分数据是要放到 cache 里的，那么什么工具可以成为我的 cache 呢？此时 mediawiki 出现在了我的脑海，虽然我以前一直不知道应该怎么将它嵌入我的工作里。</p>

<p>我主要将一些常用指令、数据路径以及脚本代码写到 mediawiki 当中，需要时在浏览器中拷贝即可。</p>

<p><a href="/img/post/2014-10/6.jpg" class="img-up" title="mediawiki 界面展示"><img class="imgcenter" src="/img/post/2014-10/6.jpg" width="80%" title="mediawiki 界面展示" ></a></p>

<p>如果我们能将每天遇到的知识都转化文字记录那固然是好的，但事实上我们没有这样的精力。对于一些文档和大量的网页，需要有工具帮助我们保存并方便日后查找。其实我的要求也不高，就是必须可以添加标签，从个人经验来看，<strong>不加标签的资源只能成为你知识库里的垃圾</strong>。</p>

<p>对于文档，我选择 iDocument Plus，界面如下</p>

<p><a href="/img/post/2014-10/7.jpg" class="img-up" title="iDocument Plus 界面展示"><img class="imgcenter" src="/img/post/2014-10/7.jpg" width="80%" title="iDocument Plus 界面展示" ></a></p>

<p>对于网页，我选择 Pocket，有好用的 Chrome Extension 和客户端，跨各类平台共享。</p>

<p>此外还有代码片段需要管理，可以使用 Gistify 或者 Dash。有 Mac 下开发经验的人应该不用我介绍 Dash 有多牛逼，记得刚出这款软件的时候内购价格18元，现在在 App Store 卖20刀。这款软件整合了 150 多种编程语言的 API，还有丰富的 Stack Overflow 问答资源的离线版本，同时支持 <a href="https://xuelangzf.github.io/10-13-2014/html2dash.html">用户定制文档</a>。</p>

<p><a href="/img/post/2014-10/8.jpg" class="img-up" title="Dash 界面展示"><img class="imgcenter" src="/img/post/2014-10/8.jpg" width="80%" title="Dash 界面展示" ></a></p>

<h2 id="section-4">知识分享</h2>

<p>知识分享的重要意义，引用书中的两段话来说明。</p>

<blockquote>
  <p>不在于你认识什么人，而在于什么人认识你；不在于什么人影响了你，而在于你影响了什么人。</p>
</blockquote>

<p>还记得那位热衷于给青年人写信的导师么，还记得《XX之巅》系列丛书的作者么，他们都通过这种知识分享传播的方式在中国年轻人心目中、在业界给自己赢得了受尊敬的地位，而这是埋头苦干、成果丰硕但不善包装的学问家们所没法比拟的。当然，并不是说通过知识分享扩大影响力是一件沽名钓誉的事情，我觉得满足两点条件就还是好的：<strong>保证你肚子里有干货；保证不大量夹带私货</strong>。</p>

<blockquote>
  <p>你必须有意识地去做这些显性化的工作，必须有意识地让别人能明白你知道的道理。如果你养成了这个习惯，它会促进你更深入地探究问题的本源，提升自己对知识的掌握程度。如果养成了有意识地显性化你的知识的习惯，你就会发现自己对问题的了解越来越深入，从而摆脱了许多一知半解的状态，提高了个人的知识竞争力。</p>
</blockquote>

<p>正如我们之前说到的，你不是懒得去写，而是你根本写不出来、写不对。杨绛先生回忆钱钟书先生读书都要读多遍、记笔记，每次都有<strong>新收获</strong>，更何况我辈。听懂了、看懂了和真懂了是很不一样的，真懂了和真会用又很不一样。问问自己，看懂了别人的算法和代码，事后让你重写一遍，能否保证运行正确；看懂了别人的公式推导，事后让你重推一遍，能否保证不卡壳。从自身的经验来看，强迫自己将重要知识、复杂知识显性化并分享出来是一件很有益的工作，最起码你得担心你写错了被别人笑话吧。</p>

<p>总的来说，我认为<strong>知识分享之于普通人，类似于学术论文之于学者</strong>。</p>

<p>最后，书中提醒我们在分享的过程中要注意的一点是</p>

<blockquote>
  <p>不管面对什么样的共享对象，有一个共同的原则，那就是在知识共享中不要故意炫耀和卖弄自己的知识，要尽力用平实、通俗的语言去传递你的知识，尤其不要满口或者满篇都夹杂着外语和专业术语，从知识管理的角度看，这是一种对于知识掌握不够深入的表现，同时也会引起大部分人的反感。</p>
</blockquote>

<p>除了软件名称，这篇文章没怎么用英文……</p>

<p>我的知识分享主要通过博客，前期是 <a href="http://blog.sina.cn/frank19900731">新浪博客</a>，现在在使用 Github 上搭建的 Octopress 博客。</p>

<p>好处显而易见，博客可以保存在本地，以 Markdown 格式书写，界面自由定制，想要实现的功能都可以自行添加，比如中文搜索、输入公式、定制代码块等等。</p>

<p>Markdown 输入工具我采用的是 Byword，能够满足我这个软件外观控，以下是本文编辑界面的展示。</p>

<p><a href="/img/post/2014-10/9.jpg" class="img-up" title="Byword 界面展示"><img class="imgcenter" src="/img/post/2014-10/9.jpg" width="80%" title="Byword 界面展示" ></a></p>

<p>要强调的是，<strong>搭建博客什么的都不是什么难事，最难的就是坚持写作、坚持分享</strong>，立存此照，作为督促。</p>

<p>Markdown 的优势还不止体现在这里，我们完全可以用它来写书。比如 <a href="https://github.com/jgm/pandoc">pandoc</a> ，<a href="https://github.com/marchtea/mdtogh">mdtogf</a>。这两个工具功能当然强大，定制灵活，不过还是不适合小白用户。再推荐一款 <a href="https://www.gitbook.io/">Gitbook</a>，有客户端可供使用。</p>

<p>除了写博客，知识分享的途径还有很多，比如到百度知道、知乎等综合性问答网站或者 Stack Overflow 等专业问答网站上回答问题，再比如到专业论坛中和别人讨论交流（不是帝吧那种的……）。在这个过程中，相信你的影响力、表达能力和专业水平都会有提高的。</p>

<h2 id="section-5">总结</h2>

<p>本文是在《你的知识需要管理》的启发下写成的，主要分享了自己在知识管理方面的经验教训和现阶段使用的工具。希望给大家的知识管理提供一个思路和借鉴，如果对你产生了些许实质性的帮助那我不胜荣幸。要点归纳如下：</p>

<ul>
  <li>“数据”、“信息”和“知识”有很大差别，我们要做的不仅仅是走马观花的关注信息，更要将遇到的有价值的信息、知识内化为自己的隐性知识，并在输出为显性知识的过程中加深理解，甚至有所创见；</li>
  <li>碎片化学习和系统学习并重，更重要的是明白自己要学什么，什么才是自己的核心竞争力，持续深入的挖掘下去，否则你的知识将很快变成人们的常识；</li>
  <li>知识分享的良好习惯能够督促我们进行知识显性化输出，提高专业水平、扩大影响力，让自身实力体现出应有的价值。</li>
</ul>

<h2 id="section-6">附录</h2>

<p>本文提到的部分软件的图标集合</p>

<p>知识学习</p>

<p><a href="/img/post/2014-10/5.png" class="img-up" title="Caffeinated"><img class="imgcenter-no-shadow" src="/img/post/2014-10/5.png" width="20%" title="Caffeinated" ></a>
<a href="/img/post/2014-10/17.png" class="img-up" title="小酱油"><img class="imgcenter-no-shadow" src="/img/post/2014-10/17.png" width="20%" title="小酱油" ></a></p>

<p>知识保存</p>

<p><a href="/img/post/2014-10/7.png" class="img-up" title="Evernote"><img class="imgcenter-no-shadow" src="/img/post/2014-10/7.png" width="20%" title="Evernote" ></a>
<a href="/img/post/2014-10/13.png" class="img-up" title="Ulysses"><img class="imgcenter-no-shadow" src="/img/post/2014-10/13.png" width="20%" title="Ulysses" ></a>
<a href="/img/post/2014-10/16.png" class="img-up" title="MediaWiki"><img class="imgcenter-no-shadow" src="/img/post/2014-10/16.png" width="20%" title="MediaWiki" ></a></p>

<p><a href="/img/post/2014-10/15.png" class="img-up" title="iDocument Plus"><img class="imgcenter-no-shadow" src="/img/post/2014-10/15.png" width="20%" title="iDocument Plus" ></a>
<a href="/img/post/2014-10/6.png" class="img-up" title="Dash"><img class="imgcenter-no-shadow" src="/img/post/2014-10/6.png" width="20%" title="Dash" ></a>
<a href="/img/post/2014-10/10.png" class="img-up" title="Pocket"><img class="imgcenter-no-shadow" src="/img/post/2014-10/10.png" width="20%" title="Pocket" ></a></p>

<p>知识分享</p>

<p><a href="/img/post/2014-10/4.png" class="img-up" title="Byword"><img class="imgcenter-no-shadow" src="/img/post/2014-10/4.png" width="20%" title="Byword" ></a>
<a href="/img/post/2014-10/18.png" class="img-up" title="Octopress"><img class="imgcenter-no-shadow" src="/img/post/2014-10/18.png" width="20%" title="Octopress" ></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[提高效率与情趣的九种程序工具推荐]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/16/ti-gao-xiao-lu-yu-qing-qu-de-jiu-chong-cheng-xu-gong-ju-tui-jian/"/>
    <updated>2014-10-16T17:28:06+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/16/ti-gao-xiao-lu-yu-qing-qu-de-jiu-chong-cheng-xu-gong-ju-tui-jian</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">选题目的</a></li>
  <li><a href="#section-1">介绍角度</a></li>
  <li><a href="#section-2">代码开发篇</a>    <ul>
      <li><a href="#section-3">引言</a></li>
      <li><a href="#git">Git</a></li>
      <li><a href="#shell-script">Shell Script</a></li>
    </ul>
  </li>
  <li><a href="#check-whether-already-online">check whether already online</a></li>
  <li><a href="#handle-result">handle result</a></li>
  <li><a href="#display-flux-infomation">display flux infomation</a></li>
  <li><a href="#display-flux-information-and-online-time">display flux information and online time</a></li>
  <li><a href="#handle-result-1">handle result</a>    <ul>
      <li><a href="#section-4">#</a></li>
      <li><a href="#section-5">文档整理篇</a>        <ul>
          <li><a href="#section-6">引言</a></li>
          <li><a href="#markdown">Markdown</a></li>
          <li><a href="#octopress">Octopress</a></li>
          <li><a href="#knitr">knitr</a></li>
        </ul>
      </li>
      <li><a href="#section-7">自我展示篇</a>        <ul>
          <li><a href="#tpp2">tpp</a></li>
          <li><a href="#jmpressjs">jmpress.js</a></li>
        </ul>
      </li>
      <li><a href="#section-8">数据展示篇</a>        <ul>
          <li><a href="#shiny">Shiny</a></li>
          <li><a href="#d3">D3</a></li>
        </ul>
      </li>
      <li><a href="#section-9">其它工具</a></li>
      <li><a href="#section-10">总结</a></li>
    </ul>
  </li>
</ul>

<!-- excerpt start -->
<p>自己平时爱鼓捣些工程上的小玩意儿，在一次实验室的Paper Reading上给大家分享了自己的一点体会，给大家推荐了几款能够提高工作效率与生活情趣的工具，整理于此。</p>

<p>想了解更多有趣的工具，请持续关注 <a href="http://frank19900731.github.io/category/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/">工作效率</a> 分类。</p>

<h2 id="section">选题目的</h2>

<ul>
  <li>把自己知道的，用过的，感觉有意思或有用的分享给大家，实现自己的知识梳理与输出</li>
  <li>让大家在遇到类似应用场景的时候知道有某种工具是很适用的</li>
  <li>督促大家掌握某种工具（比如 git，shell，markdown ），进而提升工作效率，也可以以工具为杠杆撬动更多的资源</li>
</ul>

<h2 id="section-1">介绍角度</h2>
<ul>
  <li>类型</li>
  <li>星级评定（1星-5星）
    <ul>
      <li>入门难度</li>
      <li>实用性</li>
      <li>装X效果</li>
    </ul>
  </li>
  <li>描述</li>
  <li>适用场合</li>
  <li>实例说明</li>
  <li>参考资料</li>
</ul>

<!-- excerpt end -->

<h2 id="section-2">代码开发篇</h2>

<h3 id="section-3">引言</h3>
<p>摘自<a href="http://www.oschina.net/question/817257_112066">《程序员装逼指南》</a></p>

<p><blockquote><p>千万不要说自己是做Java或者.Net的，一下子就屌丝了。</p></p><p><p>PHP也不行，Python稍微有点烂大街，但还是明显要强过前几个。</p></p><p><p>剩下的可以说自己是做Ruby的，但不要做Rails，说Sinatra。</p></p><p><p>Go、Erlang、Clojure、Scala能给80分，你要是说会个Lisp就是85分，Haskell直接捅到90分，但是千万注意，一定要说只是精通Haskell，没事喜欢研究Haskell，千万不要说干这个的。</p></p><p><p>最后再拽出来一个Prolog就成仙了。</p></p><p><p>如果怕被继续追问就说自己做C++的，就是放了个大烟雾弹，让对面也猜不透究竟有几斤几两。</p></p><p><p>C是什么？不知道。</p></blockquote></p>

<p>以上顺序列举的编程语言（C、C++除外）学习难度增大，对逻辑思维能力要求提升，代码实现向人的思维靠拢。</p>

<p>TIOBE程序语言排行榜<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，2014年5月最新统计（括号内前一数值为排名，后一数值为占比）：</p>

<p>Java（2，16.907%）</p>

<p>.Net（C# 6，3.745%，VB.NET 11，1.264%，F# 13，1.030%）</p>

<p>PHP（7，3.386%） Python（8，3.057%）</p>

<p>Ruby（12，1.242%）</p>

<p>Go（31，0.423%） Erlang（47，0.236%） Clojure（65, -） Scala（35，0.331）</p>

<p>Lisp（16，0.967）</p>

<p>Haskell（40，0.281%）</p>

<p>Prolog（45，0.252%）</p>

<p>C++ （4，5.986%）</p>

<p>C （1，16.926%）</p>

<p>以上结果与《程序员装逼指南》中对编程语言的逼格划定大致接近。</p>

<p>至于C、C++，个人感觉，它们向来是程序员入门语言，使用的人也很多，但真正驾驭它们还是很难的。有兴趣请移步欣赏 <a href="http://v.youku.com/v_show/id_XNzEyMDU2NDYw.html">猿泡沫</a></p>

<p>更多有关程序语言的种类与它们之间的程序关联请见 <a href="http://exploringdata.github.io/vis/programming-languages-influence-network/">编程语言关系图</a>，这是一件优美的数据可视化作品，托管于Github。</p>

<p><a href="/img/post/2014-10/1.png" class="img-up" title="程序语言关系图"><img class="imgcenter" src="/img/post/2014-10/1.png" width="80%" title="程序语言关系图" ></a></p>

<p>扯远了，举例说明与人类语言、思维相近的编程语言：</p>

<ul>
  <li>Haskell</li>
</ul>

<p>Haskell号称“证明即程序，命题为类型”。</p>

<p>以下代码中，<code>[a | a &lt;- xs, a &lt;= x]</code> 是集合语言，<code>smallerSorted ++ [x] ++ biggerSorted</code> 蕴含了递归。</p>

<p><code>haskell Haskell 快速排序
quicksort :: (Ord a) =&gt; [a] -&gt; [a]   
quicksort [] = []   
quicksort (x:xs) =   
  let smallerSorted = quicksort [a | a &lt;- xs, a &lt;= x]  
      biggerSorted = quicksort [a | a &lt;- xs, a &gt; x]   
  in smallerSorted ++ [x] ++ biggerSorted
</code></p>

<ul>
  <li>Prolog</li>
</ul>

<p>人工智能中的演绎推理，谓词逻辑。</p>

<p><code>prolog Prolog 示例
human(kate).
human(bill).
likes(kate,bill).
friend(X,Y):-likes(X,Y),likes(Y,X).
</code></p>

<p><strong>引言讲了这么多，意义何在？</strong></p>

<ul>
  <li>茶余饭后的谈资；</li>
  <li>程序语言的设计也是一门很深的学问，流行的语言有自身的优势，小众的语言也有不俗的理念，多一些了解有助于我们认清程序语言——我们每天打交道的日常工具——的本质属性；</li>
  <li>程序语言是开源世界的钥匙。</li>
</ul>

<h3 id="git">Git</h3>

<p><strong>类型</strong>  ——  版本控制</p>

<p><strong>入门难度</strong>  ——  ★✩✩✩✩</p>

<p><strong>实用性</strong>  ——  ★★★★★</p>

<p><strong>装X效果</strong>  ——  ★★✩✩✩</p>

<p><strong>描述</strong></p>

<ul>
  <li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000">Git诞生的故事</a></li>
  <li>集中式（SVN为代表） vs 分布式（Git为代表）</li>
  <li>SVN与Git的区别与优劣争论有很多，不予详述，但Github着实具有很强的吸引力</li>
  <li>Github Education
    <ul>
      <li>Private空间免费使用</li>
      <li>教学使用
        <ul>
          <li>收发作业的平台</li>
          <li>自动测试</li>
        </ul>
      </li>
      <li>申请方式
        <ul>
          <li>个人名义：需要学校邮箱，立即审核通过，5个private项目</li>
          <li>组织名义：一周审批时间，可能不通过……</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Github 提供免费空间建站，如本站
    <ul>
      <li>稳定性强，小网站不太担心流量冲击</li>
    </ul>
  </li>
  <li>在自己的linux系统上搭建git服务器（gitosis），并安装Gitweb提供外部访问
    <ul>
      <li>适合小团队内部使用，比如实验室，但要注意备份！</li>
      <li>项目访问权限可控，网页上项目可见性可控</li>
    </ul>
  </li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>代码分享</li>
  <li>合作开发
    <ul>
      <li>版本控制</li>
      <li>冲突合并</li>
      <li>新功能添加</li>
      <li>Bug查找</li>
    </ul>
  </li>
</ul>

<p>详见参考资料中的实用教程。</p>

<p><strong>实例说明</strong></p>

<p>Github建站实例：<a href="http://gabrielecirulli.github.io/2048/">2048游戏</a></p>

<p>Gitweb实例：<a href="https://git-wip-us.apache.org/repos/asf?p=spark.git;a=summary">Spark</a></p>

<p><strong>参考资料</strong></p>

<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git实用教程</a></p>

<p><a href="http://wiki.ubuntu.org.cn/index.php?title=Git%E6%9C%8D%E5%8A%A1%E5%99%A8Gitosis%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE&amp;variant=zh-hans">Git服务器配置</a></p>

<h3 id="shell-script">Shell Script</h3>

<p><strong>类型</strong>  ——  文本处理，系统设置</p>

<p><strong>入门难度</strong>  ——  ★★✩✩✩</p>

<p><strong>实用性</strong>  ——  ★★★★★</p>

<p><strong>装X效果</strong>  ——  ★★★★✩</p>

<p><strong>描述</strong></p>

<ul>
  <li>Shell：操作系统中，提供访问内核所提供之服务的程序，比如终端（Terminal）。</li>
  <li>Bourne Again Shell (bash)
    <ul>
      <li>bash是GNU计划的一部分，用于基于GNU的系统如Linux。大多数的Linux都以bash作为缺省的shell。</li>
    </ul>
  </li>
  <li>Shell Scripts 书写与matlab脚本类似，使用变量、逻辑控制、linux命令等完成较为底层的操作
    <ul>
      <li>环境变量设置，如在hadoop设置中的运用</li>
      <li>文本处理，如网站log分析、天猫大赛数据处理</li>
      <li>复杂功能的集成与自动运行，如下文中tunet自动登录脚本</li>
    </ul>
  </li>
  <li>文本处理 awk/gawk sed</li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>文本数据（特别是有规范格式的）处理</li>
  <li>重复性劳动</li>
</ul>

<p><strong>实例说明</strong></p>

<p>tunet登录脚本（摘自网络），实测可用：</p>

<p>``` bash tunet 登录脚本 
#!/bin/bash
# your info’s username
uname=your account name
# your info’s password’s md5sum
pass=md5sum of your password 
####################################################
do_login() {
login_data=’username=’$uname’&amp;password=’$pass’&amp;drop=0&amp;type=1&amp;n=100’
check_data=’action=check_online’</p>

<h1 id="check-whether-already-online">check whether already online</h1>
<p>con=<code>curl -d $check_data -s http://net.tsinghua.edu.cn/cgi-bin/do_login</code></p>

<p>if [ -z $con ]; then
# start login
res=<code>curl -d $login_data -s http://net.tsinghua.edu.cn/cgi-bin/do_login</code></p>

<h1 id="handle-result">handle result</h1>
<p>pe=<code>echo $res | grep error</code>
if [ -z $pe ]; then
echo “Login Success!”
else
echo $pe
exit 0
fi</p>

<h1 id="display-flux-infomation">display flux infomation</h1>
<p>flux=<code>echo $res | awk -F ',' '{print $3}'</code>
a=$(($flux/1000000000))
b=$((($flux%1000000000)/100000000))
c=$((($flux%100000000)/10000000))
echo “Used Flux: “$a”.”$b$c”G.”</p>

<p>else
echo “Already Online!”</p>

<h1 id="display-flux-information-and-online-time">display flux information and online time</h1>
<p>flux=<code>echo $con | awk -F ',' '{print $3}'</code>
time=<code>echo $con | awk -F ',' '{print $5}'</code>
a=$(($flux/1000000000))
b=$((($flux%1000000000)/100000000))
c=$((($flux%100000000)/10000000))
h=$(($time/3600))
m=$(($(($time%3600))/60))
s=$(($(($time%3600))%60))
echo “Used Flux: “$a”.”$b$c”G, Online Time: “$h”:”$m”:”$s”.”
fi
}</p>

<p>do_logout() {
# start logout
res=<code>curl -s http://net.tsinghua.edu.cn/cgi-bin/do_logout</code></p>

<h1 id="handle-result-1">handle result</h1>
<p>if [ “$res” == “logout_ok” ]; then
echo “Logout Success!”
elif [ “$res” == “not_online_error” ]; then
echo “You’re not Online!”
else
echo “Operation Failed!”
fi
}</p>

<h6 id="section-4">#</h6>
<p>if [ “$1” == “login” ]; then
do_login
elif [ “$1” == “logout” ]; then
do_logout
else
echo “Usage: “$0” {login|logout}”
fi
```</p>

<p><strong>参考资料</strong></p>

<p>任意一本shell入门教程</p>

<h2 id="section-5">文档整理篇</h2>

<h3 id="section-6">引言</h3>

<p>摘自<a href="http://www.cnblogs.com/rollenholt/articles/2235713.html">《高级程序员装逼指南》</a></p>

<p><blockquote><p>在CSDN/ITeye/cnblogs这种地方写技术博客确实比在人人上写技术博客好多了</p></p><p><p>但是你要知道，大牛们都是有自己的个人网站的</p></p><p><p>而且，一个共同点是，他们的网站都是自己写的html（没有css）并且界面十分难看</p></p><p><p>整个网站散发着一种“我这的文章都很牛所以界面什么的都不重要”的气质</p></p><p><p>例如这个 <a href="http://xahlee.org/index.html" target="_blank">http://xahlee.org/index.html</a></p></blockquote></p>

<p><a href="/img/post/2014-10/3.png" class="img-up" title="李杀网截屏"><img class="imgcenter" src="/img/post/2014-10/3.png" width="70%" title="李杀网截屏" ></a></p>

<p>当然，用优美的外在包裹充实的内在，总还是更加让人赏心悦目的。</p>

<p><strong>这个引言的目的是……</strong></p>

<ul>
  <li>输出重要，积累重要，有个网站就更好了。</li>
</ul>

<h3 id="markdown">Markdown</h3>

<p><strong>类型</strong>  ——  微量级文本标记语言</p>

<p><strong>入门难度</strong>  ——  ★✩✩✩✩</p>

<p><strong>实用性</strong>  ——  ★★★★★</p>

<p><strong>装X效果</strong>  ——  ★★✩✩✩</p>

<p><strong>描述</strong></p>

<ul>
  <li>Evernote？有道笔记？XX笔记？
    <ul>
      <li>编辑复杂，小word</li>
      <li>先天不足，不是给科研人员用的，而是给大众记录用的，文字、图片、音频</li>
      <li>部分有偿使用，高级功能要收费</li>
      <li>分享方式单一</li>
    </ul>
  </li>
  <li>文档编辑类软件的一种趋势让人<strong>更专注于内容，而非格式</strong>，不必频繁在输入区和菜单工具栏之间切换</li>
  <li>语法简洁，容易学习（5分钟足够）</li>
  <li>导出格式丰富，latex，html，pdf，ebook，mobi……</li>
  <li><strong>样式丰富，内容与样式独立</strong>，由css文件及与之类似文件定制样式，称为主题</li>
  <li>扩展丰富
    <ul>
      <li>latex公式输入</li>
      <li>插入代码块 highlight.js</li>
      <li>……</li>
    </ul>
  </li>
  <li>较多在线编辑器可供使用，如<a href="https://www.zybuluo.com/mdeditor">作业部落</a>，Chrome插件 MaDe</li>
  <li>Github、StackOverflow、Google Code都支持</li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>快速写出有公式、有代码的笔记报告</li>
  <li>能够以较多方式分享自己的报告，特别是放在自己的个人主页上</li>
</ul>

<p><strong>实例说明</strong></p>

<p>本页面</p>

<p><strong>参考资料</strong></p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明</a></p>

<h3 id="octopress">Octopress</h3>

<p><strong>类型</strong>  ——  博客</p>

<p><strong>入门难度</strong>  ——  ★★★✩✩</p>

<p><strong>实用性</strong>  ——  ★★★✩✩</p>

<p><strong>装X效果</strong>  ——  ★★★★✩</p>

<p><strong>描述</strong></p>

<ul>
  <li><a href="http://blog.csdn.net/pongba/article/details/3896311">《[BetterExplained]为什么你应该（从现在开始就）写博客》</a></li>
  <li>Wordpress？ 摘自 <a href="http://www.tuicool.com/articles/rA7Bjq">从wordpress到octopress</a>
    <ul>
      <li>编辑环境复杂</li>
      <li>臃肿，累赘功能多</li>
      <li>定制性差</li>
      <li>过度依赖数据库，数据安全性低</li>
      <li>速度慢，优化门槛高</li>
      <li>迁移成本高</li>
    </ul>
  </li>
  <li>所需知识
    <ul>
      <li>ruby基础知识</li>
      <li>Git基本命令</li>
      <li>Github用法</li>
    </ul>
  </li>
  <li>基于Jekyll</li>
  <li><strong>纯静态</strong>，响应快</li>
  <li><strong>版本化管理</strong>，Word及其他笔记软件无法提供</li>
  <li><strong>不依赖数据库</strong>，Disqus、多说</li>
  <li><strong>定制容易，开源支持多</strong></li>
  <li><strong>支持Markdown</strong></li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>文章内容以文字图片居多，不需要视频音频或者华丽的动画效果</li>
</ul>

<p><strong>实例说明</strong></p>

<p>本博客</p>

<p><strong>参考资料</strong></p>

<p><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">Github搭建Octopress博客的方法</a></p>

<h3 id="knitr">knitr</h3>

<p><strong>类型</strong>  ——  自动化报告</p>

<p><strong>入门难度</strong>  ——  ★★★✩✩</p>

<p><strong>实用性</strong>  ——  ★★★★★</p>

<p><strong>装X效果</strong>  ——  ★★✩✩✩</p>

<p><strong>描述</strong></p>

<ul>
  <li>国人写的R包，出于对功能相近的 Sweave 的不满足</li>
  <li>代码与文档混编，编译时执行代码输出结果（数据、图片）
    <ul>
      <li><strong>数据可伪造，图形可拷贝，只有源代码是最可靠的</strong></li>
      <li>代码可以进行版本管理</li>
    </ul>
  </li>
  <li>文学化编程，Knuth</li>
  <li>支持 latex，markdown 等多种文档类型</li>
  <li><a href="http://ggplot2.org/">ggplot2</a> 的诱惑力
    <ul>
      <li>入门缓慢，功能强大</li>
    </ul>
  </li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>收取、检查作业</li>
  <li>写一份图文码并茂的报告</li>
</ul>

<p><strong>实例说明</strong></p>

<p><a href="http://www.rpubs.com/">RPubs</a></p>

<p><strong>参考资料</strong></p>

<p><a href="http://yihui.name/knitr/">knitr官网</a> 顺便说一句，这个官网就是用Octopress搭建的</p>

<h2 id="section-7">自我展示篇</h2>

<h3 id="tpp2">tpp<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3>

<p><strong>类型</strong>  ——  命令行展示</p>

<p><strong>入门难度</strong>  ——  ★✩✩✩✩</p>

<p><strong>实用性</strong>  ——  ★★✩✩✩</p>

<p><strong>装X效果</strong>  ——  ★★★★✩</p>

<p><strong>描述</strong></p>

<ul>
  <li>基于ncurses（字符终端处理库），ruby-ncurses，figlet（字符图）</li>
  <li>名称来源是PPT的逆向</li>
  <li>语法极易（1分钟？）</li>
  <li>支持中文</li>
  <li>支持导出latex、txt格式</li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>纯linux命令行下文档记录、演示</li>
</ul>

<p><strong>实例说明</strong></p>

<p><a href="http://songchengru.eicp.net/tpp/">展示效果</a> in Chrome Extension - Secure Shell</p>

<p><strong>参考资料</strong></p>

<p><a href="http://www.ngolde.de/tpp.html">官网</a></p>

<p><a href="https://github.com/chinageek/fun/tree/master/tpp">实例代码</a></p>

<p><a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=705965">字符编码 bug fix</a></p>

<h3 id="jmpressjs">jmpress.js</h3>

<p><strong>类型</strong>  ——  浏览器富动态效果展示</p>

<p><strong>入门难度</strong>  ——  ★★★★✩</p>

<p><strong>实用性</strong>  ——  ★★★✩✩</p>

<p><strong>装X效果</strong>  ——  ★★★★★</p>

<p><strong>描述</strong></p>

<ul>
  <li>非线性展示
    <ul>
      <li>一个页面</li>
      <li>区域间可跳跃</li>
      <li>位移、缩放与旋转</li>
      <li>揭示概念、事物间的复杂联系</li>
      <li>动态思维导图</li>
    </ul>
  </li>
  <li>Prezi vs jmpress.js
    <ul>
      <li>Adobe Flash &amp; Flex vs HTML5</li>
      <li>臃肿 vs 轻量级</li>
      <li>扩展受限（中文、字体等） vs 开源支持（大量js功能支持）</li>
      <li>所见即所得 vs 较复杂设计</li>
    </ul>
  </li>
  <li>impress.js 受Prezi启发，jmpress.js在其基础上进行了封装，成为jQuery插件
    <ul>
      <li>支持新版Chrome、Safari、Firefox，IE 10 poorly supported</li>
    </ul>
  </li>
  <li>所需知识
    <ul>
      <li>熟悉CSS3、Javascript</li>
    </ul>
  </li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>有趣的故事、新颖的观点，不仅仅是为了追求酷炫的过渡效果（TED talk）</li>
  <li>网站上的个性化介绍、流程展示</li>
</ul>

<p><strong>实例说明</strong></p>

<p><a href="http://songchengru.eicp.net/jmpress/ex1/">Demo</a></p>

<p><a href="http://andrewyuan.github.io/methodology.html#/init">巴西世界杯预测</a></p>

<p><strong>参考资料</strong></p>

<p><a href="https://github.com/jmpressjs/jmpress.js">Github 项目托管地址</a></p>

<h2 id="section-8">数据展示篇</h2>

<h3 id="shiny">Shiny</h3>

<p><strong>类型</strong>  ——  数据动态交互展示</p>

<p><strong>入门难度</strong>  ——  ★★★✩✩</p>

<p><strong>实用性</strong>  ——  ★★★★✩</p>

<p><strong>装X效果</strong>  ——  ★★★★✩</p>

<p><strong>描述</strong></p>

<ul>
  <li>Data visualization or data visualisation is a modern branch of descriptive statistics. It involves the creation and study of the visual representation of data, meaning “information that has been abstracted in some schematic form, including attributes or variables for the units of information”.  ——  摘自维基百科</li>
  <li>数据可视化工具种类繁多，网搜都是“XX种数据可视化工具推荐”
    <ul>
      <li>Online vs Desktop</li>
      <li>代码开发 vs 图形界面操作</li>
    </ul>
  </li>
  <li>属于 <a href="http://rdata.wicp.net/rstudio/">RStudio</a>  这一火热的开源项目</li>
  <li><strong>动态展示</strong>，以R的丰富资源为支撑
    <ul>
      <li><a href="http://rdata.wicp.net/shiny/imgsvd/">SVD实例</a></li>
      <li>自动生成HTML、CSS、Javascript，只需编写R代码</li>
      <li>申请项目空间 <a href="https://www.shinyapps.io/">Shiny app 空间</a></li>
    </ul>
  </li>
  <li>R最大的优势是：它是由统计学家们开发的。R最大的劣势是……它是由统计学家门开发的。—— Bo Cowgill
    <ul>
      <li>速度慢</li>
      <li>需要对R有了解</li>
    </ul>
  </li>
</ul>

<p><strong>适用场合</strong></p>

<ul>
  <li>简单的数据交互、模型演示</li>
</ul>

<p><strong>实例说明</strong></p>

<p><a href="http://rdata.wicp.net/shiny/">Shiny 例程</a></p>

<p><strong>参考资料</strong></p>

<p><a href="http://shiny.rstudio.com/">Shiny 官网</a></p>

<h3 id="d3">D3</h3>

<p><strong>类型</strong>  ——  数据静态展示</p>

<p><strong>入门难度</strong>  ——  ★★★★✩</p>

<p><strong>实用性</strong>  ——  ★★★★✩</p>

<p><strong>装X效果</strong>  ——  ★★★★★</p>

<p><strong>描述</strong></p>

<ul>
  <li>D3（Data Driven Documents），支持SVG渲染，图表类型丰富
    <ul>
      <li>数据绑定网页元素</li>
      <li>设置元素可视化属性</li>
      <li>元素变换与动态过渡</li>
    </ul>
  </li>
  <li>所需知识
    <ul>
      <li>jQuery</li>
      <li>CSS</li>
      <li>SVG</li>
      <li>数据可视化知识</li>
    </ul>
  </li>
  <li>浏览器兼容性好</li>
  <li>有多款基于D3开发的适用于不同展示对象的工具
    <ul>
      <li>Planetary.js 地理信息</li>
      <li>Ember Charts、 xCharts 图表库</li>
      <li>Richshaw 绘制时序图</li>
    </ul>
  </li>
  <li>BSD许可，适用于商业或非商业目的</li>
</ul>

<p><strong>适用场合</strong>
* 展示已有数据规律，且数据可以共享</p>

<p><strong>实例说明</strong></p>

<p><a href="https://github.com/mbostock/d3/wiki/Gallery">官方示例</a></p>

<p><a href="http://andrewyuan.github.io/EDAV-project.html">巴西世界杯预测</a></p>

<p><strong>参考资料</strong></p>

<p><a href="http://d3js.org/">D3 官网</a></p>

<p><a href="https://github.com/mbostock/d3">Github托管地址</a></p>

<h2 id="section-9">其它工具</h2>

<p><strong>ADOBE MUSE - 自我展示类工具</strong></p>

<p><a href="http://muse.adobe.com/">官方网站</a> 教程丰富，讲解细致 </p>

<p>无须编程，实现流行的网页效果</p>

<p>例如 <a href="http://songchengru.eicp.net/scroll/">Scroll Effects</a></p>

<p><strong>LATEX CV - 自我展示类工具</strong></p>

<p><a href="https://launchpad.net/moderncv">mordencv官网</a></p>

<p><a href="http://www.ctan.org/tex-archive/macros/latex/contrib/moderncv">mordencv代码</a></p>

<p><strong>PROCESSING - 数据展示类工具</strong></p>

<p>MIT Media laboratory 创制的编程绘图语言，连接艺术设计与计算机程序</p>

<p><a href="http://processing.org/">Processing 官网</a></p>

<p><a href="https://www.processing.org/exhibition/">作品展示</a></p>

<p>基于Processing的jQuery插件：<a href="http://processingjs.org/">processing.js</a></p>

<h2 id="section-10">总结</h2>

<ul>
  <li>蜻蜓点水，抛砖引玉</li>
  <li>经验之谈，一家之言</li>
  <li>如能产生一点启发，激发一点兴趣，也不枉一番准备</li>
</ul>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>一种语言的占比等于其在8大网站（Google 30%，Blogger 30%，Wikipedia 15%，YouTube 9%，Baidu 6%，Yahoo! 3%，Bing 3%，Amazon 3%）上被搜索出的结果总数，除以前50名语言的结果总数。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>展示结束后，又发现了一款名为 <a href="https://github.com/visit1985/mdp">MDP</a> 的命令行展示工具，大家可以试试，当然，以 Markdown 为书写语言的网页版展示工具就更多了，比如 <a href="https://github.com/onesuper/weakpoint">WeakPoint</a>。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
