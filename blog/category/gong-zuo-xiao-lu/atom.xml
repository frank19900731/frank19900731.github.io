<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 工作效率 | Blog of 太极儒]]></title>
  <link href="http://frank19900731.github.io/blog/category/gong-zuo-xiao-lu/atom.xml" rel="self"/>
  <link href="http://frank19900731.github.io/"/>
  <updated>2015-06-19T23:42:53+08:00</updated>
  <id>http://frank19900731.github.io/</id>
  <author>
    <name><![CDATA[Frank Song]]></name>
    <email><![CDATA[scr_0731@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在 Sublime 中配置 Markdown 环境]]></title>
    <link href="http://frank19900731.github.io/blog/2015/04/13/zai-sublime-zhong-pei-zhi-markdown-huan-jing/"/>
    <updated>2015-04-13T12:11:53+08:00</updated>
    <id>http://frank19900731.github.io/blog/2015/04/13/zai-sublime-zhong-pei-zhi-markdown-huan-jing</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#package-control">Package Control</a></li>
  <li><a href="#monokai-extended--markdown-extended">Monokai Extended &amp; Markdown Extended</a></li>
  <li><a href="#markdownediting">MarkdownEditing</a></li>
  <li><a href="#markdowntoc">MarkdownTOC</a></li>
  <li><a href="#table-editor">Table Editor</a></li>
  <li><a href="#markdown-preview">Markdown Preview</a></li>
  <li><a href="#academicmarkdown">AcademicMarkdown</a></li>
  <li><a href="#citer">Citer</a></li>
  <li><a href="#pandoc">Pandoc</a></li>
  <li><a href="#section">参考文档</a></li>
</ul>

<!-- excerpt start -->

<p>最近在编写项目 Readme.md 文件的时候，发现 Sublime 默认对 Markdown 几乎没有支持，需要通过安装、配置插件（算上 Package Control 共 10 个）来完成。在此记录下完整过程（其实就是整合了网上资料，自己配置来用而已），非 OS X 系统快捷键有不同。</p>

<h2 id="package-control">Package Control</h2>

<p>通过包管理器 <a href="https://packagecontrol.io/">Package Control</a> 安装插件的好处就是便于自动更新。</p>

<p>在 Sublime 中使用 Ctrl + ` 快捷键调出控制台，输入如下代码、回车，等待安装完成。</p>

<p><code>python Package Contorl 安装
import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
</code></p>

<!-- excerpt end -->

<h2 id="monokai-extended--markdown-extended">Monokai Extended &amp; Markdown Extended</h2>

<p>Markdown 格式在 Sublime 中默认无高亮，很多主题也不支持 Markdown 的高亮（包括 Markdown 代码块内的代码），<a href="https://github.com/jonschlinkert/sublime-monokai-extended">Monokai Extended</a> 和 <a href="https://github.com/jonschlinkert/sublime-markdown-extended">Markdown Extended</a> 是一套解决方案。</p>

<p>插件的安装方式是 Shift + Command + P 调出 Command Palette，输入 <strong>pci</strong>（模糊匹配），找到 <code>Package Control: Install Package</code>、回车，输入插件名称、回车，等待安装。</p>

<p>注意需要将 Markdown 的文件格式与 Markdown Extended 这种语法关联起来，做法是点击 Sublime 右下角文档格式，在列表最上方名为 <code>Open all with current extension as</code> 二级列表中选择 Markdown Extended。一种临时设置方式可以是 Shift + Command + P 调出 Command Palette，输入 <strong>ssm</strong>，选择 <code>Set Syntax: Markdown Extended</code>。</p>

<p>输入点内容看看，是舒服了不少。</p>

<p><a href="/img/post/2015-4/3.png" class="img-up" title="Markdown 语法高亮"><img class="imgcenter" src="/img/post/2015-4/3.png" width="95%" title="Markdown 语法高亮" ></a></p>

<h2 id="markdownediting">MarkdownEditing</h2>

<p>在 Sublime 中编写 Markdown 还有一个直观的不适就是<strong>缺少辅助提示</strong>，比如输入 *，编辑器应当自动补上一个 *，并使光标保持在两 * 之间，又比如应当支持选中一段文字快捷键添加链接。</p>

<p><a href="https://github.com/SublimeText-Markdown/MarkdownEditing">Markdown Editing</a> 提供了这些支持，它也提供配色方案（略丑）。</p>

<p>个人常用的三个快捷键是：</p>

<ul>
  <li>Option + Command + K - 插入链接；</li>
  <li>Option + Command + V - 粘贴为链接格式；</li>
  <li>Shift + Command + K - 插入图片。</li>
</ul>

<h2 id="markdowntoc">MarkdownTOC</h2>

<p>编写 heading 较多的长文档，希望能够自动生成目录方便跳转，<a href="https://github.com/naokazuterada/MarkdownTOC">MarkdownTOC</a> 可以帮助我们实现。</p>

<p>安装完成需要对其做一定配置，方法是打开 Preferences -&gt; Package Settings -&gt; MarkdownTOC -&gt; Setting - User，键入以下配置：</p>

<p><code>json MarkdownTOC 配置
{
  "default_autolink": true,
  "default_bracket": "round",
  "default_depth": 0
}
</code></p>

<p>User Setting 覆盖 Default Setting，修改 User Setting 而非 Default Setting 是为了将来插件升级用户配置不被覆盖。配置文件都是 json 格式，上面的三个配置作用分别是：</p>

<ul>
  <li>目录以链接形式呈现；</li>
  <li>链接以圆括号包裹；</li>
  <li>无限目录深度。</li>
</ul>

<p>将光标置于文档首部，点击 Tools -&gt; MarkdownTOC -&gt; Insert TOC，会自动在文首生成目录，效果如下图。这个目录会随文档内容改变自动更新（可能需要保存来触发）。</p>

<p><a href="/img/post/2015-4/2.png" class="img-up" title="Markdown 目录"><img class="imgcenter" src="/img/post/2015-4/2.png" width="95%" title="Markdown 目录" ></a></p>

<h2 id="table-editor">Table Editor</h2>

<p>键入表格是个体力活，<a href="https://github.com/vkocubinsky/SublimeTableEditor">Table Editor</a> 可以帮助我们减轻工作量。</p>

<h2 id="markdown-preview">Markdown Preview</h2>

<p>现在，<strong>代码、公式、表格、图片、链接、目录</strong>都齐活儿了，最后一步就是将 Markdown 文档渲染成我们想要的文档格式，<a href="https://github.com/revolunet/sublimetext-markdown-preview">Markdown Preview</a> 责无旁贷。</p>

<p>安装后也需要进行一定配置：</p>

<p><code>json Markdown Preview 配置
{
    "parser": "github",
    "build_action": "browser",
    "enable_mathjax": true,
    "enable_uml": true,
    "enable_highlight": true,
    "enable_pygments": true,
    "enabled_extensions": "github",
    "enabled_parsers": ["github"],
    "github_mode": "markdown",
    "github_inject_header_ids": true,
    "enable_autoreload": false
}
</code></p>

<p>在以上配置中我们设定渲染样式为 github，渲染结束后用浏览器打开，开启 uml、mathjax、pygments 等支持，最重要的一个配置项是 <code>"github_inject_header_ids": true</code>，<strong>保证 heading 的 id 与 heading 内容一致</strong>，<strong>也就与 MarkdownTOC 生成的一致</strong>，<strong>也就恰好能够锚点定位</strong>。最后我们关闭了 autoreload，否则每当保存 Markdown 文件，后台都会进行一次渲染操作，你就会看到一颗彩虹糖在打转。</p>

<p>使用快捷键 Shift + Command + B，选择 Build with Markdown，一会儿就能在弹出的浏览器框里看到渲染结果了。</p>

<p><a href="/img/post/2015-4/1.png" class="img-up" title="Markdown 渲染结果"><img class="imgcenter" src="/img/post/2015-4/1.png" width="90%" title="Markdown 渲染结果" ></a></p>

<h2 id="academicmarkdown">AcademicMarkdown</h2>

<p>在查找资料的过程中发现可以用 Sublime + Markdown 写论文，就跟着学了一把。</p>

<p><a href="https://packagecontrol.io/packages/AcademicMarkdown">AcademicMarkdown</a> 通过在 Markdown 文档中添加一定的信息，具体说是文件头，来帮助我们将 Markdown 文档渲染为符合指定论文格式的文章。以下文件头摘自插件作者给出的 <a href="/downloads/file/sample-paper.zip">样例</a>。</p>

<p><code>text 文件头
title: A sample paper  
author: Donald Duck
date: October 1, 2014
csl: /Users/frank/Documents/My Markdown/sample-paper/chicago.csl
abstract: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enimad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</code></p>

<p>csl 是论文模板格式，更多格式可在 <a href="https://www.zotero.org/styles">Zotero Style Repository</a> 寻找。</p>

<p>Academic 还允许指定 bib 文件，在 Markdown 文档内添加引用，格式是 <code>@citation_key</code>，下面介绍的 Citer 可以帮助我们管理引用。</p>

<h2 id="citer">Citer</h2>

<p>具体说，<a href="https://github.com/mangecoeur/Citer">Citer</a> 帮助我们搜索、插入引用。</p>

<p>安装后需要进行一定配置：</p>

<p>```json Citer 配置
{
    //REQUIRED:
    “bibtex_file_path”: “/Users/frank/Documents/Mendeley/reference.bib”,</p>

<pre><code>//OPTIONAL:

//By default Citer Search looks for your keyword in the 
//author, title, year, and Citekey (id) feilds
"search_fields": ["author", "title", "year", "id"] ,
//Default format is @Citekey
"citation_format": "@%s",
//list of scopes. Could be top level "text" or "source", or limit to
// e.g "text.html.markdown"
"completions_scopes": ["text"],
"enable_completions": true } ```
</code></pre>

<p>只要修改 <code>bibtex_file_path</code> 即可，其它都是默认配置项，我的 bib 文件是由 <a href="https://www.mendeley.com/">Mendeley</a> 维护的。值得一提的是，AcademicMarkdown 支持在文件头指定其它 bib 文件，Citer 中的 bib 是全局的。</p>

<p>Shift + Command + P 调出 Command Palette，输入 Citer，Show All 会列举全局 bib 文件中的所有项（如果是刚配置好可能结果为空，请稍作等待或重启 Sublime），Search 则显然用于搜索。</p>

<h2 id="pandoc">Pandoc</h2>

<p>最终由神器 <a href="https://github.com/tbfisher/sublimetext-Pandoc">Pandoc</a> 将 AcademicMarkdown 文档编译成论文。</p>

<p>这个插件只是 Pandoc 的使用配置接口，需要在系统中手动安装 <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a>，OS X 下我使用 <code>brew install pandoc</code> 安装。我们要用到的两个命令是 <code>pandoc</code> 和 <code>pandoc-citeproc</code>。除了 Pandoc，我们还需要配置 Latex 编译环境，我使用的是 <a href="http://tug.org/texlive/">TeX Live</a>。</p>

<p>接下来配置 Pandoc 插件：</p>

<p>```json Pandoc 配置
{
  “default”: {
    <strong>“pandoc-path”: “/usr/local/bin/pandoc”</strong>,</p>

<pre><code>"transformations": {

...

  "PDF": {
    "scope": {
      "text.html": "html",
      "text.html.markdown": "markdown"
    },
    "pandoc-arguments": [
      "-t", "pdf", **"--latex-engine=/usr/texbin/pdflatex"**, 
      **"--filter=/usr/local/bin/pandoc-citeproc"**,
      **"--bibliography=/Users/frank/Documents/Mendeley/reference.bib"**
    ]
  },

  "Microsoft Word": {
    "scope": {
      "text.html": "html",
      "text.html.markdown": "markdown"
    },
    "pandoc-arguments": [
      "-t", "docx",
      **"--filter=/usr/local/bin/pandoc-citeproc"**,
      **"--bibliography=/Users/frank/Documents/Mendeley/reference.bib"**
    ]
  }
},

"pandoc-format-file": ["docx", "epub", "pdf", "odt"]   } } ```
</code></pre>

<p>修改内容以 ** 标出，主要是指定相关命令、文件的路径作为 pandoc 命令的参数。</p>

<p>Shift + Command + P 调出 Command Palette，输入 Pandoc、选择 PDF 作为输出格式即可，这是一个<a href="/downloads/file/sample-paper.pdf">示例</a>。</p>

<h2 id="section">参考文档</h2>

<ul>
  <li><a href="http://blog.cigrainger.com/2014/07/pandoc-markdown.html">Writing academic papers in Markdown using Pandoc</a></li>
  <li><a href="http://nikolasander.com/writing-in-markdown/">Writing academic papers in Markdown using Sublime Text and Pandoc</a></li>
  <li><a href="https://blog.mariusschulz.com/2014/12/16/how-to-set-up-sublime-text-for-a-vastly-better-markdown-writing-experience">How to Set Up Sublime Text for a Vastly Better Markdown Writing Experience</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 下安装 WeCenter 并添加代码高亮功能]]></title>
    <link href="http://frank19900731.github.io/blog/2015/01/26/mac-xia-an-zhuang-wecenter-bing-tian-jia-dai-ma-gao-liang-gong-neng/"/>
    <updated>2015-01-26T02:02:10+08:00</updated>
    <id>http://frank19900731.github.io/blog/2015/01/26/mac-xia-an-zhuang-wecenter-bing-tian-jia-dai-ma-gao-liang-gong-neng</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#wecenter">为什么选择 WeCenter</a></li>
  <li><a href="#wecenter-">WeCenter 安装</a></li>
  <li><a href="#section">代码高亮定制</a></li>
  <li><a href="#section-1">参考代码</a></li>
</ul>

<!-- excerpt start -->

<h2 id="wecenter">为什么选择 WeCenter</h2>

<p>最近考虑将部分笔记任务从 Ulysses 中分离出来，于是想到给自己建一个类似知乎的问答系统。我会将对一些<strong>技术问题的解决和概念理解</strong>录入问答系统，可视化界面和搜索功能方便自己日后查看、查询。</p>

<p>一圈 <a href="http://www.oschina.net/project/tag/299/qa">选下来</a>，觉得 WeCenter 不错，主要考虑到</p>

<ul>
  <li>界面更美观，也有 <a href="http://www.wecenter.com/category/templates/">模板</a>，无须太多定制；</li>
  <li>PHP + mysql + Bootstrap，对我而言二次开发上手容易些；</li>
  <li>功能、界面与知乎类似，满足我的全部需求。</li>
</ul>

<h2 id="wecenter-">WeCenter 安装</h2>

<p>接下来就是 <a href="http://www.wecenter.com/downloads/">下载</a> 安装。WeCenter 要求 PHP 支持 FreeType 以显示验证码，而 Mac 自带的 PHP 无此支持，所以需要重新编译 PHP。</p>

<p>采用 homebrew 安装方式，方便今后管理 PHP 的其它扩展支持，具体安装方式如下。</p>

<!-- excerpt end -->

<p><code>bash 使用 brew 编译安装 PHP
brew update
brew tap homebrew/dupes
brew tap josegonzalez/homebrew-php
brew install php55 --with-gmp --with-imap --with-tidy --with-debug --with-mysql=/usr/local/mysql --without-snmp
</code></p>

<p>mysql 是我从 <a href="http://dev.mysql.com/downloads/mysql/">官网</a> 下载安装包安装的，默认路径是 <code>/usr/local/mysql</code>；<code>--without-snmp</code> 选项的加入可以消除 <strong>Error 139 - make: *** [ext/phar/phar.php]</strong> 的编译问题，不影响后续使用。关于这个编译问题，网上有说可以通过 <code>brew uninstall openssl</code> 解决，不过尝试无效，还有说清空 brew 所有安装，感觉代价太大了……</p>

<p><code>brew options php55</code> 查看其它编译选项。brew 会自动下载安装 FreeType、jpeg 等模块，然后编译 PHP 5.5。 </p>

<p>编译成功后，在 <code>/usr/local/Cellar/php55/5.5.20/libexec/apache2</code> 目录下会存在一个名为 <code>libphp5.so</code> 的模块，可用于在 apache 的配置文件中替换系统 PHP。</p>

<p>我所使用的 apache 是 <a href="http://www.apple.com/osx/server/">Server</a>  自带的，考虑到它提供很多应用支持，比如 VPN、Wiki 等。配置文件不是通常的 httpd.conf，而是 <code>/Library/Server/Web/Config/apache2/httpd_server_app.conf</code>，修改如下。</p>

<p><code>bash 修改 apache 配置文件
# LoadModule php5_module libexec/apache2/libphp5.so
LoadModule php5_module /usr/local/Cellar/php55/5.5.20/libexec/apache2/libphp5.so
</code></p>

<p>当然，要注意配置文件修改前后 apache 的关闭与重启。</p>

<h2 id="section">代码高亮定制</h2>

<p>WeCenter 基本设置容易上手，<a href="http://wenda.wecenter.com/">社区</a> 里有不少介绍，只是在代码高亮定制方面，官方未提供，社区讨论也少，缺乏适用于新版本 WeCenter 的方法。在这个 <a href="http://wenda.wecenter.com/question/22147">问题</a> 的启发下，自己初步实现了<strong>对 WeCenter 3.0.2 的代码高亮支持</strong>。</p>

<p><a href="http://wenda.wecenter.com/question/22147">问题</a> 中的做法是使用 <a href="http://qbnz.com/highlighter/">GeSHi</a> 进行代码渲染，MediaWiki 选用的也是这个。将 <a href="http://wenda.wecenter.com/question/22147">问题</a> 提供的 <a href="http://wenda.wecenter.com/file/download/file_name-U2VydmljZXMuemlw__url-aHR0cDovL3dlbmRhLndlY2VudGVyLmNvbS91cGxvYWRzL3F1ZXN0aW9ucy8yMDE1MDEyNC9jMzIxNzNkZWY5MzA2N2IwMjFhYjIzMDUyYmNiYTZmYQ==">代码</a> 解压缩到 <code>wecenter-root/system/Services</code> 中，<strong>注意不要覆盖 Markdown.php</strong>，我们要自己修改，操作步骤如下，文末附有参考代码压缩包。</p>

<ul>
  <li>在 Markdown.php 头部引入 GeSHi Parser。</li>
</ul>

<p>```php 引入GeSHi Parser
include(dirname(dirname(<strong>FILE</strong>)) . ‘/Services/geshi/geshi.php’);</p>

<p>// Load umodified Michel Fortin’s PHP Markdown Extra: http://michelf.com/projects/php-markdown/
define(‘MARKDOWN_PARSER_CLASS’,  ‘MarkdownExtraGeshi_Parser’);
include(dirname(dirname(<strong>FILE</strong>)) . ‘/Services/markdown_extra/markdown.php’);
```</p>

<ul>
  <li>原样添加 <a href="http://wenda.wecenter.com/question/22147">问题</a> 代码中调用 GeSHi Parser 进行代码解析的函数 syntaxHighlight 。</li>
</ul>

<p><code>php 调用 GeSHi Parser 进行代码解析
protected function syntaxHighlight($matches)
{
	$geshi = new GeSHi($matches[3], empty($matches[2]) ? "txt" : $matches[2]);
	return $geshi-&gt;parse_code();
}
</code></p>

<ul>
  <li>修改 _doCodeBlocks_callback 函数。</li>
</ul>

<p>```php _doCodeBlocks_callback
protected function _doCodeBlocks_callback($matches) {
	$codeblock = $matches[1];</p>

<pre><code># outdent 会去掉行首tab/多空格，不采用，直接按照输入代码样式来，建议代码缩进为2空格
// $codeblock = $this-&gt;outdent($codeblock);
// $codeblock = htmlspecialchars($codeblock, ENT_NOQUOTES);

# trim leading newlines and trailing newlines
$codeblock = preg_replace('/\A\n+|\n+\z/', '', $codeblock);

# 替换特殊字符，可能不完善
$codeblock = str_replace(array(
	'&amp;lt;',
	'&amp;quot;',
	'&amp;amp;'
), array(
	'&lt;',
	'"',
	'&amp;'
), $codeblock);

## call geshi to render the code
$codeblock = preg_replace_callback(
	'/^(\{\{lang:([\w]+)\}\}\n|)(.*?)$/s', // greedy_code
	array($this, 'syntaxHighlight'),
	$codeblock
);

// 将代码每一行包裹入 &lt;p&gt;
$codeblock = preg_replace('/^(.+?)$/m', '&lt;p&gt;${1}&lt;/p&gt;', $codeblock);
$codeblock = str_replace(array( # 特殊处理第一行和最后一行
	'style="font-family:monospace;"&gt;',
	'&lt;/pre&gt;'
), array(
	'style="font-family:monospace;"&gt;&lt;p&gt;',
	'&lt;/p&gt;&lt;/pre&gt;'
), substr($codeblock, 3, strlen($codeblock) - 7));

# GeSHi 已添加 &lt;pre&gt; 标签
// $codeblock = "&lt;pre class=\"prettyprint\"&gt;$codeblock\n&lt;/pre&gt;";

# 输出测试
// $fp = fopen("/Library/Server/Web/Data/Sites/Default/qa/test.txt", 'w');
// fwrite($fp, $codeblock);
// fclose($fp);

return $this-&gt;hashBlock($codeblock); } ```
</code></pre>

<ul>
  <li>修改样式代码 <code>wecenter-root/static/css/default/common.css</code>，使超过显示区域长度的代码可横向滚动查看。</li>
</ul>

<p>```css 修改 common.css
/* 注释掉下面这一行，两个选择器分开写，.wmd-preview pre 不变，.markitup-box pre 的 overflow 属性为 scroll <em>/
/</em>.wmd-preview pre, .markitup-box pre {padding: 16px;line-height: 20px;overflow: hidden; border: none; border-radius: 3px; background-color: #f7f7f7;font-size: 14px;}*/
.wmd-preview pre {padding: 16px;line-height: 20px;overflow: hidden; border: none; border-radius: 3px; background-color: #f7f7f7;font-size: 14px;}
.markitup-box pre {padding: 16px;line-height: 20px;overflow: scroll; border: none; border-radius: 3px; background-color: #f7f7f7;font-size: 14px;}</p>

<p>…</p>

<p>/* 末尾添加自定义属性  */
.markitup-box pre &gt; p {
	display: inline-block;
	padding: 0 !important;
}
```</p>

<ul>
  <li>在 } 间先输入 ，表示以下为 PHP 代码（其它格式可参见 <a href="http://qbnz.com/highlighter/">GeSHi 官网</a> 左边栏），然后正常输入代码并显示。</li>
</ul>

<p>```robotframework 输入代码评论
protected function _doImages_inline_callback($matches) {
  $whole_match = $matches[1];
  $alt_text = $matches[2];
  $url = $matches[3] == ‘’ ? $matches[4] : $matches[3];
  $title = &amp;$matches[7];</p>

<p>$alt_text = $this-&gt;encodeAttribute($alt_text);
  $url = $this-&gt;encodeAttribute($url);
  $result = “&lt;img src="$url" alt="$alt_text"”;
  if (isset($title)) {
    $title = $this-&gt;encodeAttribute($title);
    $result .= “ title="$title"”; # $title already quoted
  }
  $result .= $this-&gt;empty_element_suffix;</p>

<p>return $this-&gt;hashPart($result);
}
```</p>

<p>显示效果如下。</p>

<p><a href="/img/post/2015-1/15.png" class="img-up" title="代码显示效果"><img class="imgcenter" src="/img/post/2015-1/15.png" width="90%" title="代码显示效果" ></a></p>

<p>注意到我们的代码输入采用两空格缩进，显示起来较美观；想设置 n 空行，在代码输入中应有 n+2 空行。</p>

<p>至此，初步实现了 WeCenter 3.0.2 中的代码高亮功能，剩余工作就是在实践中微调，比如 <strong>Shell 脚本行注释的 # 可能会被 Markdown 解析成标题</strong>，可以自定义转义进行处理，诸如此类。</p>

<h2 id="section-1">参考代码</h2>

<p>附 <a href="/downloads/file/Services.rar">参考代码</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gollum 开机启动配置]]></title>
    <link href="http://frank19900731.github.io/blog/2015/01/02/gollum-kai-ji-qi-dong-pei-zhi/"/>
    <updated>2015-01-02T09:31:32+08:00</updated>
    <id>http://frank19900731.github.io/blog/2015/01/02/gollum-kai-ji-qi-dong-pei-zhi</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#gollum-">Gollum 介绍</a></li>
  <li><a href="#section">安装</a></li>
  <li><a href="#section-1">配置</a>    <ul>
      <li><a href="#section-2">编码错误</a></li>
      <li><a href="#mathjax">配置本地 MathJax</a></li>
      <li><a href="#section-3">微调界面</a></li>
      <li><a href="#js-">嵌入 JS 代码</a></li>
    </ul>
  </li>
  <li><a href="#section-4">开机启动</a></li>
  <li><a href="#section-5">总结</a></li>
</ul>

<!-- excerpt start -->

<h2 id="gollum-">Gollum 介绍</h2>

<p><a href="https://github.com/gollum/gollum">Gollum</a> 是一个轻量级的 Wiki 框架，可以管理以 Git Repository 形式存在的文件夹。相比于 Mediawiki，文档迁移性更灵活，界面也清新美观。支持多种文档格式，包括 Markdown、MediaWiki、Org-mode、Plain Text、reStructuredText、RDoc、Textile 等。</p>

<p><a href="/img/post/2015-1/1.png" class="img-up" title="Gollum 界面"><img class="imgcenter" src="/img/post/2015-1/1.png" width="90%" title="Gollum 界面" ></a></p>

<p>Gollum 自带公式输入支持，可自定义 MathJax 的配置；<strong>支持图片拖拽插入</strong>（并自动上传），这是让我觉得很方便的一点。美中不足的是，Gollum 不支持中文命名的文件，所以</p>

<ul>
  <li>如果 Git Repository 中包含中文命名文档，则无法正确显示；</li>
  <li>对于中文名称链接，Gollum 会将该名称<strong>转为拼音形式作为文件名</strong>，相应链接、文档标题也都是拼音；</li>
  <li>如果上传图片是中文命名的，也无法正确显示。</li>
</ul>

<h2 id="section">安装</h2>

<p>按照 <a href="https://github.com/gollum/gollum#installation">说明</a> 安装即可。</p>

<p>Gollum 安装过程可能会比较慢，或者报 TIME_OUT 错误，可切换至 <a href="http://ruby.taobao.org/">淘宝镜像</a>。</p>

<!-- excerpt end -->

<h2 id="section-1">配置</h2>

<h3 id="section-2">编码错误</h3>

<p>编辑文档过程中，特别是使用非 Gollum 网页编辑器编辑文档<strong>并提交</strong>，可能会出现 <code>incompatible character encodings: UTF-8 and ASCII-8BIT</code> 编码错误，需要 <a href="https://github.com/gollum/gollum/issues/843">修改 gitlab-grit 中的 index.rb 代码的第 176 行</a> 如下</p>

<p><code>ruby Gollum Encoding Fix
tree_contents[k] = "%s %s\0%s" % [tmode, obj.name.force_encoding('ASCII-8BIT'), sha]
</code></p>

<p>也就是加入了强制编码。</p>

<p>gitlab-grit 的路径，如果使用 rvm 的 ruby 安装，是 </p>

<p><code>/Users/frank/.rvm/rubies/ruby-X.X.X/lib/ruby/gems/X.X.X/gems/gitlab-grit/lib/grit/index.rb</code></p>

<p>如果使用系统 ruby 安装，则是</p>

<p><code>/Library/Ruby/Gems/X.X.X/gems/gitlab-grit/lib/grit/index.rb</code> 。</p>

<h3 id="mathjax">配置本地 MathJax</h3>

<p>因为可能离线查看文档，所以最好将 MathJax 的请求引到本地，下载 <a href="https://github.com/mathjax/MathJax">MathJax</a> 到本地服务器即可，然后修改 Gollum 模板定义。</p>

<p>同上述，文件路径是</p>

<p><code>/Users/frank/.rvm/rubies/ruby-X.X.X/lib/ruby/gems/X.X.X/gems/gollum/lib/gollum/templates/layout.mustache</code></p>

<p>或</p>

<p><code>/Library/Ruby/Gems/X.X.X/gems/gollum/lib/gollum/templates/layout.mustache</code> 。</p>

<p>第 54 行修改为</p>

<p><code>javascript MathJax 请求修改
j.src = '//localhost/MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
</code></p>

<h3 id="section-3">微调界面</h3>

<p>Gollum 的界面定制起来很方便，修改 gollum.css 或者 -\-css 参数指定都可以。</p>

<p>gollum.css 的路径是</p>

<p><code>/Users/frank/.rvm/rubies/ruby-X.X.X/lib/ruby/gems/X.X.X/gems/gollum/lib/gollum/public/gollum/css/gollum.css</code></p>

<p>或</p>

<p><code>/Library/Ruby/Gems/X.X.X/gems/gollum/lib/gollum/public/gollum/css/gollum.css</code> 。</p>

<p>标题是 h1 、左浮动，菜单是 ul、右浮动。当标题较长时，二者配合搭配不好看，修改为</p>

<p><code>css 标题样式修改
#head h1 {
  font-size: 1.5em;
  /* float: left; */
  line-height: normal;
  /* margin: 0; */
  margin-bottom: 20px;
  padding: 0 0 0 0.667em;
}
</code></p>

<p>现在我们改用 custom.css 做两处定制</p>

<ul>
  <li>二级列表与一级列表项目上下边缘的长度太大，因为默认样式只定义了 <code>ul</code>，没有考虑二级列表的情况，我们希望<strong>多级列表的行是等间距的</strong>；</li>
  <li>表格内容（<code>tbody</code>）没有扩展到整个表格（<code>table</code>）区域，视觉效果是表格偏向页面左侧，我们希望<strong>表格居中、内容充满</strong>。</li>
</ul>

<p>在 Git Repository 的根目录下创建 custom.css，编辑内容为</p>

<p>```css 二级列表与表格居中定制
li &gt; ul {
  margin: 0 !important;
}</p>

<p>.center90 {
	margin: 0 auto !important;
	width: 90%;
	display: table !important;
}</p>

<p>.center80 {
	margin: 0 auto !important;
	width: 80%;
	display: table !important;
}
``` </p>

<p><code>center90</code> 表示表格宽度占父元素 90% 且居中显示，表格内容充满此区域。</p>

<p>保存 custom.css，此时还看不到正确显示，需要 <code>git commit</code> 后查看。</p>

<p>关于表格还要多说一句，如果想实现单元格的<strong>多列/行合并</strong>（columnspan/rowspan），Markdown 是做不到的，可以写 Html 代码，或者改用 MediaWiki 格式的文档。推荐一个 <a href="http://www.tablesgenerator.com/">在线表格生成器</a>（貌似在墙外），支持 Latex、HTML、Plain Text、Markdown、MediaWiki 格式的表格生成，也可参考 <a href="http://pub.lcair.com/index.php?title=MediaWiki%E8%AF%AD%E6%B3%95">MediaWiki 的语法</a>。</p>

<p>那么问题来了，如何将表格的类定义为 <code>center90</code> 、<code>center80</code> ？</p>

<p>MediaWiki 支持直接设置，而 Gollum 使用的 Markdown 编译器则不支持类的设定（本博客使用的 kramdown 是可以的）。一个简单的想法是使用内嵌 JS 代码进行设置，然而由于 Gollum 使用了 <a href="https://github.com/gollum/gollum/blob/master/docs/sanitization.md">Sanitization Rules</a>（相关代码在 <a href="https://github.com/gollum/gollum-lib">gollum-lib</a> 中），所以还是需要一番设置的，见下节介绍。</p>

<h3 id="js-">嵌入 JS 代码</h3>

<p>还是在根目录下，创建 config.rb，编辑内容为</p>

<p><code>ruby 让 Gollum 支持 script 标签和 src 属性
sanitizer = Gollum::Sanitization.new
sanitizer.elements.concat ['script'] # Tags
sanitizer.attributes[:all].push 'src' # Attributes
Precious::App.set(:wiki_options, {:sanitization =&gt; sanitizer})
</code></p>

<p>上段代码的作用是将 script 标签加入白名单，并支持 script 的 src 属性。为什么需要 src 呢，直接在 script 标签里写 JS 代码不行么？</p>

<p>貌似这么直接整确实不行，script 标签里的内容在解析后会被套上一层 <code>CDATA</code> 标记，导致 JS 代码无法执行，不过我没有具体研究 CDATA 是什么时候被加进来的。<strong>改用 src 引入 JS 文件的方式是验证通过的</strong>，这样也能让 MD 文档显得比较干净。</p>

<p>重启 Gollum，用 -\-config 指定 config.rb 的路径即可。</p>

<h2 id="section-4">开机启动</h2>

<p>通常步骤就是把在命令行启动的命令写成脚本，<a href="http://www.tanhao.me/talk/1287.html">按照一定方式加入开机启动</a> 就可以了。然而实际当中被<strong>坑惨了</strong>，主要因为我除了 Octopress 就没怎么用过 ruby。问题有二</p>

<ul>
  <li>Mac 自带的 ruby 是 2.0.0 的，也就是 <code>/usr/bin/ruby</code> 指定的那个，rvm 的版本与之并存，可以通过 <code>rvm system</code> 或者 <code>rvm use X.X.X</code> 来切换，按照我的 bash 环境变量配置，Gollum 被安装到 rvm 下的 ruby 中；</li>
  <li>launchctl 的运行环境与 bash 不同，即便 <code>source ~/.bash_profile</code>，或者 <code>rvm use X.X.X</code>，<strong>环境变量里仍然只有系统自带的 ruby</strong>，想用 rvm 的 ruby 就得自己 export PATH。</li>
</ul>

<p>最后，成功配置开机启动的流程如下。</p>

<ul>
  <li><code>rvm system</code>，将 Gollum 安装在系统自带 ruby 里；</li>
  <li>编写 plist 文件</li>
</ul>

<p>```xml 开机启动 plist 文件
<?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plist PUBLIC “-//Apple//DTD PLIST 1.0//EN” “http://www.apple.com/DTDs/PropertyList-1.0.dtd”&gt;
<plist version="1.0"></plist></p>
<dict>
    <key>Label</key>
    <string>com.frank.loginscript</string>
    <key>ProgramArguments</key>
    <array>
        <string>/Users/frank/Documents/Startup/startup.sh</string>
    </array>
    <key>RunAtLoad</key>
    <true />
</dict>
<p>&lt;/plist&gt;
```</p>

<ul>
  <li>创建 /usr/bin/gollum，根据 ruby 的配置加载 Gollum。</li>
</ul>

<p>```bash /usr/bin/gollum
#!/usr/bin/env ruby_executable_hooks
#
# This file was generated by RubyGems.
#
# The application ‘gollum’ is installed as part of a gem, and
# this file is here to facilitate running it.
#</p>

<p>require ‘rubygems’</p>

<p>version = “&gt;= 0”</p>

<p>if ARGV.first
  str = ARGV.first
  str = str.dup.force_encoding(“BINARY”) if str.respond_to? :force_encoding
  if str =~ /\A<em>(.*)</em>\z/ and Gem::Version.correct?($1) then
    version = $1
    ARGV.shift
  end
end</p>

<p>gem ‘gollum’, version
load Gem.bin_path(‘gollum’, ‘gollum’, version)
```</p>

<ul>
  <li>编写启动脚本，其中 <code>export PATH</code> 是为了指定 <code>ruby_executable_hooks</code> 的路径。查了一下，系统自带的 ruby 没这个可执行文件，虽然这里用的是 rvm ruby 里的，但没问题……如果不加，则会返回错误代码 127，找不到命令。</li>
</ul>

<p><code>bash 启动脚本
export PATH=$PATH:/Users/frank/.rvm/rubies/ruby-X.X.X/lib/ruby/gems/X.X.X/bin
/usr/bin/gollum --allow-upload dir --mathjax --show-all --config /Users/frank/gitlab/wiki-of-taijiru/config.rb --gollum-path /Users/frank/gitlab/wiki-of-taijiru
</code></p>

<p><code>/usr/bin/gollum</code> 是为了方便以后全局使用而添加的，能根据我对 ruby 的切换调用相应的 Gollum。其实大可以把启动脚本直接写成</p>

<p><code>bash 启动脚本（2）
/Library/Ruby/Gems/X.X.X/gems/gollum/bin/gollum --allow-upload dir --mathjax --show-all --config /Users/frank/gitlab/wiki-of-taijiru/config.rb --gollum-path /Users/frank/gitlab/wiki-of-taijiru
</code> </p>

<h2 id="section-5">总结</h2>

<p>本以为很简单的启动配置花了我好长时间，主要是对 ruby 开发环境配置的不熟悉和对 Launch Daemon 的环境变量不了解造成的。这让我想起大一时第一次配置 Apache 的情境，无论怎么修改 index.html，浏览器显示都没有变化。最后终于发现，我修改的是自己通过源码安装的 apache，而每次开关的是系统自带 apache……</p>

<p>不过也正是在查这种傻逼错误的过程里，自己才会去搜索大量资料反复调试，对相关工具的了解也更深。<strong>菜逼的提升，大抵如此吧 ^-^</strong>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数说 2014]]></title>
    <link href="http://frank19900731.github.io/blog/2014/12/23/shu-shuo-2014/"/>
    <updated>2014-12-23T01:31:29+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/12/23/shu-shuo-2014</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">写在前面</a></li>
  <li><a href="#section-1">邮件</a></li>
  <li><a href="#section-2">应用程序</a></li>
  <li><a href="#section-3">网页访问</a></li>
  <li><a href="#section-4">网络流量</a></li>
  <li><a href="#section-5">看过18部电影</a></li>
  <li><a href="#section-6">玩过3款游戏</a></li>
  <li><a href="#section-7">追过9部视频</a></li>
  <li><a href="#section-8">完整读过0本纸版书</a></li>
  <li><a href="#section-9">写了33篇博客</a></li>
  <li><a href="#section-10">撰写周报21篇、月报5篇，完成日常任务打分表80份</a></li>
  <li><a href="#section-11">参与报告/讲座/会议20场</a></li>
  <li><a href="#section-12">添置了6个设备</a></li>
  <li><a href="#section-13">参加54场面试，7场笔试</a></li>
  <li><a href="#section-14">其它</a></li>
  <li><a href="#section-15">总结</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">写在前面</h2>

<p>打小对数字和总结有感情，所以就有了这篇 《数说 2014》。</p>

<p><strong>数据不能告诉你全部，但数据对真实情况的刻画比你自以为的更客观</strong>。</p>

<p><blockquote><p></p></p><p><p>数据可能给你当头棒喝，因为你在某些方面乏善可陈；</p></p><p><p>数据可能让你羞愧难当，因为它拆穿了你的自以为是；</p></p><p><p>数据可能令你懊悔不已，因为你看到了大把时间的浪费。</p></p><p><p></p></blockquote></p>

<p><strong>希望在年末的细细回望，能督促自己在新的一年里过得更加充实，像个年轻人应该有的样子</strong>。</p>

<!-- excerpt end -->

<h2 id="section-1">邮件</h2>

<p>2014 年邮件往来一万余封。</p>

<p>发送方面，126 邮箱（Frank）发出 926 封，gamil 邮箱（宋成儒）发出 255封，负责维护的博士生论坛邮箱（Forum）发出 298 封。</p>

<p>接收方面，数量靠前的，除了讨厌的广告、推荐（好东西传送门还是很赞的，CSDN 偶尔赞），只剩下四个个人账号。</p>

<ul>
  <li>刘新益老师负责就业，发了很多就业相关的信息；</li>
  <li>黄海燕老师在系办负责研究生相关的工作，信息比较杂。</li>
  <li>花隽芃是上任系研会主席，陈苏是上任研会学术副主席，俺作为上任学术助理协助他俩儿举办了清华大学第 366 期博士生论坛，想想也是颇感慨的。</li>
</ul>

<p>具体收发统计如下（图表数据来自 <a href="http://frank19900731.github.io/blog/2014/12/14/mei-zhou-ruan-zhi-ri-ji-ruan-jian-chronories/">Chronories</a>，由 <a href="http://www.chartjs.org/">Chart.js</a> 生成，下同）。</p>

<div style="width: 100%; margin-bottom: 20px;">
   <div id="mail-from-legend" style="text-align: left;"></div>
   <canvas id="mail-from" style="margin-top: 20px;"></canvas>
</div>

<p>下图是分时段的收信量统计，看来应该<strong>多在中午十二点和下午六点查收/删除邮件</strong>，感觉是一句废话。</p>

<canvas id="mail-session"></canvas>

<h2 id="section-2">应用程序</h2>

<p>2014 年全年应用程序使用情况统计如下，单位是小时。Launched 表示软件打开（在内存中驻留吧），Active 表示软件使用（获得输入焦点吧）。</p>

<div style="position: relative; width: 100%; margin-bottom: 10px;">
   <canvas id="application-2014"></canvas>
   <div id="application-2014-legend" style="position: absolute; top: 20px; right: 20px; text-align: left;"></div>
</div>

<p>稍作分析</p>

<ul>
  <li>因为 Finder 在系统中始终处于 Launched 状态，所以粗略估计 <strong>2014 年电脑开机时间超过 180 天</strong>；</li>
  <li>Chrome 使用时间远远领先于其它软件，达到 50 天，<strong>结合下节网页访问的统计，不少时间浪费在社交媒体和视频网站上了</strong>。</li>
  <li>开着不用的典型软件是 Google Chrome、Mail、ZOC、Evernote、WeChat、OmniFocus。</li>
  <li>QSanguosha 就是太阳神三国杀，作为唯一一款游戏软件<strong>赫然在列</strong>。</li>
</ul>

<p>其中一些软件是从下半年开始使用的，所以为了更接近目前的状况，还统计了 2014 年下半年应用程序使用情况。</p>

<div style="position: relative;">
   <canvas id="application-2014-half"></canvas>
   <div id="application-2014-half-legend" style="position: absolute; top: 20px; right: 20px; text-align: left;"></div>
</div>

<p>Ulysses、ByWord 使用时间占比增加，Evernote 已经看不见了。</p>

<p><strong>明年希望看到阅读类、笔记类和编程类软件的使用时间有较大提高</strong>。</p>

<h2 id="section-3">网页访问</h2>

<p>域名访问量统计，非一级域名。</p>

<div style="width: 100%; margin-bottom: 20px;">
   <div id="websites-legend" style="text-align: left;"></div>
   <canvas id="websites" style="margin-top: 20px;"></canvas>
</div>

<ul>
  <li>百度访问次数 23316 次还是让我很惊讶的，Google 访问次数是 8605 次。相比与 Google 的专业性，百度的快或许更实用，使用 Google 的场景，<strong>一种是预感肯定百度不到想要结果，另一种是确实没百度到想要的结果</strong>；</li>
  <li>微博（包括 t.cn，绝大部分是从微博来的）、人人（我真心不觉得有这么多访问，但事实就是如此）、优酷，是三大时间吸血鬼，这还不算上移动端的访问；</li>
  <li>localhost 访问次数多是因为有本地调试和本地 Wiki；</li>
  <li>百度百科、github 访问次数排名尚可，略感欣慰。</li>
</ul>

<p><strong>明年，人人、优酷还是算了吧，没什么营养，微博多用客户端，只关注有价值的分组</strong>。</p>

<h2 id="section-4">网络流量</h2>

<p>清华特色网络流量统计，数据来自清华大学校园网，单位 G。</p>

<div style="position: relative; margin-bottom: 10px;">
   <canvas id="network"></canvas>
   <div id="network-legend" style="position: absolute; top: 20px; right: 20px; text-align: left;"></div>
</div>

<p>近来网络访问有些猖獗，没营养又三俗的节目就别看了，<strong>浪费流量事小，浪费生命事大</strong>。</p>

<p>补一句，毕业了最不留恋的就是学校的网络。</p>

<h2 id="section-5">看过18部电影</h2>

<p>对科幻影片依旧无兴趣，没看过欧美电影，也没看过美剧！</p>

<p>喜欢国产写实影片，以及日本虐心片。</p>

<ul>
  <li><a href="http://movie.douban.com/subject/25779218/">匆匆那年（电影）</a></li>
  <li><a href="http://movie.douban.com/subject/24695611/">北平无战事</a></li>
  <li><a href="http://movie.douban.com/subject/24879858/">分手大师</a></li>
  <li><a href="http://movie.douban.com/subject/25805741/">后会无期</a></li>
  <li><a href="http://movie.douban.com/subject/25798222/">亲爱的</a></li>
  <li><a href="http://movie.douban.com/subject/25717233/">心花路放</a></li>
  <li><a href="http://movie.douban.com/subject/10545939/">黄金时代</a></li>
  <li><a href="http://movie.douban.com/subject/24743711/">催眠大师</a></li>
  <li><a href="http://movie.douban.com/subject/3732800/">我们天上见</a></li>
  <li><a href="http://movie.douban.com/subject/3036997/">立春</a></li>
  <li><a href="http://movie.douban.com/subject/4268598/">告白</a></li>
  <li><a href="http://movie.douban.com/subject/1292444/">大逃杀</a></li>
  <li><a href="http://movie.douban.com/subject/24843198/">同桌的你</a></li>
  <li><a href="http://movie.douban.com/subject/24736566/">北京爱情故事（电影）</a></li>
  <li><a href="http://movie.douban.com/subject/1756073/">我们俩</a></li>
  <li><a href="http://movie.douban.com/subject/1293323/">大红灯笼高高挂</a></li>
  <li><a href="http://movie.douban.com/subject/24735062/">青春派</a></li>
  <li><a href="http://movie.douban.com/subject/1291858/">鬼子来了</a></li>
</ul>

<h2 id="section-6">玩过3款游戏</h2>

<ul>
  <li>太阳神三国杀</li>
  <li>千军破2</li>
  <li>影之刃</li>
</ul>

<p>影之刃、千军破2 都是为了网易游戏面试玩的，太阳神三国杀纯消磨时光。太阳神三国杀的 Mac 端那叫一个渣，顺手、过拆就能让程序崩溃，始终无人维护。即便如此，我还玩得挺嗨，也是服了自己。</p>

<p><strong>本年度手机端只有影之刃一款游戏，Mac 端只有太阳神三国杀一款，均已卸载，千军破2 已停玩，望继续保持</strong>。</p>

<h2 id="section-7">追过9部视频</h2>

<ul>
  <li>晓松奇谈（周五）</li>
  <li>罗辑思维（周五）</li>
  <li>鸿观（周五）</li>
  <li>相征（周四）</li>
  <li>都嘟（周三、周六）</li>
  <li>奇葩说（周六、周日）</li>
  <li>历代经济变革得失</li>
  <li>万万没想到、报告老板</li>
  <li><a href="http://i.youku.com/u/UMTE3Njc4ODM2">张坤解说三国杀</a>（不定）</li>
</ul>

<p>看三国杀解说是最无脑的放松方式，虽然我已经多年不上 Online 实操，<strong>明年要戒掉平时的，只看周末娱乐</strong>。</p>

<h2 id="section-8">完整读过0本纸版书</h2>

<p>回想一下好像确实是这样。</p>

<ul>
  <li>到图书馆借书主要是为参阅章节，比如《具体数学》，<strong>特别缺乏系统性学习</strong>；</li>
  <li>今年本身买书就很少，有电子书则不会购买纸质书，主要是考虑到快毕业了，减轻搬家负担；</li>
  <li>读了很多技术教程、博客，人文类书籍阅读很少。</li>
</ul>

<p><blockquote><p>书读得少人就容易浮躁，视频看得多人就容易浮夸。</p></blockquote></p>

<p><strong>毕业了就不能以学生身份为借口，何况岁数也不小了，明年要踏踏实实在书籍阅读上给自己做一点规划</strong>。</p>

<h2 id="section-9">写了33篇博客</h2>

<p>新浪博客两篇</p>

<ul>
  <li><a href="http://blog.sina.com.cn/s/blog_64ac3ab10101f4it.html">Mac实用软件及功能吐血总结</a></li>
  <li><a href="http://blog.sina.com.cn/s/blog_64ac3ab10102uwjo.html">word2vec代码注释</a></li>
</ul>

<p>Github 的博客 31 篇</p>

<ul>
  <li><a href="http://frank19900731.github.io/blog/2014/08/24/wo-de-di-yi-pian-octopress-bo-ke/">我的第一篇 Octopress 博客</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/09/01/2015nian-xiao-zhao-ru-kou/">2015年校招入口</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/10/16/ti-gao-xiao-lu-yu-qing-qu-de-jiu-chong-cheng-xu-gong-ju-tui-jian/">提高效率与情趣的九种程序工具推荐</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/10/16/octopress-gai-zao-ji-lu/">Octopress 改造记录</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/10/18/yosemite-sheng-ji-ji-hou-xu/">Yosemite 升级及后续</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/">飞维美地笔试回忆</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/10/19/idg-lian-he-zhao-pin-bi-shi-hui-yi/">IDG 联合招聘笔试回忆</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/10/20/ji-mou-you-xi-gong-si-mian-shi-jing-li/">记某游戏公司面试经历</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/10/23/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang/">我的知识管理经验与工具分享</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan/">求职季的一点经验之谈</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/10/27/wo-de-shi-jian-guan-li-jing-yan-yu-gong-ju-fen-xiang/">我的时间管理经验与工具分享</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">面试经验分享之机器学习、大数据问题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">面试经验分享之智力题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/13/yi-ge-gong-ju-kong-de-xiao-lu-guan/">一个工具控的效率观</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">面试经验分享之数据结构、算法题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/20/pocket-lei-mu-biao-qian-de-zhi-ding/">Pocket 类目标签的制订</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi/">2014 年百度、腾讯与搜狐的校招笔试回忆</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/23/open-workshop-scalacong-ling-dao-ru-men-ke-tang-bi-ji/">《Open Workshop — Scala 从零到入门》课堂笔记</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">面试经验分享之编程语言题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-si-pian/">面试经验分享四篇</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi/">《测试驱动开发和函数式编程》在线演示</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/29/matrix67-bo-ke-zhong-zhi-li-ti-cu-fen-lei/">Matrix67 博客中智力题粗分类</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/12/04/ruo-gan-you-yong-you-qu-de-wang-zhan/">若干有用有趣的网站</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/12/04/diy-deep-learning-for-vision-a-tutorial-with-caffe-bao-gao-bi-ji/">DIY Deep Learning for Vision: A Tutorial with Caffe 报告笔记</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/12/09/wei-bo-qia-pian-wei-bo-shou-cang-de-ke-shi-hua/">微博卡片 — 微博收藏的可视化</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/12/14/mei-zhou-ruan-zhi-ri-ji-ruan-jian-chronories/">每周一软之日记软件 Chronories</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/12/20/wunderlist-tian-jia-kuai-jie-jian-qi-dong/">Wunderlist 添加快捷键启动</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/12/21/mei-zhou-ruan-zhi-markdown-bi-ji-ruan-jian-ulysses-iii/">每周一软之 Markdown 笔记软件 Ulysses III</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/12/23/shu-shuo-2014/">数说 2014</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/12/24/2014-qiu-zhi-hui-wang/">2014 面试终结篇</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/12/28/mei-zhou-yi-ruan-zhi-proxifier/">每周一软之 Proxifier</a></li>
</ul>

<p><strong>明年希望继续减少无病呻吟，保证一周1-2篇。缩短博客撰写时间，书面化的弊端就是耽于形式</strong>。</p>

<h2 id="section-10">撰写周报21篇、月报5篇，完成日常任务打分表80份</h2>

<p>8月11日那周开始写周报，8月末开始写月报，就是在周/月末抽半小时，对照任务管理软件梳理本周/月事项，总结得失，提出下阶段目标。现在回头翻看，说给自己听的鸡汤、对自己提出的批评、骂人/感谢的话等等，都鲜活还原了记录时的场景……</p>

<p>周报、月报对自己而言有三点好处</p>

<ul>
  <li>及时总结，快速调整状态；</li>
  <li><strong>机械、规律的行为，让工作、生活体现出阶段性，这阶段感是我从研究生不再上课以来一直求而不得的，阶段感带来紧张性，有助于避免拖延</strong>；</li>
  <li>汇集成一份完整、真实的年度总结，从中可以看到自己的成长、发现缺点不足，真心不是年底才想写就能够写出来的。</li>
</ul>

<p>10月13日制定日常任务完成度打分表并开始执行，目前每天在50分左右徘徊，明年应该会有大修订，并<strong>争取更高的完成度</strong>。</p>

<p>根据周报、月报的记录，自己这一年<strong>在加强运动、规律作息方面做的最差</strong>，特别是进入冬季以后。要向6月到8月的表现看齐，早七点半、晚十一点半，上班后应该就能做到吧。</p>

<h2 id="section-11">参与报告/讲座/会议20场</h2>

<ul>
  <li>Randomized Methods in Big Data Analytics, Ping Ma</li>
  <li>阿里图像搜索分享，雷音</li>
  <li>ICML 2014</li>
  <li>Statistical Learning Theory, Jerry Zhu</li>
  <li>CCF ADL-46 机器学习</li>
  <li>The Future of Mobile Computing, Hedy Lamarr</li>
  <li>Deep Learning in Object Detection, Segmentation, and Recognition, Xiaogang Wang</li>
  <li>Imaging Arithmetic Physics U Math &gt; Physics + Math, Gaurav Sharma</li>
  <li>Making the Impossible Possible Randomized Machine Learning Algorithms for Big Data, Rong Jin</li>
  <li>移动互联网时代的大数据挖掘技术研讨会，三星</li>
  <li>DIY Deep Learning for Vision: A Tutorial with Caffe</li>
  <li>Scaling Deep Learning, Jeaf Dean</li>
  <li>百度、阿里深度学习碰撞，余凯、漆远 </li>
  <li>百度技术沙龙53期，基于大数据的预测实践</li>
  <li>无穷沙龙 互联网泡沫真的来了吗</li>
  <li>无穷沙龙 走近 HTML5 的应用生态</li>
  <li>FreeWheel 技术分享，王迪</li>
  <li>万花筒活动: 测试驱动开发和函数式编程，姚若舟</li>
  <li>Open Workshop — Scala 从零到入门，吴雪峰</li>
  <li>码农大会 Spark 分享，连城</li>
</ul>

<p>如果听的时候热血沸腾，散场了就忘了个干净，那真的就是浪费了时间，不如不去。所以参加报告/讲座/会议一定要注意三点</p>

<ul>
  <li>认真听、认真记，不要指望自己会再听一遍录音/看一遍录像；</li>
  <li><strong>带着问题听，积极提问</strong>；</li>
  <li><strong>务必在当天查一查在听讲中遇到的陌生技术与概念，考虑是否可以为己所用</strong>。</li>
</ul>

<h2 id="section-12">添置了6个设备</h2>

<ul>
  <li>希捷 4T 移动硬盘，快毕业了，赶紧从北邮人、六维扒东西；</li>
  <li>三星 1T SSD，血本效率投资，还是很值的；</li>
  <li>Apple Magic Trackpad，基本没用;</li>
  <li>Wacom 数位板，写公式、画草图很实用；</li>
  <li>红米 Note，与中国移动携手保障了求职季里的通信畅通；</li>
  <li>小米手环，当闹钟用很实在。</li>
</ul>

<h2 id="section-13">参加54场面试，7场笔试</h2>

<p>其中实习面试 5 面，求职面试 49 面（电面 5 面）。</p>

<p>面试大部分集中在 9、10 月份，从八月初开始准备。一个自认为比较好也比较推荐的习惯是，<strong>在笔试、面试过后立刻回忆内容，针对弱点和错误进行学习完善</strong>。我的一般做法是从面试地点出来后用手机录制自己的快速复述，并务必在当年做书面化整理。</p>

<h2 id="section-14">其它</h2>

<ul>
  <li>运动健康统计缺乏数据，期待小米手环能开放 API；</li>
  <li>阅读论文篇数、写代码行数未知，明年要做规范的整理和统计，不是说越多越好，而是要用心积累；</li>
  <li>和父母的联系次数很多，和父母呆在一起的天数很少，想想就要工作了，可以拿来陪父母的时间又少了，不免伤感。</li>
</ul>

<h2 id="section-15">总结</h2>

<p>2014年，自己最深刻的一个感受是自身想法、观念变化越来越快，因为即将面临的是人生很重要的过渡期——从读书到工作。有压力，才会逼迫自己去思考之前懒得思考的问题。随着经验的累积、信息的收集与分析、和他人沟通讨论的深入，逐渐在自己身上发现了一些可喜的变化。不夸张地说，有时候回头看一个月前的自己，都会觉得幼稚可笑。</p>

<p><strong>有方向的忙碌才是充实</strong>，庆幸自己在2014年即将结束的时候，似乎找到了自己的方向，而属于2014年的诸多遗憾，希望在新的一年一一实现。</p>

<script type="text/javascript" src="http://frank19900731.github.io/javascripts/Chart.js"></script>

<script type="text/javascript" src="http://frank19900731.github.io/javascripts/mychart.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pocket 类目标签的制订]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/20/pocket-lei-mu-biao-qian-de-zhi-ding/"/>
    <updated>2014-11-20T00:52:08+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/20/pocket-lei-mu-biao-qian-de-zhi-ding</id>
    <content type="html"><![CDATA[<!-- excerpt start -->

<p>由于Pocket自身不带有分类或建目录的功能，所以类目只能以标签的方式体现。综合个人使用习惯并参考了 <a href="http://www.zwbk.org/MyLemmaShow.aspx?lid=116762#137">《中文百科知识体系目录》</a>，特制订分类体系。此分类体系亦适用于其它知识积累工具。</p>

<h2 id="section">2014年11月20日第一次制订</h2>

<p><strong>一级类目共20个，其中只有信息科学下设二级类目，有21个。</strong></p>

<p><strong>各类目间可能有重叠，特定网页可能与多个类目相关，由本人判决该网页的最大相关类目。</strong></p>

<p><strong>如果判决标准中存在某种规律或约定，会在今后修订时注明。</strong></p>

<ol>
  <li>宗教哲学   </li>
  <li>政治政策</li>
  <li>法律法规  </li>
  <li>文化艺术     </li>
  <li>历史典故</li>
  <li>天文地理 </li>
  <li>社会科学</li>
  <li>健康养生</li>
  <li>生物医学</li>
  <li>数理科学
<!-- excerpt end --></li>
  <li>化学化工</li>
  <li>农林环境</li>
  <li>工程技术</li>
  <li>信息科学
    <ul>
      <li>编程方法</li>
      <li>实用软件</li>
      <li>脚本编程</li>
      <li>网页编程</li>
      <li>网页设计</li>
      <li>网络安全</li>
      <li>操作系统</li>
      <li>数据结构</li>
      <li>算法设计</li>
      <li>系统架构</li>
      <li>产品设计</li>
      <li>机器学习</li>
      <li>数据挖掘</li>
      <li>统计</li>
      <li>优化建模</li>
      <li>大数据处理</li>
      <li>计算机视觉</li>
      <li>自然语言处理</li>
      <li>业界动态</li>
      <li>互联网创业</li>
      <li>互联网其它</li>
    </ul>
  </li>
  <li>经济管理</li>
  <li>军事科技  </li>
  <li>人物</li>
  <li>效率</li>
  <li>吃喝玩乐</li>
  <li>其它知识</li>
</ol>

<p><strong>2014年12月8日第一次修订</strong></p>

<p><strong>信息科学</strong> 一级分类 中补充 <strong>数据库</strong> 二级分类。</p>
]]></content>
  </entry>
  
</feed>
