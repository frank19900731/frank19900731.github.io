<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac 使用 | Blog of 太极儒]]></title>
  <link href="http://frank19900731.github.io/blog/category/mac-shi-yong/atom.xml" rel="self"/>
  <link href="http://frank19900731.github.io/"/>
  <updated>2015-03-08T23:29:03+08:00</updated>
  <id>http://frank19900731.github.io/</id>
  <author>
    <name><![CDATA[Frank Song]]></name>
    <email><![CDATA[scr_0731@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[每周一软之 FocusMask]]></title>
    <link href="http://frank19900731.github.io/blog/2015/03/08/mei-zhou-yi-ruan-zhi-focusmask/"/>
    <updated>2015-03-08T20:39:54+08:00</updated>
    <id>http://frank19900731.github.io/blog/2015/03/08/mei-zhou-yi-ruan-zhi-focusmask</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">功能介绍</a></li>
  <li><a href="#section-1">界面设计</a></li>
  <li><a href="#section-2">易用性</a></li>
  <li><a href="#section-3">稳定性</a></li>
  <li><a href="#section-4">跨平台</a></li>
  <li><a href="#section-5">类似软件</a></li>
  <li><a href="#section-6">闪光点</a></li>
  <li><a href="#section-7">缺点</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">功能介绍</h2>

<p><a href="http://tentrip.net/focusmask/">FocusMask</a> 是一款效率软件，通过在屏幕上隔离出某一区域（其它区域被遮罩），使用户专注于某项工作，比如隔离出编辑环境以专注写作。</p>

<p>FocusMask 虽然只是一招鲜，但个人觉得它提供的<strong>遮罩功能</strong>在日常工作学习中还是很实用的。类似于截图，FocusMask 的遮罩区域可以是框定的，也可以是当前窗口或视图，均可由快捷键触发。</p>

<p><a href="/img/post/2015-3/10.png" class="img-up" title="FocusMask 设置"><img class="imgcenter-no-shadow" src="/img/post/2015-3/10.png" width="80%" title="FocusMask 设置" ></a></p>

<!-- excerpt end -->

<p>以 Byword 写作为例，选定工作区域，之外的区域被遮罩。可以<strong>调整遮罩层的透明度</strong>，设定<strong>是否允许在工作区域外点击鼠标</strong>。</p>

<p><a href="/img/post/2015-3/11.png" class="img-up" title="区域框定"><img class="imgcenter" src="/img/post/2015-3/11.png" width="90%" title="区域框定" ></a></p>

<p><a href="/img/post/2015-3/12.png" class="img-up" title="运行效果"><img class="imgcenter" src="/img/post/2015-3/12.png" width="90%" title="运行效果" ></a></p>

<p>如此，菜单栏、Docker 以及通知栏均不可见，可以在编辑区域安心工作了……</p>

<h2 id="section-1">界面设计</h2>

<p>界面设计简陋。</p>

<h2 id="section-2">易用性</h2>

<p>易于使用。</p>

<h2 id="section-3">稳定性</h2>

<p>稳定性好。</p>

<h2 id="section-4">跨平台</h2>

<p>无。</p>

<h2 id="section-5">类似软件</h2>

<p>迫使用户专注的一般做法是<code>屏蔽</code>。</p>

<p><code>视觉屏蔽</code>，比如 FocusMask，又比如 <a href="http://willmore.eu/software/isolator/">Isolator</a>，后者将工作区域设置为处于输入焦点的软件，之外的区域同样是遮罩。Isolator 相比 FocusMask 为遮罩提供了更多选项，可以设置颜色，也可以设置滤镜，不过滤镜功能在 OS X 10.8 及以上的系统中已无法使用。</p>

<p><code>听觉屏蔽</code>，推荐 <a href="https://coffitivity.com/">Coffitivity</a>，播放咖啡馆白噪音，网页版、PC 客户端、移动版均有提供。</p>

<p>比<code>视觉屏蔽</code>、<code>听觉屏蔽</code>更彻底的是<code>接触屏蔽</code>，比如禁止浏览器对某些网址的访问，禁止某时段某些软件的开启。</p>

<ul>
  <li>命令行工具
    <ul>
      <li><a href="https://github.com/amoffat/focus">Focus</a>，Python 编写，可屏蔽网址；</li>
      <li><a href="https://github.com/xtrementl/focus">Focus</a>，Python 编写，是一款强大的<strong>任务管理工具</strong>，除了可以屏蔽网址、软件，还可以给任务关联需要开启的软件、需要运行的脚本，也可以记录工作时间，生成简单的报告，称得上是极客工具；</li>
    </ul>
  </li>
  <li>图形界面工具
    <ul>
      <li><a href="http://selfcontrolapp.com/">SelfControl</a> ，<a href="https://github.com/SelfControlApp/selfcontrol">开源软件</a>，可屏蔽网址；</li>
      <li><a href="http://www.publicspace.net/Vitamin-R/">Vitamin-R</a>，大体是一款番茄工作法工具，可记录工作历史并生成图表，可于工作时段屏蔽指定软件，也可播放咖啡馆白噪音；</li>
      <li><a href="https://heyfocus.com/">Focus</a> ，屏蔽指定网址、软件，也可以在命令行操作，曾是 <a href="https://github.com/bradjasper/Focus">开源软件</a>。</li>
    </ul>
  </li>
</ul>

<h2 id="section-6">闪光点</h2>

<ul>
  <li>工作区域选择方式多样；</li>
  <li>可以屏蔽工作区域外的鼠标点击。</li>
</ul>

<h2 id="section-7">缺点</h2>

<p>遮罩区域样式单一，应允许自定义背景。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每周一软之 Smart Scroll]]></title>
    <link href="http://frank19900731.github.io/blog/2015/03/01/mei-zhou-yi-ruan-zhi-smart-scroll/"/>
    <updated>2015-03-01T12:32:51+08:00</updated>
    <id>http://frank19900731.github.io/blog/2015/03/01/mei-zhou-yi-ruan-zhi-smart-scroll</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">功能介绍</a></li>
  <li><a href="#section-1">界面设计</a></li>
  <li><a href="#section-2">易用性</a></li>
  <li><a href="#section-3">稳定性</a></li>
  <li><a href="#section-4">跨平台</a></li>
  <li><a href="#section-5">类似软件</a></li>
  <li><a href="#section-6">闪光点</a></li>
  <li><a href="#section-7">缺点</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">功能介绍</h2>

<p><a href="http://www.marcmoini.com/sx_en.html">Smart Scroll</a> 一款<strong>鼠标/触摸板辅助软件</strong>，为滚轮或面板的滚动操作添加智能因素，显示于 System Preferences 面板中。</p>

<p>Smart Scroll 主要有六大功能，与其界面设计相对应。</p>

<ul>
  <li>Scroll Wheel（鼠标设备） 设置
    <ul>
      <li>调节滚动的速度、方向（Reverse）、距离（Range for a single tick）与惯性（Inertia+）；</li>
      <li>测试表明，<strong>在不同速度设置下</strong>，<strong>均可以实现平滑滚动</strong>；</li>
      <li>Multi-Touch（触摸设备）中的功能设置同 Scroll Wheel。</li>
    </ul>
  </li>
</ul>

<p><a href="/img/post/2015-3/1.png" class="img-up" title="Scroll Wheel+"><img class="imgcenter-no-shadow" src="/img/post/2015-3/1.png" width="80%" title="Scroll Wheel+" ></a></p>

<!-- excerpt end -->

<ul>
  <li>Hover Scroll
    <ul>
      <li>可以设置窗口上下各一定区域，使得鼠标指针在该区域悬停时，窗口自动向上或向下滚动，速度可调整；</li>
      <li>鼠标指针越接近窗口上/下部，窗口向上/下滚动的速度越快（<strong>可能引发视觉抖动</strong>）；</li>
      <li>测试表明，鼠标指针需要<strong>以慢速进入设定区域</strong>，过快则无法触发 Hover Scroll。</li>
    </ul>
  </li>
</ul>

<p><a href="/img/post/2015-3/3.png" class="img-up" title="Hover Scroll"><img class="imgcenter-no-shadow" src="/img/post/2015-3/3.png" width="80%" title="Hover Scroll" ></a></p>

<ul>
  <li>Auto Scroll
    <ul>
      <li>基于 Hover Scroll，以快捷键触发，鼠标指针被自动移到窗口下部，触发向下滚动操作。</li>
    </ul>
  </li>
</ul>

<p><a href="/img/post/2015-3/4.png" class="img-up" title="Auto Scroll"><img class="imgcenter-no-shadow" src="/img/post/2015-3/4.png" width="80%" title="Auto Scroll" ></a></p>

<ul>
  <li>Grab Scroll
    <ul>
      <li>仅支持鼠标，拖拽页面滚动，类似于 <strong>PDF 阅读器中的手形图标拖动效果</strong>；</li>
      <li>同样可以调节速度、方向与惯性；</li>
      <li>Grab Scroll 可以采用快捷键+鼠标键的方式触发，以下图 <code>Option + Command + Secondary Button</code> 这一组合为例，需要先按下 Option 并<strong>保持</strong>，然后点击 Command（<strong>需抬起</strong>），之后按下鼠标右键方可拖动……</li>
    </ul>
  </li>
</ul>

<p><a href="/img/post/2015-3/5.png" class="img-up" title="Grab Scroll"><img class="imgcenter-no-shadow" src="/img/post/2015-3/5.png" width="80%" title="Grab Scroll" ></a></p>

<ul>
  <li>Scroll Keys
    <ul>
      <li>滚动的快捷键操作，上下左右类似于箭头方向键；</li>
      <li>测试表明，快捷键滚动比箭头方向键滚动<strong>步长更细</strong>，<strong>也更平滑</strong>；</li>
    </ul>
  </li>
</ul>

<p><a href="/img/post/2015-3/6.png" class="img-up" title="Scroll Keys"><img class="imgcenter-no-shadow" src="/img/post/2015-3/6.png" width="80%" title="Scroll Keys" ></a></p>

<ul>
  <li>Vector Scroll
    <ul>
      <li>仅支持鼠标，鼠标键的点击释放构成向量，向量方向确定滚动方向，向量的模确定滚动速度；</li>
      <li>如果设置 Secondary Button 触发，则右键菜单无法弹出，只能通过 Ctrl + Primary Button（鼠标左键） 查看。</li>
    </ul>
  </li>
</ul>

<p><a href="/img/post/2015-3/7.png" class="img-up" title="Vector Scroll"><img class="imgcenter-no-shadow" src="/img/post/2015-3/7.png" width="80%" title="Vector Scroll" ></a></p>

<h2 id="section-1">界面设计</h2>

<p>界面设计较美观。</p>

<h2 id="section-2">易用性</h2>

<p>用法简单，只是初始需要设置适合自己使用习惯的参数。</p>

<h2 id="section-3">稳定性</h2>

<p>稳定性好。</p>

<h2 id="section-4">跨平台</h2>

<p>无。</p>

<h2 id="section-5">类似软件</h2>

<p>作为鼠标/触摸板辅助软件中的一款，Smart Scroll 专注于<strong>滚动的定制优化</strong>，而实际上这些设备有待发掘的远不止于此，以下两款软件可以提供更加丰富实用的定制功能。</p>

<ul>
  <li><a href="http://www.jitouch.com/">Jitouch</a> 也是安装后位于 System Preferences 中的一款软件，支持鼠标/触摸板手势、字符笔画识别，并可<strong>关联动作/快捷键</strong>。</li>
</ul>

<p><a href="/img/post/2015-3/8.png" class="img-up" title="Jitouch"><img class="imgcenter-no-shadow" src="/img/post/2015-3/8.png" width="80%" title="Jitouch" ></a></p>

<ul>
  <li><a href="http://www.boastr.de/">Better Touch Tool</a> 是一款功能更加强大的辅助工具，几乎涵盖了 Smart Scroll、Jitouch 的所有功能，可定制项很多，有一种<strong>视觉压迫感</strong>，一看就是给 Geek 用的……
    <ul>
      <li>支持鼠标、触摸板、键盘快捷键、Apple Remote、Better Touch Tool 移动端（iOS）等的辅助功能定制；</li>
      <li>手势、动作远较 Jitouch 丰富，也正因为多，<strong>一些手势的识别准确性会降低</strong>，<strong>定制项目多也更容易引发误操作</strong>。</li>
    </ul>
  </li>
</ul>

<p><a href="/img/post/2015-3/9.png" class="img-up" title="Better Touch Tool"><img class="imgcenter-no-shadow" src="/img/post/2015-3/9.png" width="80%" title="Better Touch Tool" ></a></p>

<h2 id="section-6">闪光点</h2>

<ul>
  <li>滚动速度可调，且效果平滑，Hover Scroll 与 Scroll Keys 也能做到平滑滚动。</li>
</ul>

<h2 id="section-7">缺点</h2>

<ul>
  <li>Grab Scroll、Vector Scroll 只能配合鼠标使用，对于只用触摸板的用户就鸡肋了，但这些功能完全可以配合触摸板使用（严格说 Vector Scroll 已经可以配合触摸板使用，但只能使用 Secondary Button 触发，而之前我们提到这会影响右键菜单的查看）；</li>
  <li>Hover Scroll 速度快时有轻微抖动（当然，<strong>也很可能是我显卡差</strong>）。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每周一软之 VideoGIF]]></title>
    <link href="http://frank19900731.github.io/blog/2015/02/20/mei-zhou-yi-ruan-zhi-videogif/"/>
    <updated>2015-02-20T19:46:58+08:00</updated>
    <id>http://frank19900731.github.io/blog/2015/02/20/mei-zhou-yi-ruan-zhi-videogif</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">功能介绍</a></li>
  <li><a href="#section-1">界面设计</a></li>
  <li><a href="#section-2">易用性</a></li>
  <li><a href="#section-3">稳定性</a></li>
  <li><a href="#section-4">跨平台</a></li>
  <li><a href="#section-5">类似软件</a></li>
  <li><a href="#section-6">闪光点</a></li>
  <li><a href="#section-7">缺点</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">功能介绍</h2>

<p><a href="http://www.pearlmountainsoft.com/videogif/">VideoGIF</a> 是一款截取视频内容生成 GIF (Graphics Interchange Format) 格式图片的工具。</p>

<p>VideoGIF 支持</p>

<ul>
  <li>摄像头视频采集；</li>
  <li>拖拽选择待转换内容的起止时间点；</li>
  <li>区域裁剪，自定义图像尺寸；</li>
  <li><strong>添加文字、图像元素</strong>，并设定出现的起止时间；</li>
  <li>调整图片色彩指标，包括亮度、对比度等；</li>
  <li>导出 GIF 时设定帧率/帧数+延迟，可自动优化文件体积。</li>
</ul>

<!-- excerpt end -->

<p><strong>功能界面</strong>：</p>

<p><a href="/img/post/2015-2/16.png" class="img-up" title="功能界面"><img class="imgcenter" src="/img/post/2015-2/16.png" width="90%" title="功能界面" ></a></p>

<p><strong>导出界面</strong>：</p>

<p><a href="/img/post/2015-2/17.png" class="img-up" title="导出界面"><img class="imgcenter" src="/img/post/2015-2/17.png" width="90%" title="导出界面" ></a></p>

<p>VideoGIF 可以帮助我们方便地从影视作品中导出<strong>精（dou）彩（bi）</strong>片段，或从录屏中导出一段演示。</p>

<p><a href="/img/post/2015-2/2.gif" class="img-up" title="逗比片段"><img class="imgcenter" src="/img/post/2015-2/2.gif" width="80%" title="逗比片段" ></a></p>

<p>除视频外，我们可能还需要将多幅图片拼成 GIF，VideoGIF 的制作方相应提供了 <a href="http://www.pearlmountainsoft.com/picgif/">PicGIF</a>，会在 <a href="#section-5">类似软件</a> 中提到。</p>

<h2 id="section-1">界面设计</h2>

<p>简洁美观。</p>

<p><a href="/img/post/2015-2/18.png" class="img-up" title="VideoGIF 界面"><img class="imgcenter" src="/img/post/2015-2/18.png" width="80%" title="VideoGIF 界面" ></a></p>

<h2 id="section-2">易用性</h2>

<p>使用方便，会拖拽起止范围、会设置总帧数/帧率即可。</p>

<h2 id="section-3">稳定性</h2>

<p>稳定性好。</p>

<h2 id="section-4">跨平台</h2>

<p>无。</p>

<h2 id="section-5">类似软件</h2>

<ul>
  <li><a href="http://www.pearlmountainsoft.com/picgif/">PicGIF</a>，根据多幅图片生成 GIF，基本功能如裁剪、调色等同 VideoGIF，也<strong>支持视频输入</strong>，会首先根据用户的起止时间和帧率/帧数设置从视频中提取相应数量的图片，之后处理同多幅图片；</li>
  <li><a href="http://www.helloresolven.com/portfolio/gifbrewery/">GIF Brewery</a>，除界面（略丑），功能与 VideoGIF 完全一致……</li>
  <li><a href="http://www.cockos.com/licecap/">LICEcap</a>，<strong>录屏 + 转 GIF</strong>，损失一些定制灵活性，但操作快捷；</li>
  <li><strong>Photoshop</strong> 可将多幅图片转 GIF，网上有相关 <a href="http://jingyan.baidu.com/article/9158e0006047daa2541228f3.html">教程</a>；</li>
  <li>威锋网上有一篇 <a href="http://bbs.feng.com/read-htm-tid-6980293.html">Mac 下 GIF 制作软件</a> 的讨论，其中的软件在功能、界面上都不超过 VideoGIF、PicGIF；</li>
  <li><strong>命令行工具</strong>，<a href="https://www.ffmpeg.org/">ffmpeg</a>（根据视频生成 GIF 动画）、<a href="http://www.lcdf.org/~eddietwo/gifsicle/">gifsicle</a>（GIF 的创建、拆解、编辑、优化等）
    <ul>
      <li>一个使用案例可见 <a href="http://www.ideawu.net/blog/archives/856.html">OS X 屏幕录制视频转 GIF 动画</a>。</li>
    </ul>
  </li>
</ul>

<h2 id="section-6">闪光点</h2>

<ul>
  <li>功能完善，操作简便。</li>
</ul>

<h2 id="section-7">缺点</h2>

<ul>
  <li>不明白为什么要和 PicGIF 分为两个软件，就为了多挣一分钱么……</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每周一软之 SiteSucker]]></title>
    <link href="http://frank19900731.github.io/blog/2015/02/12/mei-zhou-yi-ruan-zhi-sitesucker/"/>
    <updated>2015-02-12T01:38:02+08:00</updated>
    <id>http://frank19900731.github.io/blog/2015/02/12/mei-zhou-yi-ruan-zhi-sitesucker</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">功能介绍</a></li>
  <li><a href="#section-1">界面设计</a></li>
  <li><a href="#section-2">易用性</a></li>
  <li><a href="#section-3">稳定性</a></li>
  <li><a href="#section-4">跨平台</a></li>
  <li><a href="#section-5">类似软件</a></li>
  <li><a href="#section-6">闪光点</a></li>
  <li><a href="#section-7">缺点</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">功能介绍</h2>

<p><a href="http://www.sitesucker.us/mac/mac.html">SiteSucker</a> 是一款站点下载软件，<strong>复制站点结构</strong>，<strong>下载相关资源文件</strong>，包括 HTML、JS、CSS、图片、视频等，以方便离线查看。</p>

<p>离线查看主要有两种原因，一种是觉得很有价值，比如 API 文档，需要随时查看；另一种就是网页反应太慢，不如一次性下载完成，本地快速查看。基于第二种原因，我用 SiteSucker 对 <a href="https://www.openproject.org/">OpenProject 站点</a> 做了 <a href="http://frank19900731.github.io/ebook/openproject/">镜像</a>，看起来不错的样子。</p>

<p>作为一款爬虫软件，SiteSucker 的下载设置和 wget、curl 等命令行工具的参数设置是相似的，它的优势主要体现在：</p>

<ol>
  <li>图形化界面操作，免除参数记忆，配置可以保存再利用；</li>
  <li>可以方便地暂停、继续、终止、保存抓取过程；</li>
  <li>自带详细的日志输出，为参数调整提供有价值的参考。</li>
</ol>

<p>图形界面设置的精细程度毕竟不如命令行工具，不过对于常见的教程备份、博客备份等需求，我觉得还是绰绰有余的；而更复杂的任务，可能需要<strong>根据抓取结果迭代调整参数设置</strong>来完成。对于一些 <strong>JS 效果复杂</strong>的网页，可能不仅是 SiteSucker，连 wget 都无法胜任了（因为没法模拟一些人为操作去获取链接）。</p>

<!-- excerpt end -->

<p>接下来，我大概从一个用户需求的角度介绍 SiteSucker 的功能。</p>

<ul>
  <li><strong>首先指定种子 url 作为起始，从抓取页面中提取新的 url 作为接下来的抓取目标，可想而知这个过程可能无穷尽的进行下去，如何界定范围？</strong>
    <ul>
      <li>SiteSucker 对 <code>Path Constraints</code> 提供 5 种设置，假设种子 url 是 http://frank19900731.github.io/wx/archives/
        <ul>
          <li><strong>None</strong>  无限制 ；</li>
          <li><strong>Host</strong>  与种子 url 属同一个（子）域，即 http://frank19900731.github.io/*；</li>
          <li><strong>Subdomains</strong>   可以是其它子域（也包括父域），比如 http://hello.github.io/<em>，http://github.io/</em>，但不可以是国家代码子域，比如（如果有的话）http://frank19900731.github.io.hk；</li>
          <li><strong>Directory</strong>  与种子 url 属于统一路径，即 http://frank19900731.github.io/wx/archives/*；</li>
          <li><strong>Paths Settings</strong>  当前 url + 自定义 <code>Paths Settings</code>。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>接上条，如何自定义</strong> <code>Paths Settings</code> <strong>?</strong>
    <ul>
      <li><code>Paths to Include</code> &amp; <code>Paths to Exclude</code>，顾名思义定义希望被抓取/不希望被抓取的模式；</li>
      <li>可以采用正则表达式定义；</li>
      <li>不论 <code>Path Constraints</code> 的选择，<code>Paths Settings</code> 始终是生效的，引用 <a href="http://ricks-apps.com/osx/sitesucker/archive/2.x/2.6.x/2.6/manuals/en/pgs/Overview.html">官方教程</a> 的一段话总结 <strong>SiteSucker 如何判定一个 url 是否该被抓取</strong>：</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>If this is the <strong>original URL</strong> (that is, the URL specified in the Web URL text box), then SiteSucker downloads the file.</p>

  <p>Otherwise, if the URL begins with one of the strings (or matches one of the regular expressions) in the <strong>Paths to Exclude</strong> text box, then the file is not downloaded.</p>

  <p>Otherwise, if the URL meets the requirements of the current <strong>Path Constraint</strong> setting, then the file is downloaded.</p>

  <p>Otherwise, if the URL begins with one of the strings (or matches one of the regular expressions) in the <strong>Paths to Include</strong> text box, then SiteSucker downloads the file.</p>

  <p>Otherwise, if the <strong>Include Supporting Files</strong> setting is on and the URL references a non-HTML file type, then SiteSucker downloads the file.</p>

  <p>Otherwise, SiteSucker does not download the file.</p>
</blockquote>

<ul>
  <li><strong>设置了</strong>  <code>Path Constraints</code>、<code>Paths Settings</code>，<strong>但还是可能有抓取遗漏，如何查看漏抓 url ？</strong>
    <ul>
      <li>勾选 <code>Export External Links</code>，下载目录中名为 _ExternalLinks.html 的文件记录了漏抓 url，可以将他们填入 <code>Paths Settings</code>，重新抓取。</li>
    </ul>
  </li>
  <li><strong>一些网站需要登录才能抓取，在 SiteSucker 中如何处理？</strong>
    <ul>
      <li>一种登录方式是<strong>弹出框</strong>，比如路由器管理页面，SiteSucker 会首先查询 Keychain 中的密码记录，如果没有则弹出登陆框让用户输入；</li>
      <li>另一种登录方式是<strong>页面登录</strong>，比如人人网。菜单栏点击 Control -&gt; Open Browser 弹出浏览框，在浏览框中登录即可下载，如下图所示。</li>
    </ul>
  </li>
</ul>

<p><a href="/img/post/2015-2/14.png" class="img-up" title="登录下载"><img class="imgcenter" src="/img/post/2015-2/14.png" width="70%" title="登录下载" ></a></p>

<ul>
  <li><strong>不希望抓取某些类型的文件，比如压缩包、视频等，该如何设置？</strong>
    <ul>
      <li><code>File Types</code> 中选择 <code>Disallow Specified File Types</code>，然后指定相关文件类型。</li>
    </ul>
  </li>
  <li><strong>希望同时抓取多个网页，怎样设置连接数？</strong>
    <ul>
      <li>Preferences 中可以设置连接数，如下图。</li>
    </ul>
  </li>
</ul>

<p><a href="/img/post/2015-2/13.png" class="img-up" title="设置连接数"><img class="imgcenter" src="/img/post/2015-2/13.png" width="60%" title="设置连接数" ></a></p>

<ul>
  <li><strong>一些站点需要隔段时间抓去一次（比如博客），文件覆盖方式如何设置？</strong>
    <ul>
      <li><code>File Replacement</code> 提供三种选择
        <ul>
          <li><strong>Never</strong>  不覆盖；</li>
          <li><strong>Always</strong>  总是覆盖；</li>
          <li><strong>With Newer</strong>  保留较新的那个。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>如何将 HTML 中的文件链接（如 JS、CSS）修改为本地引用？</strong>
    <ul>
      <li><code>File Modification</code> 设置为 <strong>Localize</strong></li>
    </ul>
  </li>
  <li><strong>如何突破 robots.txt 的限制（不建议）？</strong>
    <ul>
      <li>勾选 <code>Ignore Robot Exclusions</code>。</li>
    </ul>
  </li>
  <li><strong>如何查看抓取日志？</strong>
    <ul>
      <li><code>Logs</code> 中勾选日志级别，log 文件会生成在已设置的下载文件夹中，有如下格式的记录。分析未抓取链接的原因，进行可能的参数调整。</li>
    </ul>
  </li>
</ul>

<p><code>bash SiteSucker 日志记录
2/12/15, 11:55:35 AM - MEDIA TYPE: "http://frank19900731.github.io/" has a media type of
	text/html
...
2/12/15, 11:55:35 AM - WARNING: Unable to download "http://blog.sina.com/frank19900731",
	referenced from "http://frank19900731.github.io",
	because its path is not allowed
2/12/15, 11:55:35 AM - WARNING: Unable to download "http://weibo.sina.com/frank19900731",
	referenced from "http://frank19900731.github.io",
	because its path is not allowed
...
2/12/15, 11:55:35 AM - WARNING: May not be able to follow all links on "http://frank19900731.github.io"
	because it uses JavaScript
2/12/15, 11:55:35 AM - HISTORY: Downloaded "http://frank19900731.github.io"
2/12/15, 11:55:35 AM - MEDIA TYPE: "http://frank19900731.github.io/favicon.ico" has a media type of
	image/x-icon
2/12/15, 11:55:36 AM - HISTORY: Downloaded "http://frank19900731.github.io/favicon.ico"
2/12/15, 11:55:36 AM - MEDIA TYPE: "http://frank19900731.github.io/javascripts/modernizr.custom.js" has a media type of
	application/javascript
...
</code></p>

<p>其它参数诸如最大扩展层数、默认页面编码、超时设置等都是网页抓取的基本设置，不再讨论。更多功能使用详见 <a href="http://ricks-apps.com/osx/sitesucker/archive/2.x/2.6.x/2.6/manuals/en/pgs/Overview.html">官方教程</a>。</p>

<h2 id="section-1">界面设计</h2>

<p>简单直接。</p>

<p><a href="/img/post/2015-2/15.png" class="img-up" title="SiteSucker 界面"><img class="imgcenter" src="/img/post/2015-2/15.png" width="75%" title="SiteSucker 界面" ></a></p>

<h2 id="section-2">易用性</h2>

<p>如<a href="#section">功能介绍</a>中所述，不同站点的提取难度不尽相同，摸索<strong>一套行之有效的参数</strong>的过程可能会比较复杂。</p>

<h2 id="section-3">稳定性</h2>

<p>稳定性好。</p>

<h2 id="section-4">跨平台</h2>

<p>支持 <a href="http://www.sitesucker.us/ios/ios.html">iOS</a>，网页站点可以打包在 iOS 和 OSX 间传输，对应 File -&gt; (Un)Pack Downloads 的功能。</p>

<h2 id="section-5">类似软件</h2>

<ul>
  <li>命令行工具 <a href="http://curl.haxx.se/">curl</a>、 <a href="https://www.gnu.org/software/wget/">wget</a>
    <ul>
      <li><strong>上手简单</strong>，以 wget 为例，抓取一般站点只需 <code>wget -r -p -np -k url</code> 一条命令；</li>
      <li>深入研究一下，可以进行更精细的设置，也可二次开发；</li>
      <li>也有单条 wget 处理不好的情况，比如一些页面代码中可见 <code>css?v=x.x.x</code> 的写法，一般是为了 <a href="http://blog.csdn.net/zanychou/article/details/8813076">清除客户端缓存</a>，但 wget 会将其直接保存为 <code>css?v=x.x.x</code>（于是离线站点无法加载这一文件），可见这个 <a href="http://superuser.com/questions/703435/using-wget-to-download-css-with-get-params">提问</a>，而不是像 SiteSucker 那样识别并保存为 css 文件。</li>
    </ul>
  </li>
  <li>Adobe Acrobat
    <ul>
      <li>Adobe Acrobat 支持<strong>从网页创建 PDF</strong>，也可以抓取站点，如下图。</li>
    </ul>
  </li>
</ul>

<p><a href="/img/post/2015-2/12.png" class="img-up" title="Adobe Acrobat 抓取页面"><img class="imgcenter" src="/img/post/2015-2/12.png" width="80%" title="Adobe Acrobat 抓取页面" ></a></p>

<ul>
  <li><a href="http://www.sentenzadesktop.com/easy-script-copier/">Easy Script Copier</a>
    <ul>
      <li>抓取单个页面及相应的 JS、CSS，<strong>扒取网页格式</strong>很管用。</li>
    </ul>
  </li>
  <li>网页抓取框架，如 <a href="http://nutch.apache.org/">Apache Nutch</a>、<a href="https://github.com/scrapy/scrapy">Scrapy</a> 等，功能自然更强大，对普通用户有较高的使用门槛。然而，对于大多数日常需求，还是有种<strong>大炮打蚊子</strong>的赶脚。</li>
</ul>

<h2 id="section-6">闪光点</h2>

<ul>
  <li>可视化定制，功能丰富，特别是支持<strong>登录抓取</strong>。</li>
</ul>

<h2 id="section-7">缺点</h2>

<p>官网上有介绍 SiteSucker 的 <a href="http://www.sitesucker.us/mac/limitations.html">Limitations</a>。</p>

<p>总的来说是良心之作，硬要说缺点不如说是建议：如果能有一个插件系统，用户可以开发、分享网页处理过程中某个具体处理环节的代码就更好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决 Mac 下 zip 压缩文件在 Windows 中显示乱码的问题]]></title>
    <link href="http://frank19900731.github.io/blog/2015/02/11/jie-jue-mac-xia-zip-ya-suo-wen-jian-zai-windows-xia-xian-shi-luan-ma-de-wen-ti/"/>
    <updated>2015-02-11T21:14:26+08:00</updated>
    <id>http://frank19900731.github.io/blog/2015/02/11/jie-jue-mac-xia-zip-ya-suo-wen-jian-zai-windows-xia-xian-shi-luan-ma-de-wen-ti</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">问题描述</a></li>
  <li><a href="#section-1">解决方案</a>    <ul>
      <li><a href="#keka">Keka</a></li>
      <li><a href="#p7zip-">右键菜单添加 p7zip 压缩</a></li>
    </ul>
  </li>
</ul>

<!-- excerpt start -->

<h2 id="section">问题描述</h2>

<p>Mac 下通过<strong>右键菜单中的 Compress</strong> 生成的压缩包，在 Windows 下解压缩可能出现乱码，如下图所示。</p>

<p><a href="/img/post/2015-2/5.png" class="img-up" title="Windows 上解压缩乱码"><img class="imgcenter" src="/img/post/2015-2/5.png" width="80%" title="Windows 上解压缩乱码" ></a></p>

<p>知乎上关于这个问题的 <a href="http://www.zhihu.com/question/19646289">解答</a> 是</p>

<blockquote>
  <p>Mac OS X 系统自带的压缩程序对 zip 文件名用 UTF-8 编码，但 zip 文件头中没有声明 PKZIP 高版本增加的 Unicode 位。Windows 会认为文件名是 ANSI 编码，结果显示乱码。</p>
</blockquote>

<p>经过简单的资料阅读和测试，我大概验证了下这种解释。</p>

<!-- excerpt end -->

<p>用 <code>locale</code> 命令查看我的 MBP 系统编码，确实是 UTF-8。</p>

<p><code>bash 系统编码
$&gt; locale
LANG="zh_CN.UTF-8"
LC_COLLATE="zh_CN.UTF-8"
LC_CTYPE="zh_CN.UTF-8"
LC_MESSAGES="zh_CN.UTF-8"
LC_MONETARY="zh_CN.UTF-8"
LC_NUMERIC="zh_CN.UTF-8"
LC_TIME="zh_CN.UTF-8"
LC_ALL=
</code></p>

<p>关于 <a href="http://baike.baidu.com/subview/185282/6215666.htm">ANSI 编码</a> ，在中文 Windows 系统中可能是 GBK 编码，而在其他语言的 Windows 系统又可能是别的。可以想见，Mac 下打出的压缩包在不同语言的 Windows 下会<strong>乱得各具特色</strong>。</p>

<p>当然，并不是所有解压缩软件都会一股脑地用 ANSI 编码进行解压。有的解压软件能够<strong>自动识别（文件名）编码</strong>并不确定的时候请使用者选择，比如 Mac 下的 <a href="http://unarchiver.c3.cx/unarchiver">The Unarchiver</a>。根据我在中文 Win7 下的测试，不同的解压缩软件对压缩文件的默认“理解”也是不同的，快压会解出乱码，而 7zip、Winrar 则可以正确解码。</p>

<p>一种直观的想法是，可以<strong>对文件名给出统一编码格式</strong>或者<strong>将编码写进压缩文件供解压缩程序读取</strong>。然而，<a href="http://marcosc.com/2008/12/zip-files-and-encoding-i-hate-you/">Zip files and Encoding – I hate you.</a> 中提到</p>

<blockquote>
  <p>The Zip spec does not seem to know that there are normalization models for UTF-8, when there are actually 4 (or more, because there is some non-standard ones too!). The Zip file gives no guidance as to how file names inside zip files are to be normalized.</p>

  <p>…</p>

  <p>The Zip spec says that the only supported encodings are CP437 and UTF-8, but everyone has ignored that. Implementers just encode file names however they want (usually byte for byte as they are in the OS… </p>
</blockquote>

<p>很遗憾，<strong>Mac 自带的 zip 命令</strong>就属于最后一句中 Implementers。虽然我不是很清楚“<strong>文件头中没有声明 PKZIP 高版本增加的 Unicode 位</strong>”中的细节，不过后来通过比较发现，无乱码和有乱码的 zip 文件，以 16进制方式查看时，文件名中<strong>中文字符的编码是一样的</strong>，<strong>不同之处确实在 zip 文件头</strong>。</p>

<h2 id="section-1">解决方案</h2>

<h3 id="keka">Keka</h3>

<p>知乎 <a href="http://www.zhihu.com/question/19646289">解答</a> 中顺带给出了解决方案</p>

<blockquote>
  <p>解决方法：用第三方软件。我推荐 Keka，支持格式多，加密、分卷、压缩比调节等功能都有，还支持中文菜单和界面。最重要的：免费。详细介绍在 <a href="http://t.cn/hGy98k">http://t.cn/hGy98k</a></p>
</blockquote>

<p>链接里给出的是 <a href="http://www.kekaosx.com/en/">Keka</a> 这个软件，下图是软件运行界面。</p>

<p><a href="/img/post/2015-2/6.png" class="img-up" title="Keka 运行界面"><img class="imgcenter" src="/img/post/2015-2/6.png" width="45%" title="Keka 运行界面" ></a></p>

<p>将需要打入压缩包的文件拖拽到软件界面里即可执行压缩。Keka 可以勾选 <code>Exclude Mac resource forks</code> 选项，这样压缩包中就不会出现 <strong>__MACOSX</strong> 或  <strong>.DS_Store</strong> 文件。经测试，快压的乱码问题也随之消失。</p>

<p>然而，由于此软件图标过于丑陋<strong>甚至会引发不适</strong>，使得一些用户不得不舍弃之。其实把 <code>/Applications/Keka.app/Contents/Resources</code> 下的 icns 图标文件替换下就好了。</p>

<p><a href="/img/post/2015-2/7.png" class="img-up" title="Keka Logo"><img class="imgcenter" src="/img/post/2015-2/7.png" width="40%" title="Keka Logo" ></a></p>

<p>以上为第一种方法。</p>

<ol>
  <li><a href="http://www.kekaosx.com/en/">Keka</a>，可行。不过每次<strong>打开软件并拖拽文件</strong>的操作会略显繁琐。</li>
  <li>上传到百度文库然后下载，无效。</li>
  <li>使用 YemuZip 等号称与 Windows 兼容的软件，无效，仅能删除 .DS_Store 一类的文件。</li>
  <li>修改后缀 zip 为 rar，无效。</li>
  <li>使用 p7zip 命令行，可行。</li>
</ol>

<p>2 - 4 分别是网上给出的“可行”方案，由于没有触及<strong>文件名编码格式</strong>这个核心问题，所以都不可行。</p>

<p>第 5 种方案 7z 命令行是可行的，且可以集成到右键菜单中，使用方便，下一段中会介绍。其实 <strong>Keka 也是基于 7z 压缩的</strong>，一方面可见 <code>/Applications/Keka.app/Contents/Resources</code> 目录下的可执行文件，另一方面，我对比了 Keka 和 7z 对同一个文本文件的压缩结果，<strong>二进制表示完全一致</strong>。</p>

<h3 id="p7zip-">右键菜单添加 p7zip 压缩</h3>

<p>首先通过 <code>brew install p7zip</code> 安装 p7zip，其它安装方式可见 <a href="http://www.7-zip.org/download.html">官网</a>。</p>

<p>7z 命令的使用方法是</p>

<p>```bash 7z help
$&gt; 7z
Usage: 7z <command /> [<switches>...] <archive_name> [<file_names>...]
       [&lt;@listfiles...&gt;]</file_names></archive_name></switches></p>

<commands>
  a: Add files to archive
  b: Benchmark
  d: Delete files from archive
  e: Extract files from archive (without using directory names)
  l: List contents of archive
  t: Test integrity of archive
  u: Update files to archive
  x: eXtract files with full paths
<switches>
  -ai[r[-|0]]{@listfile|!wildcard}: Include archives
  -ax[r[-|0]]{@listfile|!wildcard}: eXclude archives
  -bd: Disable percentage indicator
  -i[r[-|0]]{@listfile|!wildcard}: Include filenames
  -m{Parameters}: set compression Method
  -o{Directory}: set Output directory
  -p{Password}: set Password
  -r[-|0]: Recurse subdirectories
  -scs{UTF-8 | WIN | DOS}: set charset for list files
  -sfx[{name}]: Create SFX archive
  -si[{name}]: read data from stdin
  -slt: show technical information for l (List) command
  -so: write data to stdout
  -ssc[-]: set sensitive case mode
  -t{Type}: Set type of archive
  -u[-][p#][q#][r#][x#][y#][z#][!newArchiveName]: Update options
  -v{Size}[b|k|m|g]: Create volumes
  -w[{path}]: assign Work directory. Empty path means a temporary directory
  -x[r[-|0]]]{@listfile|!wildcard}: eXclude filenames
  -y: assume Yes on all queries
``` 

我们将要用到的参数是

- a 添加文件到压缩包；
- -t 压缩文件格式；
- -r 递归调用；
- -xr@ 列表文件，记录不希望被打入压缩包的文件/文件夹的名称。

我们希望在 Automator 中创建一个服务，接收文件名或文件夹名作为输入参数，编写脚本调用 7z 命令对输入文件进行压缩并输出到源文件夹；添加这个服务到右键菜单中，用法与系统自带的 Compress 相同，我们将其命名为 `Compress with 7z`。

一个动态效果是

<a href="/img/post/2015-2/1.gif" class="img-up" title="运行效果"><img class="imgcenter" src="/img/post/2015-2/1.gif" width="60%" title="运行效果" ></a>

以下是具体操作步骤。

- 打开 Automator，新建服务（Service）；
- Service receives selected **files or folders**, in **any application**；
- 搜索框输入 shell，拖拽 Run Shell Script 到右侧；
- 输入压缩脚本（之后详述）；
- 保存，将这个系统服务命名为 `Compress with 7z`；
- 进入 系统设置（System Preferences），选择 Keyboard -&gt; Shortcuts -&gt; Services，在 Files and Folders 列表中找到 `Compress with 7z`，勾选，设置快捷键（可选，如果无效则可能是冲突，换个试试）。

操作完成后，Automator 的显示为

<a href="/img/post/2015-2/8.png" class="img-up" title="Automator Compress with 7z"><img class="imgcenter" src="/img/post/2015-2/8.png" width="90%" title="Automator Compress with 7z" ></a>

系统设置（System Preferences）显示为

<a href="/img/post/2015-2/10.png" class="img-up" title="系统设置"><img class="imgcenter" src="/img/post/2015-2/10.png" width="70%" title="系统设置" ></a>

右键菜单显示为

<a href="/img/post/2015-2/9.png" class="img-up" title="右键菜单"><img class="imgcenter" src="/img/post/2015-2/9.png" width="40%" title="右键菜单" ></a>

关于**添加右键菜单项**可以参考 [Create Customize Shortcut In Mac’s Right Click Menu [Guide]](http://www.hongkiat.com/blog/customize-mac-right-click-menu/)。要注意的是，如果当前操作关联 5 个以上 Service，则这些 Service 会以二级菜单的形式显示，所以尽量在系统设置（System Preferences）-&gt; Keyboard 中把没用的勾选掉。

<a href="/img/post/2015-2/11.png" class="img-up" title="右键菜单，Service 较多"><img class="imgcenter" src="/img/post/2015-2/11.png" width="60%" title="右键菜单，Service 较多" ></a>

最后介绍脚本编写，参考自 [How to set Mac OS X's Default Compression Format?](http://superuser.com/questions/91147/how-to-set-mac-os-xs-default-compression-format)，给出代码和注释版代码。

代码

```bash  压缩脚本
set -e
compress_method="7z"
[[ $# = 1 ]] &amp;&amp; name=${1##*/} || name=archive
base=${1%/*}
cd "$base"

i=2
[[ -e "$name.$compress_method" ]] &amp;&amp; name="$name-$i"
while [[ -e "$name.$compress_method" ]]; do name="${name%??}-$((++i))"; done

echo ".DS_Store" &gt;&gt; .exclude_file_list
/usr/local/bin/7z a -r -t"$compress_method" ./"$name.$compress_method" "${@#"$base"/}" -xr@.exclude_file_list
rm .exclude_file_list
open -R ./"$name.$compress_method"
```

注释版代码

```bash  压缩脚本 注释版
set -e
# 设置压缩文件格式，可以修改为 zip、rar 等
compress_method="7z"
# 如果只有一个文件，则将压缩包命名为 文件名.7z；
# 如果有多个文件，则将压缩包命名为 archive.7z。
# ${1##*/} 的写法是路径模式匹配，参见 http://blog.sina.com.cn/s/blog_ac9fdc0b0101ls9n.html
[[ $# = 1 ]] &amp;&amp; name=${1##*/} || name=archive
# ${1%/*} 仍是路径模式匹配，获得待压缩文件、文件夹所在的文件夹
base=${1%/*}
cd "$base"

# 新压缩包编号递增，防止重名
i=2
[[ -e "$name.$compress_method" ]] &amp;&amp; name="$name-$i"
# ${name%??} 仍是路径模式匹配，删除最后两个字符，可以想见，编号是两位数及以上就不对了，不过 0-9 共 10 个也是够了
while [[ -e "$name.$compress_method" ]]; do name="${name%??}-$((++i))"; done

# 创建列表文件，该文件记录不希望被打入压缩包的文件/文件夹的名称，可以使用正则表达式
echo ".DS_Store" &gt;&gt; .exclude_file_list
# 调用 7z 进行压缩
# ${@#"$base"/} 是路径匹配，去除输入的文件列表的路径前缀
# -xr@.exclude_file_list 指定列表文件
/usr/local/bin/7z a -r -t"$compress_method" ./"$name.$compress_method" "${@#"$base"/}" -xr@.exclude_file_list
# 删除列表文件
rm .exclude_file_list
# 打开 Finder，显示压缩结果
open -R ./"$name.$compress_method"
```

## 总结

本文总结、探讨了网上关于 **Mac 下的 Zip 压缩包在 Windows 中显示乱码**这一问题的成因与解决方案，并提出了一个**右键菜单添加 p7zip 压缩**的解决方案。

最后，要推荐 [The Unarchiver Cmd Tools](http://unarchiver.c3.cx/commandline)，支持不同平台、支持文件名编码的自动识别或指定编码，相信会对常在 Linux、Windows 间转运压缩包的同学有所帮助。

## 附录

### The Unarchiver Cmd Tools 支持的编码格式

```bash 支持的编码格式
$&gt; unar -encoding list
Available encodings are:
  * macintosh: Western (Mac OS Roman)
  * x-mac-japanese: Japanese (Mac OS)
  * x-mac-trad-chinese: Traditional Chinese (Mac OS)
  * x-mac-korean: Korean (Mac OS)
  * x-mac-arabic: Arabic (Mac OS)
  * x-mac-hebrew: Hebrew (Mac OS)
  * x-mac-greek: Greek (Mac OS)
  * x-mac-cyrillic: Cyrillic (Mac OS)
  * x-mac-devanagari: Devanagari (Mac OS)
  * x-mac-gurmukhi: Gurmukhi (Mac OS)
  * x-mac-gujarati: Gujarati (Mac OS)
  * x-mac-thai: Thai (Mac OS)
  * x-mac-simp-chinese: Simplified Chinese (Mac OS)
  * x-mac-tibetan: Tibetan (Mac OS)
  * x-mac-centraleurroman: Central European (Mac OS)
  * x-mac-symbol: Symbol (Mac OS)
  * x-mac-dingbats: Dingbats (Mac OS)
  * x-mac-turkish: Turkish (Mac OS)
  * x-mac-croatian: Croatian (Mac OS)
  * x-mac-icelandic: Icelandic (Mac OS)
  * x-mac-romanian: Romanian (Mac OS)
  * x-mac-celtic: Celtic (Mac OS)
  * x-mac-gaelic: Gaelic (Mac OS)
  * x-mac-farsi: Farsi (Mac OS)
  * x-mac-ukrainian: Cyrillic (Mac OS Ukrainian)
  * x-mac-inuit: Inuit (Mac OS)
  * utf-16: Unicode (UTF-16)
  * utf-7: Unicode (UTF-7)
  * utf-8: Unicode (UTF-8)
  * utf-32: Unicode (UTF-32)
  * utf-16be: Unicode (UTF-16BE)
  * utf-16le: Unicode (UTF-16LE)
  * utf-32be: Unicode (UTF-32BE)
  * utf-32le: Unicode (UTF-32LE)
  * iso-8859-1: Western (ISO Latin 1)
  * iso-8859-2: Central European (ISO Latin 2)
  * iso-8859-3: Western (ISO Latin 3)
  * iso-8859-4: Central European (ISO Latin 4)
  * iso-8859-5: Cyrillic (ISO 8859-5)
  * iso-8859-6: Arabic (ISO 8859-6)
  * iso-8859-7: Greek (ISO 8859-7)
  * iso-8859-8: Hebrew (ISO 8859-8)
  * iso-8859-9: Turkish (ISO Latin 5)
  * iso-8859-10: Nordic (ISO Latin 6)
  * iso-8859-11: Thai (ISO 8859-11)
  * iso-8859-13: Baltic (ISO Latin 7)
  * iso-8859-14: Celtic (ISO Latin 8)
  * iso-8859-15: Western (ISO Latin 9)
  * iso-8859-16: Romanian (ISO Latin 10)
  * cp437: Latin-US (DOS)
  * cp737: Greek (DOS)
  * cp775: Baltic (DOS)
  * cp850: Western (DOS Latin 1)
  * cp851: Greek (DOS Greek 1)
  * cp852: Central European (DOS Latin 2)
  * cp855: Cyrillic (DOS)
  * cp857: Turkish (DOS)
  * cp860: Portuguese (DOS)
  * cp861: Icelandic (DOS)
  * cp862: Hebrew (DOS)
  * cp863: Canadian French (DOS)
  * cp864: Arabic (DOS)
  * cp865: Nordic (DOS)
  * cp866: Russian (DOS)
  * cp869: Greek (DOS Greek 2)
  * cp874: Thai (Windows, DOS)
  * cp932: Japanese (Windows, DOS)
  * cp936: Simplified Chinese (Windows, DOS)
  * cp949: Korean (Windows, DOS)
  * cp950: Traditional Chinese (Windows, DOS)
  * windows-1252: Western (Windows Latin 1)
  * windows-1250: Central European (Windows Latin 2)
  * windows-1251: Cyrillic (Windows)
  * windows-1253: Greek (Windows)
  * windows-1254: Turkish (Windows Latin 5)
  * windows-1255: Hebrew (Windows)
  * windows-1256: Arabic (Windows)
  * windows-1257: Baltic (Windows)
  * windows-1258: Vietnamese (Windows)
  * us-ascii: Western (ASCII)
  * Shift_JIS: Japanese (Shift JIS X0213)
  * GBK: Chinese (GBK)
  * gb18030: Chinese (GB 18030)
  * iso-2022-jp: Japanese (ISO 2022-JP)
  * iso-2022-jp-2: Japanese (ISO 2022-JP-2)
  * iso-2022-jp-1: Japanese (ISO 2022-JP-1)
  * iso-2022-cn: Chinese (ISO 2022-CN)
  * iso-2022-kr: Korean (ISO 2022-KR)
  * euc-jp: Japanese (EUC)
  * gb2312: Simplified Chinese (GB 2312)
  * euc-tw: Traditional Chinese (EUC)
  * euc-kr: Korean (EUC)
  * shift_jis: Japanese (Shift JIS)
  * koi8-r: Cyrillic (KOI8-R)
  * big5: Traditional Chinese (Big 5)
  * x-mac-roman-latin1: Western (Mac Mail)
  * hz-gb-2312: Simplified Chinese (HZ GB 2312)
  * big5-hkscs: Traditional Chinese (Big 5 HKSCS)
  * koi8-u: Ukrainian (KOI8-U)
  * x-nextstep: Western (NextStep)
  * ibm037: Western (EBCDIC Latin 1)
```
</switches></commands>
]]></content>
  </entry>
  
</feed>
