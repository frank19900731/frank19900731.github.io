<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 面试求职 | Blog of 太极儒]]></title>
  <link href="http://frank19900731.github.io/blog/category/mian-shi-qiu-zhi/atom.xml" rel="self"/>
  <link href="http://frank19900731.github.io/"/>
  <updated>2014-11-22T17:08:41+08:00</updated>
  <id>http://frank19900731.github.io/</id>
  <author>
    <name><![CDATA[Frank Song]]></name>
    <email><![CDATA[scr_0731@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[百度、腾讯与搜狐的笔试回忆]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi/"/>
    <updated>2014-11-21T21:38:54+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享之数据结构、算法分享]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/"/>
    <updated>2014-11-18T10:18:41+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">数据结构题目</a>    <ul>
      <li><a href="#section-2">概述</a></li>
      <li><a href="#section-3">分类讨论</a>        <ul>
          <li><a href="#section-4">类型一：数据结构实现</a></li>
          <li><a href="#section-5">类型二：数据结构应用</a></li>
        </ul>
      </li>
      <li><a href="#section-6">准备建议</a></li>
    </ul>
  </li>
  <li><a href="#section-7">算法题目</a>    <ul>
      <li><a href="#section-8">概述</a></li>
      <li><a href="#section-9">分类讨论</a>        <ul>
          <li><a href="#section-10">类型一：经典算法实现题</a></li>
          <li><a href="#section-11">类型二：思维益智题</a></li>
        </ul>
      </li>
      <li><a href="#section-12">准备建议</a></li>
    </ul>
  </li>
  <li><a href="#section-13">开放题目</a></li>
  <li><a href="#section-14">总结</a></li>
</ul>

<h2 id="section">前言</h2>

<!-- excerpt start -->

<p>面试 IT 企业的研发岗位，数据结构和算法显然是必考的项目。俺只学过普通的数据结构课程，没读过 STL，也没有过 ACM 的训练和比赛经历，在一开始面对这样类型题目的时候，心里还是十分忐忑的。大大小小几十场面试下来，自己在这方面总算有了一定的心得积累，在此抛砖引玉，以飨读者。</p>

<p>在正式介绍题目和准备方法之前，有两点需要说明，</p>

<ul>
  <li>Google 和 Facebook 这类对算法有很高要求的公司的在线测试我没有参加过（不过在牛人内推帮助下有过面试体验……），这超出了我目前的编码能力范围，网上有不少拿到 Google、Facebook offer 的经验总结文章，可以移步观赏；</li>
  <li>前段时间在微博上又看到有人说自己把 leetcode 刷了好几遍，不过一些转发评论者觉得， IT 公司面试中的算法考察没有价值，一来工作里用不太上，二来把程序员素质考察搞成了应试教育，他们认为更重要的是应聘者的工程能力。遇到这样的讨论，我一般喜欢和一把稀泥。若干年前， Google、微软的面试题让大家眼前一亮，觉得能选拔出个性十足的聪明人来，不过随着大家对这类题目的适应，可能选拔出来的人也在趋同，至少很多人都会在面试前用心准备，<a href="http://www.oschina.net/news/41616/in-head-hunting-big-data-may-not-be-such-a-big-deal">据报道 Google 最近也是放弃了这类面试题目</a>。没有什么一劳永逸、一成不变的考查方式，毕竟面试是人和人之间的动态“较量”。不要贪恋算法的奇技淫巧，也不要因为题目筛选力度的衰减而否定考察初衷。面试不仅是考验求职者，也同样在考验面试官，<strong>如果问的都是老题儿，那本山大叔肯定都会抢答了</strong>。</li>
</ul>

<p>言归正传，以下分数据结构题目、算法题目、开放题目三部分来介绍我在面试中碰到的问题。</p>

<!-- excerpt end -->

<h2 id="section-1">数据结构题目</h2>

<h3 id="section-2">概述</h3>

<p>虽然课本由简到繁、由难到易地介绍了诸多数据结构，<strong>我在面试中被问到的却还都是基本类型</strong>，比如堆栈、队列、链表、二叉树。题目主要有两类，数据结构实现和具体情境下数据结构的应用。</p>

<h3 id="section-3">分类讨论</h3>

<h4 id="section-4">类型一：数据结构实现</h4>

<ol>
  <li>实现 java.util.List 中的基础功能；</li>
  <li>实现栈，使得 添加、删除、max 操作的复杂度为 O(1)（我脚着好像是不可实现的，想到最好的是添加、删除 O(log)， max 是 O(1)）；</li>
  <li>选取任意数据结构实现添加、删除、随机返回三个功能，分析复杂度；</li>
  <li>用数组实现队列，各操作的复杂度分析。</li>
</ol>

<h4 id="section-5">类型二：数据结构应用</h4>

<ol>
  <li>两棵树相加——对应位置两棵树都有值则相加，对应位置只有一棵树有值则取该值；</li>
  <li>用速度不同的指针可以判断链表中是否有环，问两速度满足怎样的关系可以保证发现环；</li>
  <li>如何在语料中寻找频繁出现的字串，分析复杂度（tire树）；</li>
  <li>中缀表达式转逆波兰表达式，逆波兰表达式求值；</li>
  <li>数据解压缩，3(a4(ab))    -&gt;    aababababaababababaabababab；</li>
  <li><a href="http://www.xuebuyuan.com/600249.html">二叉树的文件存储</a>。</li>
</ol>

<h3 id="section-6">准备建议</h3>

<p>上上之选当然是看《算法导论》，<a href="http://vdisk.weibo.com/s/G0pA_">书</a> 和 <a href="http://v.163.com/special/opencourse/algorithms.html">公开课</a> 都算。时间精力不足又想临时抱佛脚，清华大学计算机系邓俊辉老师的 <a href="http://www.amazon.cn/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E5%88%97%E6%95%99%E6%9D%90-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%82%93%E4%BF%8A%E8%BE%89/dp/B00FEC2GYM/ref=sr_1_1?ie=UTF8&amp;qid=1416641186&amp;sr=8-1&amp;keywords=%E9%82%93%E4%BF%8A%E8%BE%89">教材</a> 是好选择，也可以看 <a href="https://www.xuetangx.com/courses/TsinghuaX/30240184_1X/_/about">公开课</a>。注意<strong>熟记不同数据结构的不同操作的不同实现方式</strong>（比如 <a href="http://www.matrix67.com/blog/archives/1255">哈希表的插入删除查找</a>）<strong>的复杂度分析</strong>，不管面试官给你出的题目是难是易，妥妥儿的会问复杂度。</p>

<h2 id="section-7">算法题目</h2>

<h3 id="section-8">概述</h3>

<p>有过面试经历的企业（BAT、小米、宜信、猿题库、FreeWheel等）当中，还没有谁问过我需要复杂算法（比方说 <a href="http://zhidao.baidu.com/link?url=lx07DdsUSQO-zbwOqhlOCbXpT7Qj8pOtOHQ5G6JhNZYnT1vlgaBly5sOwZzqAhkZsqugfJRiRw1y7q857V44La">此链接</a> 中的很多知识点）才能解决的问题。我遇到的算法题目大致可以分为两类：</p>

<ul>
  <li>经典算法实现题 快速排序、归并排序、堆排序、KMP算法等都是重点，<strong>重要的是代码的正确性，其次是复杂度分析</strong>，当然，人家也不都是直接问你怎么实现这个具体算法，而是包装到情境里；</li>
  <li>思维益智题 考察你分析问题的能力，大部分可以归结到二分、动态规划、递归上，<strong>重要的是思路，其次是尽量低的复杂度，再次是代码的正确性</strong>。</li>
</ul>

<p>下面具体介绍我遇到的两种类型题目中的问题。</p>

<h3 id="section-9">分类讨论</h3>

<h4 id="section-10">类型一：经典算法实现题</h4>

<ol>
  <li>实现快速排序、归并排序、堆排序，各排序算法复杂度分析；</li>
  <li>实现KMP，解释原理；</li>
  <li>迷宫的深度搜索、广度搜索；</li>
  <li>写 find 函数，在目标串中匹配模式串（要考虑中文字符的情况）。</li>
</ol>

<h4 id="section-11">类型二：思维益智题</h4>

<ol>
  <li>数列中找第 k 大的数字（与快排或堆排序有关）；</li>
  <li>两个有序数组，寻找归并排序后数组的中位数/第 k 大数字（与二分有关）；</li>
  <li>一维数组，swap 其中的几对数字（每个数字只属于一次 swap 操作），实现查找（与二分有关）；</li>
  <li>一个有序数组，其中一个数字发生变异，但不知道变异后会不会影响整体序，如何实现查找；</li>
  <li>二维数组，每行递增，每列递增
    <ul>
      <li>实现查找；</li>
      <li>二维数组，每行递增，每列递增，求第 k 大的数；</li>
      <li>任意交换其中的两数，发现并恢复；</li>
    </ul>
  </li>
  <li>寻找字符串中第一个只出现一次的字符；</li>
  <li>统计数列中的逆序对（归并排序有关）；</li>
  <li>最长公共子串（动态规划有关）；</li>
  <li>最大子序列和，<a href="http://blog.csdn.net/caopengcs/article/details/36899787">允许交换一次的最大子序列和</a>；</li>
  <li>给定数组，寻找 next big（堆排序有关）；</li>
  <li>一维有序数组，经过循环位移后，最小的数出现在数列中间
    <ul>
      <li>如果原数组严格递增，如何找这个最小数；</li>
      <li>如果原数组严格递增或递减，如何找这个最小数；</li>
      <li>如果原数组非严格递增或递减，如何找这个最小数；</li>
    </ul>
  </li>
  <li>数组可能是递增、递减、递减后递增、递增后递减四种情况，递增递减都是非严格的，如果有转折点，返回转折点的值，否则返回-1；</li>
  <li>单向网络，起点和终点唯一且连通，寻找那些一旦被删除将导致起点终点无法连通的点；</li>
  <li>有序数组寻找和为某数的一对数字；</li>
  <li><a href="http://www.cnblogs.com/fuzhe1989/p/3428553.html">墙里能装多少水</a>；</li>
  <li>打印螺旋数组；</li>
  <li>打印组合数；</li>
  <li>字符数组，统计指定区间内的回文串个数。 </li>
</ol>

<h3 id="section-12">准备建议</h3>

<ul>
  <li>不要纠结于是否是最佳思路，要保证能在 10-15 分钟内给出一个解决方案，并分析复杂度；</li>
  <li>基础的可以读读 <a href="http://weibo.com/julyweibo?topnav=1&amp;wvr=6&amp;topsug=1">@研究者July</a> 的这本 <a href="http://frank19900731.github.io/ebook/the-art-of-programming-by-july/index.html">电子书</a>，更深入的可以阅读 CSDN 等博客中大牛们写的 ACM 解题报告；</li>
  <li><a href="http://www.hihocoder.com/">hihocoder</a>、<a href="http://www.topcoder.com/">topcoder</a>、<a href="https://oj.leetcode.com/">leetcode</a>、<a href="https://codility.com/">codility</a>、<a href="http://poj.org/">POJ</a> 等网站择一练手。</li>
</ul>

<h2 id="section-13">开放题目</h2>

<p>这类开放题目让你自主选择数据结构，主要是考察求职者对于数据结构的特性与使用场景的综合理解，在面对具体应用场景时能否运用已有的数据结构和算法知识提出合理的解决方案。一般来说在这类问题里哈希表的出场率会比较高……例题如下</p>

<ol>
  <li>大数据量的 url log，怎么去重且统计每个 url 的出现次数，复杂度分析；</li>
  <li>设计 cache 系统
    <ul>
      <li>设计 cache 的接口；</li>
      <li>可以用什么数据结构实现；</li>
      <li>如何实现可伸缩的容量；</li>
      <li>cache 的空间管理策略，比如 cache 哪些条目，何时清理；</li>
      <li>cache 系统启动时分配多大的空间，之后按照怎样的策略增大；</li>
    </ul>
  </li>
  <li>设计爬虫；</li>
  <li>流媒体播放客户端从多个完全相同的发送方接收视频包，同一发送方的包会按序到达，不同发送方的包则不一定，有可能会丢包，但还是要保证播放流畅度，设计播放客户端的算法。 </li>
</ol>

<h2 id="section-14">总结</h2>

<ul>
  <li>数据结构和算法的基础知识还是十分重要的，大部分题目的思路来源于此；</li>
  <li>训练自己算法复杂度的分析能力，<strong>有的时候对复杂度的分析会反过来会帮助你找到更好的算法</strong>；</li>
  <li>一定量的题目积累很重要，就好像准备高考数学压轴题一样，见识的越多，思路来得越快，当然，前提是你能够<strong>不断总结反思</strong>。</li>
</ul>

<p>继 <code>机器学习、大数据问题</code>、<code>智力题</code>、<code>数据结构与算法题</code>，我们在最后还会分享 <code>编程语言题</code>，敬请期待。</p>

<p>访问入口：</p>

<ul>
  <li><a href="/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li>编程语言题</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享之智力题]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/"/>
    <updated>2014-11-07T14:56:13+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">题目介绍</a></li>
  <li><a href="#section-2">其它经典题目</a></li>
  <li><a href="#section-3">总结</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">前言</h2>
<p>我在算法工程师面试中遇到的智力题主要是指涉及到一些数学计算、证明的题目，基本是中小学奥数题。喜欢问这类问题的主要有互联网创业公司或外企，招收数值策划的游戏公司，当然，更多的是金融、投资相关的企业。从题目类型上分，有排列组合题、概率题等。</p>

<h2 id="section-1">题目介绍</h2>

<p><strong>题目一：给定天平，问要称重1-N N种不同质量，最少需要多少种砝码？</strong></p>

<p><strong>1）砝码只允许放在天平的一端；</strong></p>

<p><strong>2）砝码可以放在天平的两端。</strong></p>

<p><strong>解答：</strong> </p>

<ul>
  <li>只允许放在一边的情况，开始自己以为是斐波那契数列，不过显然数列生成方式里存在冗余（1+2=3）。1、2 肯定是最基本的数字，<strong>新添加的砝码质量应该是原砝码集合所能称量的最大质量加一</strong>，如此生成的数列就是2的幂次，1，2，4，……想到正整数二进制表达的唯一性，应该是不存在冗余的。可表示性是有了，对于1-N N种不同的质量，最少需要 <script type="math/tex">\left\lceil \log _{ 2 }{ (N+1) }  \right\rceil </script> 种不同的砝码，那是不是最少的呢？这种做法没有冗余，且表示范围是砝码的排列组合（每一个砝码可用可不用），应该就是最少了的，不过这不是严格证明。</li>
  <li>允许放在两边的情况，1、3是最基本的，因为 2 可以用 3-1 表达，<strong>新添加砝码的质量应该满足的条件是原砝码集合所能称量的最大质量加上这个最大质量的下一个质量</strong>。这种构造方法同样没有冗余，且表示范围是砝码的排列组合（每一砝码可加、可减、可不用，再排除掉和非正数的情况），所以应该也是最少的。按照这个思路生成的数列就是3的幂次，1，3，9，27……可以用数学归纳法证明如下。</li>
</ul>

<!-- excerpt end -->

<p><strong>证明：数列 <script type="math/tex">1，3，…，3^{n-1}</script>，任取其中若干进行加减组合可以表示 <script type="math/tex">1</script> 到 <script type="math/tex">\frac{3^n - 1}{2}</script> （允许减法的排列组合所能表示的最大范围）间的不同数值。</strong></p>

<p>1）<script type="math/tex">k=1</script> 时，显然满足；</p>

<p>2）<script type="math/tex">k=n</script> 时，有 <script type="math/tex">1，3，……，3^{n-1}</script> 可以表出 <script type="math/tex">1</script> 到 <script type="math/tex">\frac{3^n - 1}{2}</script>；</p>

<p>3）<script type="math/tex">k=n+1</script> 时，要证明 <script type="math/tex">1，3，……，3^n</script> 可以表出 <script type="math/tex">1</script> 到 <script type="math/tex">\frac{3^{n+1} - 1}{2}</script> </p>

<p>3-1）<script type="math/tex">1</script> 到 <script type="math/tex">\frac{3^n - 1}{2}</script> 显然可由 <script type="math/tex">1，3，……，3^{n-1}</script> 表出； </p>

<p>3-2）<script type="math/tex">\frac{3^n + 1}{2}</script> 到 <script type="math/tex">3^n - 1</script> 可以由 <script type="math/tex">3^n</script> 减去 <script type="math/tex">\frac{3^n - 1}{2}</script>  到 <script type="math/tex">1</script> 表出；</p>

<p>3-3）<script type="math/tex">3^n</script> 是新加入的数，可以单独表出；</p>

<p>3-4）<script type="math/tex">3^n + 1</script> 到 <script type="math/tex">\frac{3^{n+1} - 1}{2}</script> 可以由 <script type="math/tex">3^n</script> 加上 <script type="math/tex">1</script> 到 <script type="math/tex">\frac{3^n - 1}{2}</script> 表出。</p>

<p>综上，有原命题成立。</p>

<p>有关本题的更多讨论参见果壳网的 <a href="http://www.guokr.com/article/3742/">这篇文章</a>。</p>

<p><strong>题目二：如下图所示概率密度分布，左边平缓，右边陡峭，指定中位数的位置，问均值在中位数的左侧还是右侧？</strong></p>

<p><a href="/img/post/2014-11/1.png" class="img-up" title="概率分布，中位数和均值的位置关系"><img class="imgcenter" src="/img/post/2014-11/1.png" width="40%" title="概率分布，中位数和均值的位置关系" ></a></p>

<p><strong>解答：</strong> </p>

<p>我的感觉是均值在中位数的左侧，不过我希望用严格的数学推导证明出来，后来发现很有难度，因为没有给出概率密度分布的具体形式。面试官及时“制止”了我，让我想一点直观的解释。</p>

<p>我觉得可以用收入分布来类比，左边高收入人群少，右边是低收入群体，占很大的比重。统计局公布的人居年收入是均值，网友纷纷表示自己拉低了平均收入，不上网的人收入水平可能更低一些。综上，姑且认为超过一半的人收入不及均值（只是为回答问题而做的推测，超过平均水平的一般不会自己说出来，所以可能统计有偏差），也即中位数在均值的右侧。</p>

<p>面试官给出的解释比我的好很多。类比一把斧头的质量密度，中位数左右的半边斧头质量相等，而均值则是斧头的支撑平衡点（假设均值为0，这个支撑平衡点就是原点），根据力矩平衡原理，支撑点要比中位数更偏向斧头的木把儿一边。</p>

<p><strong>题目三：玩家打怪，通关一次掉落 A 装备的概率是 0.1，掉落 B 装备的概率是0.2，该玩家要获得 A、B 两件装备的期望通关次数是多少？</strong></p>

<p><strong>解答：</strong> </p>

<p>画图表示 A 和 B 的关系</p>

<p><a href="/img/post/2014-11/2.png" class="img-up" title="A 和 B 的三种关系"><img class="imgcenter" src="/img/post/2014-11/2.png" width="70%" title="A 和 B 的三种关系" ></a></p>

<ul>
  <li>如果 A 和 B 是互斥事件，首先考虑第一次拿到一件装备的期望通关次数，这件装备有 <script type="math/tex">\frac{1}{3}</script> 的可能性是 A，<script type="math/tex">\frac{2}{3}</script> 的可能性是 B，接下来根据几何分布的无后效性进行计算，期望次数为 </li>
</ul>

<script type="math/tex; mode=display">\frac{1}{0.1 + 0.2} + \frac{1}{3}  \times  \frac{1}{0.2} + \frac{2}{3} \times \frac{1}{0.1} = \frac{35}{3}</script>

<ul>
  <li>如果 B 事件 包含 A 事件，则期望次数为 </li>
</ul>

<script type="math/tex; mode=display">\frac{1}{0.1} = 10</script>

<ul>
  <li>其他情况，期望次数在 <script type="math/tex">10</script> 和 <script type="math/tex">\frac{35}{3}</script> 之间。</li>
</ul>

<p><strong>变式：玩家一打掉落 A 装备的怪，玩家二打掉落 B 装备的怪，相互独立，他们协作收集 A、B 两件装备，则期望多少轮集齐？</strong></p>

<ul>
  <li>
    <p>思路一：有三种可能性，先拿到 A 再拿到 B，概率是 <script type="math/tex">\frac{4}{14}</script>，先拿到 B 再拿到 A，概率是 <script type="math/tex">\frac { 9 }{ 14 } </script>； A、B同时拿到，概率是 <script type="math/tex">\frac { 1 }{ 14 }</script> 。这些概率可以通过列写等比数列求和公式得到，本文不赘述，因为思路二提供了更简单的计算方法。计算期望得 </p>

    <script type="math/tex; mode=display">\frac{4}{14} \times  \frac{1}{0.2} + \frac{9}{14}  \times  \frac{1}{0.1} + \frac{1}{14} \times \frac{1}{0.1 \times 0.2} = \frac{80}{7}</script>

    <p>关于最后一项 <script type="math/tex">\frac{1}{14} \times \frac{1}{0.1 \times 0.2}</script> 的解释是，玩家一、二一定是在某一轮同时分别获得 A 和 B，那么可以认为是<strong>一个人在玩，而该关卡要么同时掉落 A 和 B，要么什么也不掉落</strong>。由这样一种解释也就自然想到了思路二。</p>
  </li>
  <li>
    <p>思路二：玩家一、玩家二可以统一为一个人，只不过这个人在通关后获得 A、B 的概率是相互独立的，<script type="math/tex">P\left( AB \right) =P\left( A \right) \cdot P\left( B \right) </script>。由此前的计算思路可得期望为 </p>

    <script type="math/tex; mode=display">\frac{1}{0.28} + \frac{0.08}{0.28} \times  \frac{1}{0.2} + \frac{0.18}{0.28}  \times  \frac{1}{0.1} + \frac{0.02}{0.28} \times 0 = \frac{80}{7}</script>
  </li>
</ul>

<p><strong>题目四：一群人每人说一到一百间的整数，接近平均数的三分之二的人会获奖，该说什么数字才能使获奖机率最大？</strong></p>

<p><strong>解答：</strong> </p>

<p>假设每个人都是理性的，那么没有人会选择 67-100，再次分析可知没有人会选择 45-66，以此类推，最终只有选择 1。<strong>不过实际当中并不是所有人都这么聪明理性，做适当的假设可以得到更接近真实情况的结果</strong>。</p>

<p><blockquote><p>1987年，《金融时报》刊登了一个很诡异的广告，说你可以随便写一个0~100（与本题略有不同）之间的整数	寄回编辑部，然后如果你写的这个数最接近所有寄来的数的平均数的2/3，你就可以获得一张伦敦到纽约的头等舱往返机票。最后得到的结果是……平均数为18.9。也就是写13的人赢了。</p></blockquote></p>

<p>更多分析见果壳网的 <a href="http://www.guokr.com/question/292144/">这篇文章</a>。</p>

<p><strong>题目五：考虑 n 维向量 X、Y，其中每个元素独立同分布，分布为 N(0，1)，请计算 X、Y 相关系数的均值和标准差。</strong></p>

<p><strong>解答：</strong></p>

<p>本题其实是百度笔试的一道题，只有5分，但还是颇有难度的，实际上本题无需进行任何复杂的积分计算。相关系数的均值表达式如下</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
E\left( r \right)  &= \iint { \frac { \left( X-EX \right) \cdot \left( Y-EY \right)  }{ \left\| X-EX \right\| \left\| Y-EY \right\|  } \cdot p\left( X \right) \cdot p\left( Y \right) dXdY }  \\
&= \iint { \frac { X\cdot Y }{ \left\| X \right\| \left\| Y \right\|  } \cdot p\left( X \right) \cdot p\left( Y \right) dXdY } 
\end{align}
 %]]&gt;</script>

<p>考察 X （或Y）<strong>关于原点的对称抵消特性</strong>，知期望值为 0。</p>

<p>相关系数的方差表达式为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
Var\left( r \right)  &= E{ \left( r-E\left( r \right)  \right)  }^{ 2 } \\
&= E{ r }^{ 2 } \\
&= \iint { \frac { \left( \left( X-EX \right) \cdot \left( Y-EY \right)  \right) ^{ 2 } }{ { \left\| X-EX \right\|  }^{ 2 }{ \left\| Y-EY \right\|  }^{ 2 } } \cdot p\left( X \right) \cdot p\left( Y \right) dXdY }   \\
&= \iint { \frac { \left( X\cdot Y \right) ^{ 2 } }{ { \left\| X \right\|  }^{ 2 }{ \left\| Y \right\|  }^{ 2 } } \cdot p\left( X \right) \cdot p\left( Y \right) dXdY } \\
&= \iint { { \left( \frac { X }{ \left\| X \right\|  } \cdot \frac { Y }{ \left\| Y \right\|  }  \right)  }^{ 2 }\cdot p\left( X \right) \cdot p\left( Y \right) dXdY } 
\end{align}
 %]]&gt;</script>

<p>最后一个式子中，X、Y 的关系是对称的，几何含义是<strong>单位球面上两个随机向量的内积平方的期望</strong>。与其让 X、Y 都随机，我们可以固定其中一个，只计算<strong>随机向量和固定向量的内积平方的期望</strong>，<strong>如果任取固定向量都有这个期望值相同，那么这个期望就是本题的待求期望</strong>。</p>

<p>我们先取固定向量为 <script type="math/tex">{ \left( 0,\quad 0,\quad \dots \quad 1 \right)  }^{ T }</script>，则积分式子转化为</p>

<script type="math/tex; mode=display">\int { \frac { { Y }_{ n }^{ 2 } }{ \sum _{ i=1 }^{ n }{ { Y }_{ i }^{ 2 } }  } \cdot p\left( Y \right) dY } </script>

<p>乍一看分子分母都是卡方分布，不过二者不是相互独立的，也就不构成 F 分布，怎么求解呢？要用到 <script type="math/tex">{ Y }_{ i }</script> 的轮换对称性。</p>

<script type="math/tex; mode=display">\int { \frac { { Y }_{ 1 }^{ 2 } }{ \sum _{ i=1 }^{ n }{ { Y }_{ i }^{ 2 } }  } \cdot p\left( Y \right) dY } =\dots =\int { \frac { { Y }_{ n }^{ 2 } }{ \sum _{ i=1 }^{ n }{ { Y }_{ i }^{ 2 } }  } \cdot p\left( Y \right) dY } </script>

<p>又</p>

<script type="math/tex; mode=display">\sum _{ k=1 }^{ n }{ \int { \frac { { Y }_{ k }^{ 2 } }{ \sum _{ i=1 }^{ n }{ { Y }_{ i }^{ 2 } }  } \cdot p\left( Y \right) dY }  } =1</script>

<p>所以</p>

<script type="math/tex; mode=display">\int { \frac { { Y }_{ k }^{ 2 } }{ \sum _{ i=1 }^{ n }{ { Y }_{ i }^{ 2 } }  } \cdot p\left( Y \right) dY } =\frac { 1 }{ n } ,\quad k=1,2,\dots ,n </script>

<p>也就是说标准差为 <script type="math/tex">\frac { 1 }{ \sqrt { n }  } </script> 咯？</p>

<p>如果随机向量在球面上是均匀分布的那我们的讨论也就停止了，不过事实并非如此。二维情况，考察单位圆周上的随机向量，斜率的分布（两个正态分布的均值为0时，它们的 <a href="http://mathworld.wolfram.com/NormalRatioDistribution.html">商是柯西分布</a> ）是不均匀的。在这种不均匀的情况下，想要得到积分值不变的结论好像没有那么直观。受 <script type="math/tex">{ \left( 0,\quad 0,\quad \dots \quad 1 \right)  }^{ T }</script> 的启发，我想到一个笨办法，还是用到轮换对称性。我们只要<strong>找到值相等的一些表达式，让他们相加等于一个常数即可</strong>。</p>

<p><span style="color: red;">更正：“不均匀”的说法是有问题的，这个不均匀是相对于斜率的不均匀，对于角度而言是均匀的，可以将柯西分布里的比值变量 <script type="math/tex">u</script> 替换为角度 <script type="math/tex">\theta </script>，由下面的表达式知是均匀分布。</span></p>

<script type="math/tex; mode=display">\int _{ -\infty  }^{ +\infty  }{ \frac { 1 }{ \pi \left( 1+{ u }^{ 2 } \right)  } du } =\int _{ -\frac { \pi  }{ 2 }  }^{ \frac { \pi  }{ 2 }  }{ \frac { 1 }{ \pi \left( 1+\tan ^{ 2 }{ \theta  }  \right)  } \frac { d\theta  }{ \cos ^{ 2 }{ \theta  }  }  } =\int _{ -\frac { \pi  }{ 2 }  }^{ \frac { \pi  }{ 2 }  }{ \frac { d\theta  }{ \pi  }  } </script>

<p><span style="color: red;">高维情况如下式所示，某向量的概率密度只与向量长度有关，而与角度无关，所以放缩到单位球面上关于角度是均匀的，所以只需要计算 <script type="math/tex">{ \left( 0,\quad 0,\quad \dots \quad 1 \right)  }^{ T }</script> 一种情况就可以。</span></p>

<script type="math/tex; mode=display">\frac { 1 }{ { \left( \sqrt { 2\pi  }  \right)  }^{ n } } { e }^{ -\frac { \sum _{ i=1 }^{ n }{ { x }_{ i }^{ 2 } }  }{ 2 }  }=\frac { 1 }{ { \left( \sqrt { 2\pi  }  \right)  }^{ n } } { e }^{ -\frac { { r }^{ 2 } }{ 2 }  }</script>

<p>轮换对称性分两步，首先是<strong>系数轮换</strong>，其次是<strong>符号轮换</strong>，以 4 维情况为例，假设固定向量为</p>

<script type="math/tex; mode=display">{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }</script>

<p>系数轮换是指以下四个固定向量计算得到的积分结果是相同的</p>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  } ,\quad \frac { 1 }{ \sqrt { 24 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  } ,\quad \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 2 }  } ,\quad \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  }  \right)  }^{ T }
</script>

<p>符号对称性是指以下八个固定向量计算得到的积分结果是相同的</p>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( -\frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad -\frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad -\frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( \frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad -\frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( -\frac { 1 }{ \sqrt { 24 }  } ,\quad -\frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( -\frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad -\frac { 1 }{ \sqrt { 3 }  } ,\quad \frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<script type="math/tex; mode=display">
{ \left( -\frac { 1 }{ \sqrt { 24 }  } ,\quad \frac { 1 }{ \sqrt { 8 }  } ,\quad \frac { 1 }{ \sqrt { 3 }  } ,\quad -\frac { 1 }{ \sqrt { 2 }  }  \right)  }^{ T }
</script>

<p><strong>系数轮换是为了保证加和结果中各平方项系数相等，可约去分母，符号轮换是为了保证加和结果中的交叉项系数为 0</strong>。对于 4 维向量，我们经过系数轮换和符号轮换获得了 32（<script type="math/tex">= 4 \times 8</script>） 个等值的积分表达式，累加和等于 8，每个积分表达式的值是 <script type="math/tex">{ \frac { 1 }{ 4 }  }</script>，也即 <script type="math/tex">{ \frac { 1 }{ n }  }</script>。</p>

<p>简单总结一下，系数轮换我们采用循环移位的策略，也就是 n 组系数；每组系数对应 <script type="math/tex">{ { 2 }^{ n-1 } }</script> 种（因为是平方，所以一半和另一半是等价的）符号选择。<strong>对于任给的固定向量，总可以通过这样的构造辅助等价固定向量的方式求解，而求得的积分结果总是 <script type="math/tex">{ \frac { 1 }{ n }  }</script></strong>。</p>

<p>综上，<strong>相关系数的均值是 0，标准差是 <script type="math/tex">{ \frac { 1 }{ \sqrt { n }  }  }</script></strong>。</p>

<p>以下是 Matlab 仿真结果：</p>

<p><code>matlab 相关系数的均值、方差仿真
array = [];
n = 5;
iter = 100000;
for i = 1:iter
x = normrnd(0,1,n,1);
y = normrnd(0,1,n,1);
array = [array, sum(x.*y)/(norm(x)*norm(y))];
end
avg = mean(array);
avar = var(array);
</code></p>

<p>10 万个相关系数样本，括号内为 <script type="math/tex">\frac{1}{n}</script> 的值</p>

<p>5 维，单次运行均值为 -0.0023，方差为 0.1999（0.2）；</p>

<p>11 维，单次运行均值为 -0.0011，方差为 0.0908（0.0909）；</p>

<p>23 维，单次运行均值为 0.0003，方差为 0.0433（0.0435）。</p>

<h2 id="section-2">其它经典题目</h2>

<ol>
  <li><a href="http://baike.baidu.com/view/2499752.htm?fr=aladdin">卡特兰数</a> 相关问题
    <ul>
      <li>括号化</li>
      <li>出栈次序</li>
      <li><a href="http://blog.csdn.net/jtlyuan/article/details/7440591">找钱问题</a></li>
    </ul>
  </li>
  <li><a href="http://blog.sina.com.cn/s/blog_519169510101bljn.html">帽子问题</a></li>
  <li><a href="http://blog.csdn.net/wangshihui512/article/details/8860193">海盗分金</a></li>
  <li><a href="http://www.zhihu.com/question/25420139">宝石升级</a></li>
  <li>……</li>
</ol>

<h2 id="section-3">总结</h2>

<ul>
  <li>简要复习概率、期望、常见概率分布、排列组合等知识；</li>
  <li>金融、投资领域的面试参加的不多，过段时间再补充几道有关概率、博弈论的题目;</li>
  <li>多关注 <a href="http://www.matrix67.com/blog/">Matrix67</a> 上的题目分享。
    <ul>
      <li><a href="http://www.matrix67.com/blog/archives/501">分享一些有趣的面试智力题（上）</a></li>
      <li><a href="http://www.matrix67.com/blog/archives/502">分享一些有趣的面试智力题（下）</a></li>
      <li><a href="http://www.matrix67.com/blog/archives/2671">10个精彩的智力问题</a></li>
      <li>……</li>
    </ul>
  </li>
</ul>

<p>继 <code>机器学习、大数据问题</code>、<code>智力题</code>，接下来的博文还会陆续分享 <code>编程语言题</code> 和 <code>数据结构与算法题</code>，敬请期待。</p>

<p>访问入口：</p>

<ul>
  <li><a href="/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li>编程语言题</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享之机器学习、大数据问题]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/"/>
    <updated>2014-11-06T14:38:33+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">机器学习、大数据相关岗位的职责</a></li>
  <li><a href="#section-1">面试问题</a></li>
  <li><a href="#section-2">答题思路</a></li>
  <li><a href="#section-3">准备建议</a></li>
  <li><a href="#section-4">总结</a></li>
</ul>

<!-- excerpt start -->

<p>自己的专业方向是机器学习、数据挖掘，就业意向是互联网行业与本专业相关的工作岗位。各个企业对这类岗位的命名可能有所不同，比如数据挖掘/自然语言处理/机器学习算法工程师，或简称算法工程师，还有的称为搜索/推荐算法工程师，甚至有的并入后台工程师的范畴，视岗位具体要求而定。</p>

<h2 id="section">机器学习、大数据相关岗位的职责</h2>

<p>自己参与面试的提供算法岗位的公司有 BAT、小米、360、飞维美地、宜信、猿题库 等，根据业务的不同，岗位职责大概分为：</p>

<ol>
  <li>平台搭建类
    <ul>
      <li>数据计算平台搭建，基础算法实现，当然，要求支持<strong>大样本量、高维度数据</strong>，所以可能还需要底层开发、并行计算、分布式计算等方面的知识；</li>
    </ul>
  </li>
  <li>算法研究类
    <ul>
      <li><strong>文本挖掘</strong>，如领域知识图谱构建、垃圾短信过滤等；</li>
      <li><strong>推荐</strong>，广告推荐、APP 推荐、题目推荐、新闻推荐等；</li>
      <li><strong>排序</strong>，搜索结果排序、广告排序等；</li>
      <li>广告投放效果分析；</li>
      <li>互联网信用评价；</li>
      <li>图像识别、理解。</li>
    </ul>
  </li>
  <li>数据挖掘类
    <ul>
      <li><strong>商业智能</strong>，如统计报表；</li>
      <li><strong>用户体验分析</strong>，预测流失用户。</li>
    </ul>
  </li>
</ol>

<p>以上是根据本人求职季有限的接触所做的总结。有的应用方向比较成熟，业界有足够的技术积累，比如搜索、推荐，也有的方向还有很多开放性问题等待探索，比如互联网金融、互联网教育。在面试的过程中，一方面要尽力向企业展现自己的能力，另一方面也是在增进对行业发展现状与未来趋势的理解，特别是可以<strong>从一些刚起步的企业和团队那里，了解到一些有价值的一手问题</strong>。</p>

<p>以下首先介绍面试中遇到的一些真实问题，然后谈一谈答题和面试准备上的建议。</p>

<!-- excerpt end -->

<h2 id="section-1">面试问题</h2>

<ol>
  <li>你在研究/项目/实习经历中主要用过哪些机器学习/数据挖掘的算法？</li>
  <li>你熟悉的机器学习/数据挖掘算法主要有哪些？</li>
  <li>你用过哪些机器学习/数据挖掘工具或框架？</li>
  <li>基础知识
    <ul>
      <li>无监督和有监督算法的区别？</li>
      <li>SVM 的推导，特性？多分类怎么处理？</li>
      <li>LR 的推导，特性？</li>
      <li>决策树的特性？</li>
      <li>SVM、LR、决策树的对比？</li>
      <li>GBDT 和 决策森林 的区别？</li>
      <li>如何判断函数凸或非凸？</li>
      <li>解释对偶的概念。</li>
      <li>如何进行特征选择？</li>
      <li>为什么会产生过拟合，有哪些方法可以预防或克服过拟合？</li>
      <li>介绍卷积神经网络，和 DBN 有什么区别？</li>
      <li>采用 EM 算法求解的模型有哪些，为什么不用牛顿法或梯度下降法？</li>
      <li>用 EM 算法推导解释 Kmeans。</li>
      <li>用过哪些聚类算法，解释密度聚类算法。</li>
      <li>聚类算法中的距离度量有哪些？</li>
      <li>如何进行实体识别？</li>
      <li>解释贝叶斯公式和朴素贝叶斯分类。</li>
      <li>写一个 Hadoop 版本的 wordcount。</li>
      <li>……</li>
    </ul>
  </li>
  <li>开放问题
    <ul>
      <li>给你公司内部群组的聊天记录，怎样区分出主管和员工？</li>
      <li>如何评估网站内容的真实性（针对代刷、作弊类）？</li>
      <li>深度学习在推荐系统上可能有怎样的发挥？</li>
      <li>路段平均车速反映了路况，在道路上布控采集车辆速度，如何对路况做出合理估计？采集数据中的异常值如何处理？</li>
      <li>如何根据语料计算两个词词义的相似度？</li>
      <li>在百度贴吧里发布 APP 广告，问推荐策略？</li>
      <li>如何判断自己实现的 LR、Kmeans 算法是否正确？</li>
      <li>100亿数字，怎么统计前100大的？</li>
      <li>……</li>
    </ul>
  </li>
</ol>

<h2 id="section-2">答题思路</h2>

<ol>
  <li>用过什么算法？
    <ul>
      <li>最好是在<strong>项目/实习的大数据场景</strong>里用过，比如推荐里用过 CF、LR，分类里用过 SVM、GBDT；</li>
      <li>一般用法是什么，是不是自己实现的，有什么比较知名的实现，使用过程中<strong>踩过哪些坑</strong>；</li>
      <li>优缺点分析。</li>
    </ul>
  </li>
  <li>熟悉的算法有哪些？
    <ul>
      <li>基础算法要多说，其它算法要挑熟悉程度高的说，不光列举算法，也适当说说应用场合；</li>
      <li>面试官和你的研究方向可能不匹配，不过在基础算法上你们还是有很多共同语言的，你说得太高大上可能效果并不好，一方面面试官还是要问基础的，另一方面一旦面试官突发奇想让你给他讲解高大上的内容，而你只是泛泛的了解，那就傻叉了。</li>
    </ul>
  </li>
  <li>用过哪些框架/算法包？
    <ul>
      <li>主流的分布式框架如 Hadoop，Spark，Graphlab，Parameter Server 等择一或多使用了解；</li>
      <li>通用算法包，如 mahout，scikit，weka 等；</li>
      <li>专用算法包，如 opencv，theano，torch7，ICTCLAS 等。</li>
    </ul>
  </li>
  <li>基础知识
    <ul>
      <li>个人感觉高频话题是 SVM、LR、决策树（决策森林）和聚类算法，要重点准备；</li>
      <li>算法要从以下几个方面来掌握
        <ul>
          <li>产生背景，适用场合（数据规模，特征维度，是否有 Online 算法，离散/连续特征处理等角度）；</li>
          <li>原理推导（最大间隔，软间隔，对偶）；</li>
          <li>求解方法（随机梯度下降、拟牛顿法等优化算法）；</li>
          <li>优缺点，相关改进；</li>
          <li>和其他基本方法的对比；</li>
        </ul>
      </li>
      <li>不能停留在能看懂的程度，还要
        <ul>
          <li>对知识进行结构化整理，比如撰写自己的 cheet sheet，我觉得<strong>面试是在有限时间内向面试官输出自己知识的过程</strong>，如果仅仅是在面试现场才开始调动知识、组织表达，总还是不如系统的梳理准备；</li>
          <li>从面试官的角度多问自己一些问题，通过查找资料总结出全面的解答，比如如何预防或克服过拟合。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>开放问题
    <ul>
      <li>由于问题具有综合性和开放性，所以不仅仅考察对算法的了解，还需要足够的实战经验作基础；</li>
      <li><strong>先不要考虑完善性或可实现性</strong>，调动你的一切知识储备和经验储备去设计，有多少说多少，想到什么说什么，方案都是在你和面试官讨论的过程里逐步完善的，不过面试官有两种风格：引导你思考考虑不周之处 or 指责你没有考虑到某些情况，遇到后者的话还请注意<strong>灵活调整答题策略</strong>;</li>
      <li>和同学朋友开展讨论，可以从上一节列出的问题开始。	</li>
    </ul>
  </li>
</ol>

<h2 id="section-3">准备建议</h2>

<ol>
  <li>基础算法复习两条线
    <ul>
      <li><code>材料阅读</code> 包括经典教材（比如 PRML，模式分类）、网上系列博客（比如 研究者July），系统梳理基础算法知识；</li>
      <li><code>面试反馈</code> <strong>面试过程中会让你发现自己的薄弱环节和知识盲区，把这些问题记录下来，在下一次面试前搞懂搞透</strong>。</li>
    </ul>
  </li>
  <li>除算法知识，还应适当掌握一些系统架构方面的知识，可以从网上分享的阿里、京东、新浪微博等的架构介绍 PPT 入手，也可以从 Hadoop、Spark 等的设计实现切入。</li>
  <li>如果真的是以就业为导向就要在平时注意实战经验的积累，在科研项目、实习、比赛（Kaggle，Netflix，天猫大数据竞赛等）中摸清算法特性、熟悉相关工具与模块的使用。</li>
</ol>

<h2 id="section-4">总结</h2>

<p>如今，好多机器学习、数据挖掘的知识都逐渐成为常识，要想在竞争中脱颖而出，就必须做到</p>

<ul>
  <li>保持学习热情，关心热点；</li>
  <li>深入学习，会用，也要理解；</li>
  <li>在实战中历练总结；</li>
  <li>积极参加学术界、业界的讲座分享，向牛人学习，与他人讨论。</li>
</ul>

<p>最后，希望自己的求职季经验总结能给大家带来有益的启发。</p>

<p>继 <code>机器学习、大数据问题</code>，接下来的博文还会陆续分享 <code>智力题</code>、<code>编程语言题</code> 和 <code>数据结构与算法题</code>，敬请期待。</p>

<p>访问入口：</p>

<ul>
  <li><a href="/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li>编程语言题</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[求职季的一点经验之谈]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan/"/>
    <updated>2014-10-25T22:58:48+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">早点准备好自己的中英文简历</a></li>
  <li><a href="#section-1">准备一个靠谱的手机号和靠谱的手机</a></li>
  <li><a href="#section-2">复习职位相关知识点</a></li>
  <li><a href="#section-3">准备自我介绍，回顾项目与实习经历</a></li>
  <li><a href="#tag">及时查阅收件箱与垃圾邮箱，对重要邮件做标记或打 tag，方便处理与查找</a></li>
  <li><a href="#section-4">暑期实习，把握内推机会</a></li>
  <li><a href="#section-5">笔试、面试结束后马上回忆题目，回到学校后查缺补漏</a></li>
  <li><a href="#section-6">和同学朋友结伴申请</a></li>
  <li><a href="#section-7">总结</a></li>
</ul>

<p>废话少说，直接干货。</p>

<!-- excerpt start -->

<h2 id="section">早点准备好自己的中英文简历</h2>

<ul>
  <li>我自己使用的是 mordencv 模板，正反面打印，分别介绍了自己的教育背景、专业学习、个人爱好、科研与实习经历、校内职务、校内奖励和语言水平，有新进展则更新；</li>
  <li>关于简历书写网上有很多的教诲，不再赘述，只想强调一点，要能自圆其说，写了但讲不明白是很尴尬的；</li>
  <li>不同的面试官关注点不同，有的侧重项目，有的侧重实习，还有的会问兴趣爱好，我的一个兴趣爱好 —— Mac 下的软件使用就曾被问及，这个跟技术也不沾边儿，不过能反映出我在某个方面确实动过脑子，也算是给面试官一个爱钻研的印象吧。</li>
</ul>

<h2 id="section-1">准备一个靠谱的手机号和靠谱的手机</h2>

<p>招聘季短信、电话的价值都是很高的，能否接到通知直接关乎申请的成败，不要觉得 HR 姐姐会执着的找你，候选人有的是，不差你这一个。</p>

<!-- excerpt end -->

<h2 id="section-2">复习职位相关知识点</h2>

<p>仅以算法工程师（外加一点点软开）为例，需要准备的知识可能有</p>

<ul>
  <li>程序语言基础，C++、Java 至少得熟一个吧；</li>
  <li>数据库；</li>
  <li>操作系统基础知识，如多线程；</li>
  <li>机器学习（模型、原理、适用场景与推导），大数据处理（主要是 hadoop）；</li>
  <li>数据结构与算法；</li>
  <li>智力题，如一些概率问题。</li>
</ul>

<p>我准备的主要途径是复习教材、跟踪系列分享以及重要知识点默记</p>

<ul>
  <li><code>复习教材</code> 每个人心中都有几本经典教材吧，不要畏难，先找一个下午把整本书翻完作为预热，然后找自己概念模糊的章节细读，个人经验来看，<strong>想要一章一章的把书看完，一般很难坚持到第三章的，这是大实话</strong>；</li>
  <li><code>跟踪系列分享</code> 比如<a href="http://blog.csdn.net/morewindows/article/category/859207">白话经典算法</a>、<a href="http://blog.csdn.net/v_july_v">结构之法算法之道</a> 以及 <a href="https://github.com/julycoding/The-Art-Of-Programming-by-July">The Art of Programming</a>，这类资源实用性很强；</li>
  <li><code>重要知识点默记</code> 我自己准备了一个<strong>精美的硬壳本</strong>（精美是重点，破纸早扔了），每一页记录的是基础的、重要的算法代码与模型推导，每隔几天或每当重要面试前自我抽查、默写。</li>
</ul>

<h2 id="section-3">准备自我介绍，回顾项目与实习经历</h2>

<ul>
  <li>自我介绍是必备的，不要觉得自己都写在简历上了你就看呗，求职的是你自己，面试官没有义务去做阅读理解；一个流畅并略带特色（可以体现幽默、博学、阳光等）的自我介绍，一方面可以给面试官好的第一印象，还可以<strong>将面试官引导到你希望他考察你的地方</strong>，比如你可以强调引以为豪的项目，也可以强调某种算法模型，而这个模型其实你已经在复习知识点的时候研究得很透彻了；</li>
  <li>对于自己做过的项目与实习，由于时间久远或者表达能力上的欠缺，你未必能保证给面试官介绍得通透，所以，还是花点时间回顾并书面化为好，每次面试都能用得上。</li>
</ul>

<h2 id="tag">及时查阅收件箱与垃圾邮箱，对重要邮件做标记或打 tag，方便处理与查找</h2>

<p>学校宣讲会的通知，重要材料的填写，笔试、面试通知（可能包含确认链接），等等，多了就可能遗忘，自己就曾让一封英语测试邮件睡了十天，要么新注册一个邮箱专门用于求职，要么每当看到重要邮件就做标记或打tag，逐个处理完成后再消除标记。</p>

<h2 id="section-4">暑期实习，把握内推机会</h2>

<p>如果有暑期实习的机会，请尽可能按照找工作的标准争取，主要有以下五方面好处</p>

<ul>
  <li>面试能力大练兵；</li>
  <li>暑假过得充实，与求职季完美衔接；</li>
  <li>公司前辈都能分享求职经验，甚至帮你内推其它公司；</li>
  <li>可以获得实习转正机会；</li>
  <li>拿到别的公司的实习机会但没有去，也可能入选该公司的提前批面试。</li>
</ul>

<h2 id="section-5">笔试、面试结束后马上回忆题目，回到学校后查缺补漏</h2>

<ul>
  <li>对于参加过的笔试、面试，自己都有详细的记录与分析，确实能在这个过程中感受自身的能力提升，会在之后的博文中与大家分享；</li>
  <li>求职季每天记录求职笔记，包括今天申请了什么公司、接到了什么通知、学习/复习了什么知识、与谁有过讨论、笔试/面试感受如何等等，效果嘛，谁用谁知道，最起码现在写博客做分享的素材是不愁的。</li>
</ul>

<h2 id="section-6">和同学朋友结伴申请</h2>

<p>找一个对子或者建立一个小组，互相分享感兴趣的职位信息，这样做的好处是</p>

<ul>
  <li>大家的申请进度互为参照，比如我没有收到笔试通知且伙伴也没有收到笔试通知，这很可能是正常现象，我没有收到但伙伴收到了，那就是哪里出问题了；</li>
  <li>信息整合，各取所需；</li>
  <li>面试经验可共享。</li>
</ul>

<h2 id="section-7">总结</h2>

<p>总的来说，求职季是对脑力、体力的双重考验，如果能在这个过程里边求职边思考，相信经过一个求职季的历练，你一定会有大过 offer 的感悟与收获。</p>

<p>接下来，我将从以下四方面分享一下自己的面试总结，欢迎持续关注。</p>

<ol>
  <li>智力题</li>
  <li>编程语言</li>
  <li>数据结构与算法</li>
  <li>机器学习，大数据</li>
</ol>
]]></content>
  </entry>
  
</feed>
