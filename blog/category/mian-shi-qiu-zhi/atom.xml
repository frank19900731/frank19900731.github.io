<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 面试求职 | Blog of 太极儒]]></title>
  <link href="http://frank19900731.github.io/blog/category/mian-shi-qiu-zhi/atom.xml" rel="self"/>
  <link href="http://frank19900731.github.io/"/>
  <updated>2014-11-29T21:58:10+08:00</updated>
  <id>http://frank19900731.github.io/</id>
  <author>
    <name><![CDATA[Frank Song]]></name>
    <email><![CDATA[scr_0731@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matrix67 博客中智力题粗分类]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/29/matrix67-bo-ke-zhong-zhi-li-ti-cu-fen-lei.markdown/"/>
    <updated>2014-11-29T15:03:44+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/29/matrix67-bo-ke-zhong-zhi-li-ti-cu-fen-lei.markdown</id>
    <content type="html"><![CDATA[<p>大概有
几何题目
概率题目
程序题
编程题
智力题</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享四篇]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-si-pian/"/>
    <updated>2014-11-25T15:13:28+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-si-pian</id>
    <content type="html"><![CDATA[<!-- excerpt start -->

<p>一个月前，我在<a href="http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan/">《求职季的一点经验之谈》</a> 的末尾提到，将从 <code>机器学习与大数据</code>、<code>智力题</code>、<code>数据结构与算法</code>、<code>编程语言</code> 四方面分享自己的面试总结，现在总算是把这句话给圆了。</p>

<p>虽然在文章里我也列举了很多题目，但我<strong>尽量不写成面试题解，而是面试经验</strong>。更确切的说，是一些比较容易落实在笔头上的经验，毕竟一些事情不亲身经历，别人磨穿了嘴皮子去描述也是没用的。</p>

<p>具体有哪些经验呢，大概是算法工程师有哪些工作职责，有怎样的能力要求，平时要注重培养自己哪方面的能力，哪些书籍资料有较高阅读价值，以什么样的心态来学习知识、应对考试是比较合适的，怎样转变角色把面试当做促进自身提高的一种反馈机制，等等（其实也没别的了，呵呵）。</p>

<p>多的咱就不说了，<strong>水平有限，欢迎指正；如有裨益，不胜荣幸</strong>。</p>

<p>访问入口：</p>

<ul>
  <li><a href="/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li><a href="/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">编程语言题</a></li>
</ul>

<!-- excerpt end -->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享之编程语言题]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/"/>
    <updated>2014-11-25T10:13:30+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">概述</a></li>
  <li><a href="#section-2">基础问题</a></li>
  <li><a href="#section-3">进阶问题</a></li>
  <li><a href="#section-4">总结</a></li>
</ul>

<h2 id="section">前言</h2>

<!-- excerpt start -->

<h2 id="section-1">概述</h2>

<p>编程语言题这个设定太狭隘了，应该说是偏工程类的题目，其中有些带有经验性质。出题范围大概是操作系统、数据库、网络、面向对象编程思想、编程语言特性理解和语法掌握等。<strong>相关书籍或或网络教程当然是要看的，但并不意味着你都看了就能有好的发挥，要理论、实践两手抓</strong>。</p>

<p>对于算法工程师岗位来说，这种题目大量出现在笔试试卷中，比如概念理解啦、判断程序的运行输出啦，可以参见我的博客 <a href="http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi/">《2014 年百度、腾讯与搜狐的校招笔试回忆》</a>。在这里插入分享在另外一家公司的笔试里遇到的一道有意思的题目。</p>

<p>请问如下程序的输出。</p>

<p><code>cpp 一道笔试题
double a = 0;
double b = 99;
while(true) {
	double c = (a+b)/2;
	if(c == a || c == b) break;
	a = b;
	b = c;
}
cout&lt;&lt;a;
</code></p>

<p><strong>解答：</strong></p>

<p style="color: #AAA;">

浮点数判等，会无限循环么？由于浮点数精度有限，所以这个程序迭代个五六十次就终止了，又由于 cout 有默认的输出精度，所以输出结果应该是66。

</p>

<p>面试过程中虽然以算法为主，不过在让你纸上写代码、询问你项目经历的过程中，面试官也能考察出你的工程底子。以下我们分基础问题和进阶问题分别介绍。</p>

<!-- excerpt end -->

<h2 id="section-2">基础问题</h2>

<p>这类基础问题的引子一般是，“你熟悉什么编程语言呀”，“你平常用什么语言比较多呀”，“这个项目你们用什么语言实现的呀”。</p>

<p>如果不是真大牛，就挑一个相对而言自己掌握最熟的语言或最有准备的语言，不要用过啥就说啥。这么一来，无外乎 Java，C/C++，Python，PHP 等几种主流程序语言，Shell、SQL 等都是比较好的添头。就个人对算法工程师和数据挖掘工程师岗位的了解，Python、Scala、Go 很可能是加分项，如果此前没有用过，也可以在面试前学习了解，一句“正在学习”也可以让面试官感受到你的<strong>诚意</strong>哈。</p>

<p>总结自己在面试中被问到的基础问题如下。</p>

<ol>
  <li>面向对象编程的各类问题，多态、虚函数等；</li>
  <li>C++ 和 Java 的区别有哪些；</li>
  <li>你用过这种语言的哪些库；</li>
  <li>对 STL 是否熟悉；</li>
  <li>Java 虚拟机了解么，解释垃圾回收机制的原理；</li>
  <li>线程/进程间通信如何实现，写过多线程的程序么；</li>
  <li>大数据处理框架用过哪些（其实就算是编程语言的杀手应用吧）；</li>
  <li>机器学习、数据可视化的库用过哪些；</li>
  <li>java 中 final 的用法，C/C++ 中的 const 的用法； </li>
  <li>MySQL 的如何建立索引进行查询的，存储方式是怎样的，为什么要分块；</li>
  <li>堆区和栈区的区别在哪里；</li>
  <li>malloc 执行的时候发生了那些事情；</li>
  <li>正则表达式的写法；</li>
  <li>vim 中执行某项操作的快捷键；</li>
  <li>……</li>
</ol>

<p>这些问题想要第一次遇到时就都回答得正确完善恐非易事，主要还在于总结积累。虽然可供考察的知识点和题目变式浩如烟海，但是<strong>一定量的面试能给我们指出高频在哪里</strong>，理由有三。</p>

<ul>
  <li>面试官中的绝大多数也是通过面试选拔上来的，他们在准备的过程中应该也知道常考什么样的问题；</li>
  <li>高频题目提供了可比较性，有筛选价值，而即便你背了网上的解答也可能是不全面的（<strong>我一般把网上看到的和自己的使用经验一起说，显得比较真实…</strong>）；</li>
  <li>有闲情雅致给你出新题、难题的面试官毕竟是少数。</li>
</ul>

<p><strong>这种高频基础题都回答不好，又指望面试官怎么看你呢</strong>。所以说每次面试回来后回忆一下自己遇到的问题，<strong>如果你做出了回答，查一查是否需要修正或补充什么；如果你被问住了，那更得查阅资料学习</strong>。</p>

<h2 id="section-3">进阶问题</h2>

<p>虽然我没有遇到过，但我觉得有两个例子可以表示我对进阶问题的定义。</p>

<ul>
  <li><a href="http://fex.baidu.com/blog/2014/05/what-happen/">从输入 URL 到页面加载完成的过程中都发生了什么？</a></li>
  <li><a href="http://mooc.guokr.com/note/13202/">C 语言编译时发生了什么？</a>，以及扩展阅读 <a href="https://bojieli.com/2014/11/c-compiler/">《编译：一个 C 程序的艺术之旅》</a>。</li>
</ul>

<p>第一个问题曾在微博上引发热议。</p>

<p><a href="/img/post/2014-11/3.png" class="img-up" title="微博提问"><img class="imgcenter" src="/img/post/2014-11/3.png" width="80%" title="微博提问" ></a></p>

<p>这种问题既开放又确定。开放在于广度，涉及到的知识点与环节很多，你可以从你了解的部分去叙说；确定在于深度，每一个知识点或环节都是扎实的，不容信口开河。</p>

<p>类似的问题还可以提出很多，不过我们的知识储备未必有那么深广。个人认为，相比于对基础问题的了解，能够较为完善地回答出这类进阶问题，才是 IT 从业者素质与能力的真实体现。</p>

<p>当然，知识的积累要一点一点来，<strong>保持一颗好奇心比功利心或三分钟热血更重要</strong>。</p>

<p><strong>日拱一卒，乐在学中，与君共勉</strong>。</p>

<h2 id="section-4">总结</h2>

<p>用四篇文章分享了自己的面试经验，这是最后一篇。尽力之所及，恰在一个月后兑现了自己的 <a href="http://frank19900731.github.io/blog/2014/10/25/qiu-zhi-ji-de-yi-dian-jing-yan-zhi-tan/">承诺</a>，也算是苦劳一件。</p>

<p>从这四篇总结应该可以看出，本人的应试能力还是比较强的，享受过它带来的好处，也越发体会到它可能带来的弊端，那就是<strong>对技巧的追求超过了知识本身</strong>。</p>

<p>如果不是因为面试或者考试，很多人懒得问自己为什么。一种可能的场景是，程序出错了，Google/百度出了解决方案，调通了，也就过了。<strong>就好像刷题拿了高分，错误中蕴含的价值却没学到</strong>。我也当过很长一段时间这样的人，不过后来发现有些问题重复性的犯，而有些问题有很强的相似性，自己逐渐意识到需要记录错误解决的过程、思考产生错误的原因。坚持一段时间后发现，对原因的探寻不但能够加深记忆，也能够提高自己跨语言、跨应用场景的问题解决能力。</p>

<p>针对面试，或者不仅仅针对面试，我想说我们也可以<strong>假想自己是面试官，在习以为常的场景中多问自己为什么</strong>，学问也都在这里头了。</p>

<p>最后的最后，希望我的面试经验分享可以对各位看官产生一点帮助，比如提早规划、准备；也欢迎大家的提出建议、指出错误。</p>

<p>面试经验分享之 <code>机器学习、大数据问题</code>、<code>智力题</code>、<code>数据结构与算法题</code>、<code>编程语言题</code> 已经撰写完毕，访问入口如下。</p>

<ul>
  <li><a href="/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li><a href="/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">编程语言题</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 年百度、腾讯与搜狐的校招笔试回忆]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi/"/>
    <updated>2014-11-21T21:38:54+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/21/bai-du-teng-xun-yu-sou-hu-de-bi-shi-hui-yi</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">写在前面</a></li>
  <li><a href="#section-1">百度笔试</a></li>
  <li><a href="#section-2">腾讯笔试</a></li>
  <li><a href="#section-3">搜狐笔试</a></li>
</ul>

<!-- excerpt start -->

<h2 id="section">写在前面</h2>

<ul>
  <li>这三家公司大家的关注度应该都比较高，我所申请的其他公司，要么是自己走了其他渠道没参加笔试（比如阿里、360），要么是有签订保密协议（比如 FreeWheel 和 世坤）；</li>
  <li>腾讯、搜狐笔试题中有很多选择题，无法一一记清，考场上没有刻意记录，只能考后回忆，很多题只能说考了哪个知识点；</li>
  <li>百度申请的是数据挖掘工程师岗位，腾讯申请的是基础研究职位（后来发现给我安排的是深圳腾讯游戏的数据挖掘岗，由此得出的经验教训是，选定期望工作城市后，慎选服从城市调剂，不然都给你拉到深圳去），搜狐申请的是数据挖掘工程师岗位，题目自然与职位有关；</li>
  <li>我不记得是不是有 A、B 卷之分，但以下内容都被考察过无疑。</li>
</ul>

<p>接下来，记忆的闸门开始缓缓打开……</p>

<!-- excerpt end -->

<h2 id="section-1">百度笔试</h2>

<p>在面试的时候，百度会把已判分的试卷发给你，想不回忆清楚都难。当然，俺还没猥琐到拍照的程度……</p>

<ol>
  <li>举例说 C++ 中继承、多态和组合的应用。</li>
  <li>进程间通信方法，列举至少三种。</li>
  <li>写贝叶斯公式，描述朴素贝叶斯的分类方法。</li>
  <li>X、Y 是向量，每一维上的元素都服从 N(0, 1)，计算他们的相关系数 Z
    <ul>
      <li>求 Z 的期望和标准差（求职季笔试里见过的最有趣的一问，解答见我的博文<a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">《面试经验分享之智力题》</a> 中的题目五）；</li>
      <li>编程用蒙特卡洛方法计算期望和标准差。</li>
    </ul>
  </li>
  <li>豆瓣音乐，评分不同，但是想要随机播放概率和评分成正比，设计随机算法并代码实现。</li>
  <li>给出一次函数、二次函数…… n 次函数回归的损失函数，推导随机梯度下降公式，简述模型/参数选择标准和选择机制。</li>
</ol>

<h2 id="section-2">腾讯笔试</h2>

<p>25 道选择题只回忆了两道，因为与之相关的知识点掌握得不熟，其他题目大都是 C++ 面向对象编程的常见题。</p>

<ol>
  <li>关于虚基类构造函数的调用顺序。</li>
  <li>预编译指令 <a href="http://baike.baidu.com/view/2317161.htm?fr=aladdin">#pragma pack</a> 的考察，给出一个结构体，问占用多大空间。</li>
</ol>

<p>笔答题有三道</p>

<ol>
  <li>求三阶矩阵行列式。</li>
  <li>根据用户的满足感、荣誉感、挫折感及失望感建模用户口碑。</li>
  <li>预测即将流失的用户，一种方法是使用 SQL 在数据库中查询，提取近三个月登陆次数递减的用户，交给客服处理
    <ul>
      <li>可否这么做；</li>
      <li>不然要怎么做。</li>
    </ul>
  </li>
</ol>

<h2 id="section-3">搜狐笔试</h2>

<p>笔试题目范围非常广泛，涉及机器学习、网络编程、hadoop、C++、多线程和智力题。</p>

<ol>
  <li><a href="http://blog.csdn.net/mengtnt/article/details/8477747">小白鼠喝毒水问题</a></li>
  <li><a href="http://f.dataguru.cn/forum.php?mod=viewthread&amp;tid=34799&amp;highlight=">hadoop 在 HDFS 上文件存储的默认冗余参数是3</a>。</li>
  <li>两个线程同时累加一个全局变量，比如利用 for 循环进行 50 次自增操作，问该该全局变量的最终结果范围。</li>
  <li><a href="http://www.cnblogs.com/hnrainll/archive/2011/10/14/2212415.html">TCP 的三次握手，四次挥手</a>。</li>
  <li>关于 TCP 双方关闭连接，涉及到 <a href="http://blog.csdn.net/samulelin/article/details/3957118">TIME_WAIT</a> 的概念。</li>
  <li>SVM、条件随机场、隐马尔科夫模型、最大熵模型中，哪个是生成式模型？应该是隐马尔科夫模型<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</li>
  <li>还是以上四个模型，哪个模型不符合凸模型+有全局最优解的条件？应该还是隐马尔科夫模型。</li>
  <li>贝叶斯网络是有向无环图。</li>
  <li>分词中最大正向匹配，最大逆向匹配的概念。</li>
  <li>linux 平台下有一个三列文件，列之间用逗号分隔，请编程对第二列数字求和。</li>
  <li>左值不能赋值。</li>
  <li>hadoop 默认 block 大小是 64M，JobTracker 和 NameNode在同一台机器上。</li>
  <li>hadoop 采用 Combiner、采用压缩率高的文件格式以及在 map 过程中去掉无效数据都是为了减少数据传输量，与这些优化方法不同的是优化 Partitioner，因为它是为了均衡数据量，而非减少数据量。</li>
  <li>熵的计算公式和熵最大的条件。</li>
  <li><a href="http://www.cnblogs.com/daniagger/archive/2012/06/19/2555321.html">复杂链表的复制</a>，所谓复杂是指一个节点除了指向后继，还随机指向链表中的一个节点或 NULL。</li>
  <li>问如下代码的输出，其实就是统计二进制表示中 1 的个数。</li>
</ol>

<p><code>cpp 题目
int a = 9999;
int count = 0;
while(a) {
	count++;
	a = a &amp; (a-1);		
}
cout&lt;&lt;count&lt;&lt;endl;
</code></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>参考资料为：<a href="http://en.wikipedia.org/wiki/Discriminative_model">Discriminative model</a>，<a href="http://blog.csdn.net/wolenski/article/details/7985426#0-tsina-1-17355-397232819ff9a47a7b7e80a40613cfe1">判别式模型与生成式模型</a>。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试经验分享之数据结构、算法题]]></title>
    <link href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/"/>
    <updated>2014-11-18T10:18:41+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">数据结构题目</a>    <ul>
      <li><a href="#section-2">概述</a></li>
      <li><a href="#section-3">分类讨论</a>        <ul>
          <li><a href="#section-4">类型一：数据结构实现</a></li>
          <li><a href="#section-5">类型二：数据结构应用</a></li>
        </ul>
      </li>
      <li><a href="#section-6">准备建议</a></li>
    </ul>
  </li>
  <li><a href="#section-7">算法题目</a>    <ul>
      <li><a href="#section-8">概述</a></li>
      <li><a href="#section-9">分类讨论</a>        <ul>
          <li><a href="#section-10">类型一：经典算法实现题</a></li>
          <li><a href="#section-11">类型二：思维益智题</a></li>
        </ul>
      </li>
      <li><a href="#section-12">准备建议</a></li>
    </ul>
  </li>
  <li><a href="#section-13">开放题目</a></li>
  <li><a href="#section-14">总结</a></li>
</ul>

<h2 id="section">前言</h2>

<!-- excerpt start -->

<p>面试 IT 企业的研发岗位，数据结构和算法显然是必考的项目。俺只学过普通的数据结构课程，没读过 STL，也没有过 ACM 的训练和比赛经历，在一开始面对这样类型题目的时候，心里还是十分忐忑的。大大小小几十场面试下来，自己在这方面总算有了一定的心得积累，在此抛砖引玉，以飨读者。</p>

<p>在正式介绍题目和准备方法之前，有两点需要说明，</p>

<ul>
  <li>Google 和 Facebook 这类对算法有很高要求的公司的在线测试我没有参加过（不过在牛人内推帮助下有过面试体验……），这超出了我目前的编码能力范围，网上有不少拿到 Google、Facebook offer 的经验总结文章，可以移步观赏；</li>
  <li>前段时间在微博上又看到有人说自己把 leetcode 刷了好几遍，不过一些转发评论者觉得， IT 公司面试中的算法考察没有价值，一来工作里用不太上，二来把程序员素质考察搞成了应试教育，他们认为更重要的是应聘者的工程能力。遇到这样的讨论，我一般喜欢和一把稀泥。若干年前， Google、微软的面试题让大家眼前一亮，觉得能选拔出个性十足的聪明人来，不过随着大家对这类题目的适应，可能选拔出来的人也在趋同，至少很多人都会在面试前用心准备，<a href="http://www.oschina.net/news/41616/in-head-hunting-big-data-may-not-be-such-a-big-deal">据报道 Google 最近也是放弃了这类面试题目</a>。没有什么一劳永逸、一成不变的考查方式，毕竟面试是人和人之间的动态“较量”。不要贪恋算法的奇技淫巧，也不要因为题目筛选力度的衰减而否定考察初衷。面试不仅是考验求职者，也同样在考验面试官，<strong>如果问的都是老题儿，那本山大叔肯定都会抢答了</strong>。</li>
</ul>

<p>言归正传，以下分数据结构题目、算法题目、开放题目三部分来介绍我在面试中碰到的问题。</p>

<!-- excerpt end -->

<h2 id="section-1">数据结构题目</h2>

<h3 id="section-2">概述</h3>

<p>虽然课本由简到繁、由难到易地介绍了诸多数据结构，<strong>我在面试中被问到的却还都是基本类型</strong>，比如堆栈、队列、链表、二叉树。题目主要有两类，数据结构实现和具体情境下数据结构的应用。</p>

<h3 id="section-3">分类讨论</h3>

<h4 id="section-4">类型一：数据结构实现</h4>

<ol>
  <li>实现 java.util.List 中的基础功能；</li>
  <li>实现栈，使得 添加、删除、max 操作的复杂度为 O(1)（我脚着好像是不可实现的，想到最好的是添加、删除 O(log)， max 是 O(1)）；</li>
  <li>选取任意数据结构实现添加、删除、随机返回三个功能，分析复杂度；</li>
  <li>用数组实现队列，各操作的复杂度分析。</li>
</ol>

<h4 id="section-5">类型二：数据结构应用</h4>

<ol>
  <li>两棵树相加——对应位置两棵树都有值则相加，对应位置只有一棵树有值则取该值；</li>
  <li>用速度不同的指针可以判断链表中是否有环，问两速度满足怎样的关系可以保证发现环；</li>
  <li>如何在语料中寻找频繁出现的字串，分析复杂度（tire树）；</li>
  <li>中缀表达式转逆波兰表达式，逆波兰表达式求值；</li>
  <li>数据解压缩，3(a4(ab))    -&gt;    aababababaababababaabababab；</li>
  <li><a href="http://www.xuebuyuan.com/600249.html">二叉树的文件存储</a>。</li>
</ol>

<h3 id="section-6">准备建议</h3>

<p>上上之选当然是看《算法导论》，<a href="http://vdisk.weibo.com/s/G0pA_">书</a> 和 <a href="http://v.163.com/special/opencourse/algorithms.html">公开课</a> 都算。时间精力不足又想临时抱佛脚，清华大学计算机系邓俊辉老师的 <a href="http://www.amazon.cn/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E5%88%97%E6%95%99%E6%9D%90-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%82%93%E4%BF%8A%E8%BE%89/dp/B00FEC2GYM/ref=sr_1_1?ie=UTF8&amp;qid=1416641186&amp;sr=8-1&amp;keywords=%E9%82%93%E4%BF%8A%E8%BE%89">教材</a> 是好选择，也可以看 <a href="https://www.xuetangx.com/courses/TsinghuaX/30240184_1X/_/about">公开课</a>。注意<strong>熟记不同数据结构的不同操作的不同实现方式</strong>（比如 <a href="http://www.matrix67.com/blog/archives/1255">哈希表的插入删除查找</a>）<strong>的复杂度分析</strong>，不管面试官给你出的题目是难是易，妥妥儿的会问复杂度。</p>

<h2 id="section-7">算法题目</h2>

<h3 id="section-8">概述</h3>

<p>有过面试经历的企业（BAT、小米、宜信、猿题库、FreeWheel等）当中，还没有谁问过我需要复杂算法（比方说 <a href="http://zhidao.baidu.com/link?url=lx07DdsUSQO-zbwOqhlOCbXpT7Qj8pOtOHQ5G6JhNZYnT1vlgaBly5sOwZzqAhkZsqugfJRiRw1y7q857V44La">此链接</a> 中的很多知识点）才能解决的问题。我遇到的算法题目大致可以分为两类：</p>

<ul>
  <li>经典算法实现题 快速排序、归并排序、堆排序、KMP算法等都是重点，<strong>重要的是代码的正确性，其次是复杂度分析</strong>，当然，人家也不都是直接问你怎么实现这个具体算法，而是包装到情境里；</li>
  <li>思维益智题 考察你分析问题的能力，大部分可以归结到二分、动态规划、递归上，<strong>重要的是思路，其次是尽量低的复杂度，再次是代码的正确性</strong>。</li>
</ul>

<p>下面具体介绍我遇到的两种类型题目中的问题。</p>

<h3 id="section-9">分类讨论</h3>

<h4 id="section-10">类型一：经典算法实现题</h4>

<ol>
  <li>实现快速排序、归并排序、堆排序，各排序算法复杂度分析；</li>
  <li>实现KMP，解释原理；</li>
  <li>迷宫的深度搜索、广度搜索；</li>
  <li>写 find 函数，在目标串中匹配模式串（要考虑中文字符的情况）。</li>
</ol>

<h4 id="section-11">类型二：思维益智题</h4>

<ol>
  <li>数列中找第 k 大的数字（与快排或堆排序有关）；</li>
  <li>两个有序数组，寻找归并排序后数组的中位数/第 k 大数字（与二分有关）；</li>
  <li>一维数组，swap 其中的几对数字（每个数字只属于一次 swap 操作），实现查找（与二分有关）；</li>
  <li>一个有序数组，其中一个数字发生变异，但不知道变异后会不会影响整体序，如何实现查找；</li>
  <li>二维数组，每行递增，每列递增
    <ul>
      <li>实现查找；</li>
      <li>二维数组，每行递增，每列递增，求第 k 大的数；</li>
      <li>任意交换其中的两数，发现并恢复；</li>
    </ul>
  </li>
  <li>寻找字符串中第一个只出现一次的字符；</li>
  <li>统计数列中的逆序对（归并排序有关）；</li>
  <li>最长公共子串（动态规划有关）；</li>
  <li>最大子序列和，<a href="http://blog.csdn.net/caopengcs/article/details/36899787">允许交换一次的最大子序列和</a>；</li>
  <li>给定数组，寻找 next big（堆排序有关）；</li>
  <li>一维有序数组，经过循环位移后，最小的数出现在数列中间
    <ul>
      <li>如果原数组严格递增，如何找这个最小数；</li>
      <li>如果原数组严格递增或递减，如何找这个最小数；</li>
      <li>如果原数组非严格递增或递减，如何找这个最小数；</li>
    </ul>
  </li>
  <li>数组可能是递增、递减、递减后递增、递增后递减四种情况，递增递减都是非严格的，如果有转折点，返回转折点的值，否则返回-1；</li>
  <li>单向网络，起点和终点唯一且连通，寻找那些一旦被删除将导致起点终点无法连通的点；</li>
  <li>有序数组寻找和为某数的一对数字；</li>
  <li><a href="http://www.cnblogs.com/fuzhe1989/p/3428553.html">墙里能装多少水</a>；</li>
  <li>打印螺旋数组；</li>
  <li>打印组合数；</li>
  <li>字符数组，统计指定区间内的回文串个数。 </li>
</ol>

<h3 id="section-12">准备建议</h3>

<ul>
  <li>不要纠结于是否是最佳思路，要保证能在 10-15 分钟内给出一个解决方案，并分析复杂度；</li>
  <li>基础的可以读读 <a href="http://weibo.com/julyweibo?topnav=1&amp;wvr=6&amp;topsug=1">@研究者July</a> 的这本 <a href="http://frank19900731.github.io/ebook/the-art-of-programming-by-july/index.html">电子书</a>，更深入的可以阅读 CSDN 等博客中大牛们写的 ACM 解题报告；</li>
  <li><a href="http://www.hihocoder.com/">hihocoder</a>、<a href="http://www.topcoder.com/">topcoder</a>、<a href="https://oj.leetcode.com/">leetcode</a>、<a href="https://codility.com/">codility</a>、<a href="http://poj.org/">POJ</a> 等网站择一练手。</li>
</ul>

<h2 id="section-13">开放题目</h2>

<p>这类开放题目让你自主选择数据结构，主要是考察求职者对于数据结构的特性与使用场景的综合理解，在面对具体应用场景时能否运用已有的数据结构和算法知识提出合理的解决方案。一般来说在这类问题里哈希表的出场率会比较高……例题如下</p>

<ol>
  <li>大数据量的 url log，怎么去重且统计每个 url 的出现次数，复杂度分析；</li>
  <li>设计 cache 系统
    <ul>
      <li>设计 cache 的接口；</li>
      <li>可以用什么数据结构实现；</li>
      <li>如何实现可伸缩的容量；</li>
      <li>cache 的空间管理策略，比如 cache 哪些条目，何时清理；</li>
      <li>cache 系统启动时分配多大的空间，之后按照怎样的策略增大；</li>
    </ul>
  </li>
  <li>设计爬虫；</li>
  <li>流媒体播放客户端从多个完全相同的发送方接收视频包，同一发送方的包会按序到达，不同发送方的包则不一定，有可能会丢包，但还是要保证播放流畅度，设计播放客户端的算法。 </li>
</ol>

<h2 id="section-14">总结</h2>

<ul>
  <li>数据结构和算法的基础知识还是十分重要的，大部分题目的思路来源于此；</li>
  <li>训练自己算法复杂度的分析能力，<strong>有的时候对复杂度的分析会反过来会帮助你找到更好的算法</strong>；</li>
  <li>一定量的题目积累很重要，就好像准备高考数学压轴题一样，见识的越多，思路来得越快，当然，前提是你能够<strong>不断总结反思</strong>。</li>
</ul>

<p>继 <code>机器学习、大数据问题</code>、<code>智力题</code>、<code>数据结构与算法题</code>，我们在最后还会分享 <code>编程语言题</code>，敬请期待。</p>

<p>访问入口：</p>

<ul>
  <li><a href="/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li><a href="/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">编程语言题</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
