<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 网页开发 | Blog of 太极儒]]></title>
  <link href="http://frank19900731.github.io/blog/category/wang-ye-kai-fa/atom.xml" rel="self"/>
  <link href="http://frank19900731.github.io/"/>
  <updated>2015-05-11T00:12:37+08:00</updated>
  <id>http://frank19900731.github.io/</id>
  <author>
    <name><![CDATA[Frank Song]]></name>
    <email><![CDATA[scr_0731@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 Webhook 在 Gitlab 中实现类 Github Pages 效果]]></title>
    <link href="http://frank19900731.github.io/blog/2015/01/10/shi-yong-webhook-zai-gitlab-zhong-shi-xian-lei-github-pages-xiao-guo/"/>
    <updated>2015-01-10T21:35:56+08:00</updated>
    <id>http://frank19900731.github.io/blog/2015/01/10/shi-yong-webhook-zai-gitlab-zhong-shi-xian-lei-github-pages-xiao-guo</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#gitlab">Gitlab</a></li>
  <li><a href="#centos">CentOS:</a>    <ul>
      <li><a href="#web-hooks">Web hooks</a></li>
      <li><a href="#section">操作步骤</a>        <ul>
          <li><a href="#project">创建 Project，提交代码</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#gitlab-1">gitlab</a>    <ul>
      <li><a href="#web-hooks-1">关联 Web hooks</a></li>
      <li><a href="#web-hooks-">Web hooks 逻辑</a></li>
    </ul>
  </li>
</ul>

<!-- excerpt start -->

<h2 id="gitlab">Gitlab</h2>

<p><a href="https://gitlab.com/gitlab-org/gitlab-ce/tree/master">Gitlab</a> 是一个与 Github 极为相似的可视化版本管理系统，它基于 Git、Ruby on Rails、Redis 等工具框架，目前支持 Ubuntu、Debian、CentOS 在内的部分 *inx 操作系统，<strong>不考虑支持 Windows</strong>，详见 <a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/install/requirements.md">Requirements</a>。Gitlab 既有收费企业版，也有免费开源社区版本，被超过十万家机构广泛应用，安装方法及相关文档可以在 <a href="http://doc.gitlab.com/ce/">这里</a> 找到。</p>

<p>最简单的安装方式是下载 Omnibus 安装包进行安装，在 <a href="https://about.gitlab.com/downloads/">这里</a> 根据系统下载安装包，安装方法是</p>

<p>```bash Gitlab Omnibus Package 安装
# Ubuntu/Debian:
sudo dpkg -i gitlab_x.x.x-omnibus.xxx.deb</p>

<h1 id="centos">CentOS:</h1>
<p>sudo rpm -Uvh gitlab-x.x.x_xxx.rpm
```</p>

<p>系统初始登录账号是 <code>root</code>，密码是 <code>5iveL!fe</code>，登录后修改密码，为自己创建用户（组）。</p>

<p>Gitlab 的基本使用体验和 Github 是无差的，不过并不提供 <a href="https://pages.github.com/">Github Pages</a> 的功能：</p>

<blockquote>
  <p>Hosted directly from your GitHub repository. Just edit, push, and your changes are live.</p>
</blockquote>

<p>其实 Github Pages 的最大吸引力是<strong>免费的空间</strong>和<strong>免除服务器设置</strong>，如果单纯要实现 <code>Just edit, push, and your changes are live</code> 这一功能，可以借助 Web hooks。</p>

<!-- excerpt end -->

<h2 id="web-hooks">Web hooks</h2>

<p>Gitlab 中 Web hooks 的概念当然也和 Github 没差，给予的解释是</p>

<blockquote>
  <p>Project web hooks allow you to trigger an URL if new code is pushed or a new issue is created.</p>

  <p>You can configure web hooks to listen for specific events like pushes, issues or merge requests. GitLab will send a POST request with data to the web hook URL.</p>

  <p>Web hooks can be used to update an external issue tracker, trigger CI builds, update a backup mirror, or even deploy to your production server.</p>
</blockquote>

<p>我们想要实现的是让 push events 触发 production server 上的内容更新，更具体的说，是让我 <strong>Octopress 博客的 master 分支的 push 操作</strong>，触发<strong>网页服务器的内容更新</strong>。</p>

<p>push 操作发送的 post 请求内容示例如下。</p>

<p><code>json push 操作的 post 请求示例
{
  "before": "95790bf891e76fee5e1747ab589903a6a1f80f22",
  "after": "da1560886d4f094c3e6c9ef40349f7d38b5d27d7",
  "ref": "refs/heads/master",
  "user_id": 4,
  "user_name": "John Smith",
  "project_id": 15,
  "repository": {
    "name": "Diaspora",
    "url": "git@example.com:diaspora.git",
    "description": "",
    "homepage": "http://example.com/diaspora"
  },
  "commits": [
    {
      "id": "b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327",
      "message": "Update Catalan translation to e38cb41.",
      "timestamp": "2011-12-12T14:27:31+02:00",
      "url": "http://example.com/diaspora/commits/b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327",
      "author": {
        "name": "Jordi Mallach",
        "email": "jordi@softcatala.org"
      }
    },
    {
      "id": "da1560886d4f094c3e6c9ef40349f7d38b5d27d7",
      "message": "fixed readme",
      "timestamp": "2012-01-03T23:36:29+02:00",
      "url": "http://example.com/diaspora/commits/da1560886d4f094c3e6c9ef40349f7d38b5d27d7",
      "author": {
        "name": "GitLab dev user",
        "email": "gitlabdev@dv6700.(none)"
      }
    }
  ],
  "total_commits_count": 4
}
</code></p>

<p>我们只需要关注 <code>ref: refs/heads/master</code>，保证是 <strong>master</strong> 分支的 push 操作，而非其它分支（比如 source）。</p>

<p>官方提供了一个 ruby 版本的 webhook 接收逻辑。</p>

<p>```ruby print_http_body.rb
require ‘webrick’</p>

<p>server = WEBrick::HTTPServer.new(:Port =&gt; ARGV.first)
server.mount_proc ‘/’ do |req, res|
  puts req.body
end</p>

<p>trap ‘INT’ do 
  server.shutdown 
end
server.start
```</p>

<p>运行 <code>ruby print_http_body.rb 8000</code> 即可监听 push 事件。</p>

<p>我的打算是在自己现有的 Apache 服务器上，用 PHP 写这个简单逻辑。</p>

<h2 id="section">操作步骤</h2>

<p>将 Github 上的 Octorpess 博客迁移到 Gitlab 上的步骤如下。</p>

<h3 id="project">创建 Project，提交代码</h3>

<p>在 Gitlab 中创建 Project，在本地 Octopress Repository 文件夹下执行</p>

<p>```bash 添加 Gitlab 远端版本库
git remote add gitlab http://example.com/username/octopress.git
git push -u gitlab source:source</p>

<p>cd _deploy
git remote add gitlab http://example.com/username/octopress.git
git push -u gitlab master:master
```</p>

<p>gitlab 是自定义远端版本库的名称，以后可以向 Github 和自己搭建的 Gitlab 分别提交 master、source 分支的更改。</p>

<p>```bash 向 Github、Gitlab 提交更改
# github
rake deploy 
git push origin source</p>

<h1 id="gitlab-1">gitlab</h1>
<p>cd _deploy
git push gitlab master
cd ..
git push gitlab source
```</p>

<p>我们希望 <code>git push gitlab master</code> 触发服务器内容更新。</p>

<h3 id="web-hooks-1">关联 Web hooks</h3>

<p>如下图进入 Settings -&gt; Webhooks 创建一个钩子</p>

<p><a href="/img/post/2015-1/4.png" class="img-up" title="钩子创建"><img class="imgcenter" src="/img/post/2015-1/4.png" width="90%" title="钩子创建" ></a></p>

<p>点击 <code>Test Hook</code> 发送模拟消息到你指定的 URL。</p>

<h3 id="web-hooks-">Web hooks 逻辑</h3>

<p>编写 PHP 脚本如下</p>

<p>```php Web hooks 逻辑
&lt;?php</p>

<pre><code>$de_json =  json_decode($GLOBALS['HTTP_RAW_POST_DATA'], TRUE);
if ($de_json['ref'] == "refs/heads/master") // pull only when master branch updated
    shell_exec("cd /path/to/your/webcontent;/usr/bin/git pull http://example.com/username/octopress.git");
</code></pre>

<p>?&gt;
```</p>

<p>识别是 master 分支的更新提交，就到网页目录下更新内容。</p>

<p>测试中发现 PHP 里嵌入的 shell 命令无法执行，而在命令行中可以执行。网上查询可能是 safe_mode 设置的问题或者 <code>shell_exec</code> 在设置中被 disable 掉，又或者是 shell 执行环境的问题，不过最后确认的原因还是<strong>权限问题</strong>。</p>

<p>我把 Octopress 的内容放在 lighttpd 中，而 PHP 的运行环境是 Apache，后者的实际运行用户是 <code>www-data</code>（在 PHP 代码中执行 <code>whoami</code> 可知），而非登录用户或者 <code>root</code>，所以要改变 <code>www-data</code> 对于目录或文件的权限。</p>

<p><code>bash 权限变更
chmod o+rwx /usr/bin/git
chmod -R o+rwx /path/to/your/webcontent
</code></p>

<p>让 <code>www-data</code> 有权限执行 git 命令，并操作网页内容文件夹。</p>

<p>到这里，已经将 Octopress 迁移到 Gitlab 上，并完成 修改 -&gt; 提交 -&gt; 自动更新的功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微博卡片 — 微博收藏的可视化]]></title>
    <link href="http://frank19900731.github.io/blog/2014/12/09/wei-bo-qia-pian-wei-bo-shou-cang-de-ke-shi-hua/"/>
    <updated>2014-12-09T15:23:26+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/12/09/wei-bo-qia-pian-wei-bo-shou-cang-de-ke-shi-hua</id>
    <content type="html"><![CDATA[<!-- excerpt start -->

<p>平时自己会有一些新浪微博的收藏，主要是跟自己专业、兴趣相关的资讯、资料，随着积累的增多，如何有效回顾这些收藏成为了一个问题。</p>

<p>使用新浪微博自带的收藏页面，感觉翻页浏览不便；后来会在收藏的同时，把微博内容、图片分门别类拷贝到笔记中，但又不便于可视化。于是萌生了自己做一个微博可视化页面的想法，采用较为流行的瀑布流布局，每一条微博以卡片的形式展示。给出 <a href="https://github.com/frank19900731/weibocard">项目地址</a>  和 <a href="http://frank19900731.github.io/weibocard-demo/">Demo</a>。</p>

<p><a href="/img/post/2014-12/25.png" class="img-up" title="微博卡片 Demo"><img class="imgcenter" src="/img/post/2014-12/25.png" width="80%" title="微博卡片 Demo" ></a></p>

<p>项目使用新浪微博 Python SDK 抓取已收藏的微博，mongodb 做存储，根据查询条件生成 json 文件供前端可视化，前端瀑布流是从 <a href="http://www.imooc.com/learn/101">这门课</a> 中学到的。多说一句，慕课网里关于前端的教学内容非常丰富，很适合我这种半瓶醋选手……</p>

<p>我只简单地实现了时间区间的提取，不过有了微博数据和可视化骨架在，定制精细化的整理、阅读方式应该不难。</p>

<!-- excerpt end -->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 改造记录]]></title>
    <link href="http://frank19900731.github.io/blog/2014/10/16/octopress-gai-zao-ji-lu/"/>
    <updated>2014-10-16T20:45:34+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/10/16/octopress-gai-zao-ji-lu</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">网上资源</a></li>
  <li><a href="#section-1">特色工作</a>    <ul>
      <li><a href="#section-2">支持中文搜索</a></li>
      <li><a href="#section-3">移动版阅读优化</a></li>
      <li><a href="#section-4">其它</a></li>
    </ul>
  </li>
</ul>

<!-- excerpt start -->

<p>Octopress 安装不是难事，后期定制可真是慢功夫。以下分两部分介绍自己的定制过程，前一部分是网上资源，后一部分是自己的一点特色工作。</p>

<h2 id="section">网上资源</h2>
<ul>
  <li><a href="http://wangmuy.github.io/blog/2013/09-01-octopress-setup.html">安装方法、lunr.js 搜索、社交分享</a></li>
  <li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">页面主题选择</a></li>
  <li><a href="http://xoyo.name/2012/04/auto-spacing-for-octopress/">中英文加空格</a></li>
  <li><a href="http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html">链接在新标签页中打开</a></li>
  <li><a href="http://www.qq.com/404/">公益404页面</a></li>
  <li><a href="http://www.douban.com/service/badgemakerjs">豆瓣收藏秀</a></li>
  <li><a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/">添加标签云</a></li>
  <li><a href="http://octopress.org/docs/blogging/code/">插入代码块</a></li>
  <li><a href="http://cn.soulmachine.me/blog/20130402/">启用 MathJax、Kramdown 替换、嵌入多说评论</a></li>
  <li><a href="http://codemacro.com/2012/07/26/post-footer-plugin-for-octopress/">加入文章版权</a></li>
  <li><a href="http://blog.csdn.net/lcliliil/article/details/13727927">SEO 优化</a></li>
  <li><a href="https://github.com/frank19900731/frank19900731.github.io/tree/source/plugins">Archive分页、Category分页、Tag分页等插件</a></li>
</ul>

<!-- excerpt end -->

<h2 id="section-1">特色工作</h2>

<h3 id="section-2">支持中文搜索</h3>

<p>lunr.js 功能强大，但不支持中文搜索。其实原因在于没有使用中文分词器，只要对生成的 search.json 文件进行分词即可。用 Java 写了一个 <a href="https://github.com/frank19900731/lunr-Chinese">小工具</a>，主要做法是</p>

<ul>
  <li>读取 search.json</li>
  <li>对中文内容进行分词</li>
  <li>内容写回到 search.json</li>
</ul>

<p>用法参见这个 <a href="https://github.com/frank19900731/frank19900731.github.io/blob/source/lunr-parse.sh">脚本</a>，大家可以右上角搜索一下试试。这种方式的问题在于分词分不出就搜索不出来。比如“蛋疼”，也许就查不到，不过这个小工具支持字典扩展。</p>

<h3 id="section-3">移动版阅读优化</h3>
<p>想要推广博客，SEO 是一方面，利用社交媒体的分享能力也很关键，但尴尬的是很多主题对移动端支持不够好，需要重新定制 layout。本博客的移动访问入口 <a href="http://frank19900731.github.io/wx/archives/">在此</a>，供参考。另，CNZZ 的跟踪实时性更好，我的博客是 Google Analytics 和 CNZZ 并用的。 </p>

<h3 id="section-4">其它</h3>

<ul>
  <li>使用 <a href="http://fancyapps.com/fancybox/">FancyBox</a> 优化图片显示</li>
  <li><a href="https://github.com/frank19900731/frank19900731.github.io/blob/source/plugins/image_tag.rb">改造 img 标签</a>，使可以使用相对宽度（这样一来PC端和移动端的图片设置就一样了）</li>
  <li><a href="http://www.shejidaren.com/use-css3-to-create-a-beautiful-comment-ui.html">定制多说评论显示</a></li>
  <li>窗口右侧添加临时目录</li>
</ul>

<p><a href="/img/post/2014-10/10.jpg" class="img-up" title="临时目录"><img class="imgcenter" src="/img/post/2014-10/10.jpg" width="80%" title="临时目录" ></a></p>

<ul>
  <li>使用 dlmenu 整合访问入口</li>
</ul>

<p><a href="/img/post/2014-10/11.jpg" class="img-up" title="dlmenu"><img class="imgcenter" src="/img/post/2014-10/11.jpg" width="35%" title="dlmenu" ></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的第一篇 Octopress 博客]]></title>
    <link href="http://frank19900731.github.io/blog/2014/08/24/wo-de-di-yi-pian-octopress-bo-ke/"/>
    <updated>2014-08-24T21:50:56+08:00</updated>
    <id>http://frank19900731.github.io/blog/2014/08/24/wo-de-di-yi-pian-octopress-bo-ke</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">段落分级</a></li>
  <li><a href="#section-1">第二级标题</a></li>
  <li><a href="#blockquote">BlockQuote</a></li>
  <li><a href="#section-2">代码展示</a></li>
  <li><a href="#given-an-alphabet">Given an alphabet:</a></li>
  <li><a href="#iterate-over-part-of-the-alphabet">Iterate over part of the alphabet:</a></li>
  <li><a href="#given-an-alphabet-1">Given an alphabet:</a></li>
  <li><a href="#iterate-over-part-of-the-alphabet-1">Iterate over part of the alphabet:</a>    <ul>
      <li><a href="#inline-code">使用 Inline Code</a></li>
      <li><a href="#section-3">使用脚注</a></li>
      <li><a href="#section-4">使用目录</a></li>
      <li><a href="#section-5">使用数学公式</a></li>
      <li><a href="#section-6">使用链接</a></li>
      <li><a href="#section-7">使用图片</a></li>
      <li><a href="#pullquote">使用 pullquote</a></li>
      <li><a href="#section-8">使用表格</a></li>
      <li><a href="#horizontal-rules">使用 Horizontal Rules</a></li>
      <li><a href="#section-9">使用列表</a></li>
      <li><a href="#section-10">使用定义列表</a></li>
      <li><a href="#attribute">为块级元素添加 attribute</a></li>
      <li><a href="#inline--attribute">为 inline 元素添加 attribute</a></li>
      <li><a href="#section-11">使用扩展</a></li>
      <li><a href="#section-12">使用文字修饰</a></li>
      <li><a href="#typographic-symbols">使用 Typographic Symbols</a></li>
    </ul>
  </li>
</ul>

<!-- excerpt start -->

<h2 id="section">段落分级</h2>
<p>以 # 的个数表示段落层次。</p>

<p><code>objc 段落分级
# 第一级目录
## 第二级目录
### 第三级目录
#### 第四级目录
##### 第五级目录
###### 第六级目录
</code>
还可以表示为</p>

<p>```
第一级标题
===============</p>

<h2 id="section-1">第二级标题</h2>
<p>```</p>

<h2 id="blockquote">BlockQuote</h2>
<ul>
  <li>方法一： 使用 &gt;</li>
</ul>

<p><code>objc 使用 &gt;
&gt; A sample blockquote.
&gt;
&gt; &gt;Nested blockquotes are
&gt; &gt;also possible.
&gt;
&gt; This is the outer quote again.
</code></p>

<blockquote>
  <p>A sample blockquote.</p>

  <blockquote>
    <p>Nested blockquotes are
also possible.</p>
  </blockquote>

  <p>This is the outer quote again.</p>
</blockquote>

<p>在 blockquote 中添加诸如 header 等的块级元素无妨。</p>

<ul>
  <li>方法二：使用 blockquote 作标记</li>
</ul>

<p><code>objc 使用 blockquote 标签
<blockquote><p>Wheeee!</p><footer><strong>Bobby Willis</strong> <cite><a href='http://google.com/search?q=pants'>The Search for Bobby's Pants</a></cite></footer></blockquote>
</code></p>

<p><blockquote><p>Wheeee!</p><footer><strong>Bobby Willis</strong> <cite><a href='http://google.com/search?q=pants'>The Search for Bobby’s Pants</a></cite></footer></blockquote></p>

<!-- excerpt end -->

<h2 id="section-2">代码展示</h2>
<ul>
  <li>方法一：缩进一个 tab</li>
</ul>

<p><code>objc 使用缩进展示代码
	System.out.println("Hello World!");
</code></p>

<pre><code>System.out.println("Hello World!");
</code></pre>

<ul>
  <li>方法二：使用波浪线</li>
</ul>

<p><code>objc 使用波浪线展示代码
~~~~~~
This is also a code block.
~~~
Ending lines must have at least as
many tildes as the starting line.
~~~~~~~~~~~~
</code></p>

<pre><code>This is also a code block.
~~~
Ending lines must have at least as
many tildes as the starting line.
</code></pre>

<ul>
  <li>方法三：使用连续 3 个 ` 作标记</li>
</ul>

<p>``` objc 使用连续3个 ` 展示代码
3` objc Obj-C 用例 https://github.com/frank19900731/ObjcDemo/blob/master/ObjcDemo/Animal.m Github
#import “Animal.h”</p>

<p>@implementation Animal</p>

<ul>
  <li>(void)description
{
  NSLog(@”I’m a cute animal.”);
}
@end
3<code>
</code>``</li>
</ul>

<p>``` objc Obj-C 用例 https://github.com/frank19900731/ObjcDemo/blob/master/ObjcDemo/Animal.m Github
#import “Animal.h”</p>

<p>@implementation Animal</p>

<ul>
  <li>(void)description
{
  NSLog(@”I’m a cute animal.”);
}
@end
```</li>
</ul>

<p><a href="http://pygments.org/docs/lexers/">支持的语言</a> </p>

<ul>
  <li>方法四：导入文件中的代码</li>
</ul>

<p><code>objc 导入文件中的代码
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Test.js for download (test.js)</span> <a href='/downloads/code/test.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> sample javascript from xui</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">xui</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">window</span>     <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">string</span>     <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">document</span>   <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">simpleExpr</span> <span class="o">=</span> <span class="sr">/^#?([\w-]+)$/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">idExpr</span>     <span class="o">=</span> <span class="sr">/^#/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">tagExpr</span>    <span class="o">=</span> <span class="sr">/&lt;([\w:]+)/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">slice</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeType</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span> <span class="nx">slice</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">ret</span><span class="o">=</span><span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span> <span class="p">};</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">x$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">xui</span> <span class="o">=</span> <span class="nx">xui</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">xui</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Test.js for download (test.js)</span> <a href='/downloads/code/test.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> sample javascript from xui</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">xui</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">window</span>     <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">string</span>     <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">document</span>   <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">simpleExpr</span> <span class="o">=</span> <span class="sr">/^#?([\w-]+)$/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">idExpr</span>     <span class="o">=</span> <span class="sr">/^#/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">tagExpr</span>    <span class="o">=</span> <span class="sr">/&lt;([\w:]+)/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">slice</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeType</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span> <span class="nx">slice</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">ret</span><span class="o">=</span><span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span> <span class="p">};</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">x$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">xui</span> <span class="o">=</span> <span class="nx">xui</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">xui</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li>方法五：导入 gist 中的代码</li>
</ul>

<p><code>objc 导入 gist 中的代码
<div><script src='https://gist.github.com/4321346.js?file=gistfile1.diff'></script>
<noscript><pre><code>@@ -590,7 +590,7 @@ class SpritesTest &lt; Test::Unit::TestCase
  it &quot;should generate a sprite from nested folders&quot; do
    css = render &lt;&lt;-SCSS
-     @import &quot;nested/*.png&quot;;
+     @import &quot;nested/**/*.png&quot;;
      @include all-nested-sprites;
    SCSS
    assert_correct css, &lt;&lt;-CSS</code></pre></noscript></div>

</code></p>

<p><div><script src='https://gist.github.com/4321346.js?file=gistfile1.diff'></script>
<noscript><pre><code>@@ -590,7 +590,7 @@ class SpritesTest &lt; Test::Unit::TestCase
  it &quot;should generate a sprite from nested folders&quot; do
    css = render &lt;&lt;-SCSS
-     @import &quot;nested/*.png&quot;;
+     @import &quot;nested/**/*.png&quot;;
      @include all-nested-sprites;
    SCSS
    assert_correct css, &lt;&lt;-CSS</code></pre></noscript></div>
</p>

<p><code>objc 导入 gist 中的代码
<div><script src='https://gist.github.com/1059334.js?file=svg_bullets.rb'></script>
<noscript><pre><code>require &#39;sass&#39;

module Sass::Script::Functions
  def svg_circle(radius, color, circle_type)
    img = if circle_type.value == &quot;disc&quot;
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke-width=&quot;0&quot; fill=&quot;#{color}&quot;/&gt;}
    else
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke=&quot;#{color}&quot; stroke-width=&quot;1&quot; fill=&quot;white&quot;/&gt;}
    end
    inline_image_string(svg_circle_envelope(img).gsub(/  +/, &#39; &#39;), &#39;image/svg+xml&#39;)
  end
  private
  def svg_circle_envelope(content)
    %Q{&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;#{content}&lt;/svg&gt;}
  end
end
</code></pre></noscript></div>

<div><script src='https://gist.github.com/1059334.js?file=usage.scss'></script>
<noscript><pre><code>// Draw a list style image in svg using the radius and color specified.
@mixin colored-bullet($radius, $color, $type: disc) {
  list-style-type: $type;
  list-style-image: svg-circle($radius, $color, $type);
}


ul {
  @include colored-bullet(2px, $green, disc);
  ul {
    @include colored-bullet(2px, $green, circle);
  }
}
</code></pre></noscript></div>

</code></p>

<p><div><script src='https://gist.github.com/1059334.js?file=svg_bullets.rb'></script>
<noscript><pre><code>require &#39;sass&#39;

module Sass::Script::Functions
  def svg_circle(radius, color, circle_type)
    img = if circle_type.value == &quot;disc&quot;
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke-width=&quot;0&quot; fill=&quot;#{color}&quot;/&gt;}
    else
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke=&quot;#{color}&quot; stroke-width=&quot;1&quot; fill=&quot;white&quot;/&gt;}
    end
    inline_image_string(svg_circle_envelope(img).gsub(/  +/, &#39; &#39;), &#39;image/svg+xml&#39;)
  end
  private
  def svg_circle_envelope(content)
    %Q{&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;#{content}&lt;/svg&gt;}
  end
end
</code></pre></noscript></div>

<div><script src='https://gist.github.com/1059334.js?file=usage.scss'></script>
<noscript><pre><code>// Draw a list style image in svg using the radius and color specified.
@mixin colored-bullet($radius, $color, $type: disc) {
  list-style-type: $type;
  list-style-image: svg-circle($radius, $color, $type);
}


ul {
  @include colored-bullet(2px, $green, disc);
  ul {
    @include colored-bullet(2px, $green, circle);
  }
}
</code></pre></noscript></div>
</p>

<ul>
  <li>方法六：使用 codeblock 作标记</li>
</ul>

<p>``` objc 使用 codeblock 展示代码
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Coffeescript Tricks </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="given-an-alphabet">Given an alphabet:&lt;/h1>
</span><span class='line'>&lt;p>alphabet = ‘abcdefghijklmnopqrstuvwxyz’&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="iterate-over-part-of-the-alphabet">Iterate over part of the alphabet:&lt;/h1>
</span><span class='line'>&lt;p>console.log letter for letter in alphabet[4..8]</span></code></pre></td></tr></table></div></figure></notextile></div>
```</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Coffeescript Tricks </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="given-an-alphabet-1">Given an alphabet:&lt;/h1>
</span><span class='line'>&lt;p>alphabet = ‘abcdefghijklmnopqrstuvwxyz’&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="iterate-over-part-of-the-alphabet-1">Iterate over part of the alphabet:&lt;/h1>
</span><span class='line'>&lt;p>console.log letter for letter in alphabet[4..8]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="inline-code">使用 Inline Code</h2>

<p>``` objc 使用 Inline Code
Use <code>Kramdown::Document.new(text).to_html</code>
to convert the <code>text</code> in kramdown
syntax to HTML.</p>

<p>Use backticks to markup code,
e.g. <code>`code`</code>.
```</p>

<p>Use <code>Kramdown::Document.new(text).to_html</code>
to convert the <code>text</code> in kramdown
syntax to HTML.</p>

<p>Use backticks to markup code,
e.g. <code>`code`</code>.</p>

<h2 id="section-3">使用脚注</h2>

<p>我的脚注<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h2 id="section-4">使用目录</h2>

<p>``` objc 使用目录
* list element with functor item</p>
<p>```</p>

<ul>
  <li>list element with functor item</li>
</ul>

<h2 id="section-5">使用数学公式</h2>

<p>``` objc 使用数学公式
random variables <script type="math/tex">X_1, X_2, X_3</script> from</p>

<p>$$
\begin{align}
\mbox{Union: } &amp; A\cup B = {x\mid x\in A \mbox{ or } x\in B} <br />
\mbox{Concatenation: } &amp; A\circ B  = {xy\mid x\in A \mbox{ and } y\in B} <br />
\mbox{Star: } &amp; A^\star  = {x<em>1x</em>2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A} <br />
\end{align}
$$
```</p>

<p>random variables <script type="math/tex">X_1, X_2, X_3</script> from</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align}
 %]]&gt;</script>

<p>``` objc 
The following is a math block:</p>

<script type="math/tex; mode=display"> 5 + 5 </script>

<p>But next comes a paragraph with an inline math statement:</p>

<p><script type="math/tex"> 5 + 5 </script>
```</p>

<p>The following is a math block:</p>

<script type="math/tex; mode=display"> 5 + 5 </script>

<p>But next comes a paragraph with an inline math statement:</p>

<p><script type="math/tex"> 5 + 5 </script></p>

<h2 id="section-6">使用链接</h2>

<p><code>objc 使用链接
[Jekyll](http://www.jekyllrb.com) is a very popular and very powerful static blog generator. Out of the box it's able to generate sophisticated site structures, and has a ton of configurability. One of the areas where I feel that Jekyll lacks some sophistication is around the handling of categories and tags; these are two data-sets that are core to Jekyll, but there isn't a lot of functionality actually built around them. This is in contrast to dynamic blogging platforms like [WordPress](http://www.wordpress.com), or possibly [Drupal](http://www.drupal.org), where these two data points are used to drive a lot of central navigation for the site.
</code></p>

<p><a href="http://www.jekyllrb.com">Jekyll</a> is a very popular and very powerful static blog generator. Out of the box it’s able to generate sophisticated site structures, and has a ton of configurability. One of the areas where I feel that Jekyll lacks some sophistication is around the handling of categories and tags; these are two data-sets that are core to Jekyll, but there isn’t a lot of functionality actually built around them. This is in contrast to dynamic blogging platforms like <a href="http://www.wordpress.com">WordPress</a>, or possibly <a href="http://www.drupal.org">Drupal</a>, where these two data points are used to drive a lot of central navigation for the site.</p>

<h2 id="section-7">使用图片</h2>

<p><code>objc 使用图片
<a href="http://placekitten.com/320/250" class="img-up" title="Place Kitten #2"><img class="imgright" src="http://placekitten.com/320/250" width="40%" title="Place Kitten #2" ></a>
</code></p>

<p><a href="http://placekitten.com/320/250" class="img-up" title="Place Kitten"><img class="imgright" src="http://placekitten.com/320/250" width="40%" title="Place Kitten" ></a></p>

<p><code>objc 使用图片
<a href="http://placekitten.com/300/500" class="img-up" title="Place Kitten #4"><img class="imgcenter" src="http://placekitten.com/300/500" width="40%" title="Place Kitten #4" alt="An image of a very cute kitten"></a>
</code></p>

<p><a href="http://placekitten.com/300/500" class="img-up" title="‘Place Kitten #4’ ‘An image of a very cute kitten’"><img class="imgcenter" src="http://placekitten.com/300/500" width="40%" title="‘Place Kitten #4’ ‘An image of a very cute kitten’" ></a></p>

<p><code>objc 使用图片
<a href="/img/portrait.jpg" class="img-up" title="My Cartoon Portrait"><img class="imgleft" src="/img/portrait.jpg" width="40%" title="My Cartoon Portrait" ></a>
</code></p>

<p><a href="/img/portrait.jpg" class="img-up" title="My Cartoon Portrait"><img class="imgleft" src="/img/portrait.jpg" width="40%" title="My Cartoon Portrait" ></a></p>

<h2 id="pullquote">使用 pullquote</h2>

<p><code>objc 使用 pullquote
<span class='pullquote-right' data-pullquote='surround it like this'>
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, surround it like this and that's all there is to it.
</span>
</code></p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<h2 id="section-8">使用表格</h2>

<p>``` objc 使用表格
&lt;div markdown='1' class='foo'&gt;|—————–+————+—————–+—————-|
| Default aligned |Left aligned| Center aligned  | Right aligned  |
|—————–|:———–|:—————:|—————:|
| First body part |Second cell | Third cell      | fourth cell    |
| Second line     |foo         | <strong>strong</strong>      | baz            |
| Third line      |quux        | baz             | bar            |
|—————–+————+—————–+—————-|</p>

<p>&lt;/div&gt;
```</p>

<div class="foo">
  <table>
    <thead>
      <tr>
        <th>Default aligned</th>
        <th style="text-align: left">Left aligned</th>
        <th style="text-align: center">Center aligned</th>
        <th style="text-align: right">Right aligned</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>First body part</td>
        <td style="text-align: left">Second cell</td>
        <td style="text-align: center">Third cell</td>
        <td style="text-align: right">fourth cell</td>
      </tr>
      <tr>
        <td>Second line</td>
        <td style="text-align: left">foo</td>
        <td style="text-align: center"><strong>strong</strong></td>
        <td style="text-align: right">baz</td>
      </tr>
      <tr>
        <td>Third line</td>
        <td style="text-align: left">quux</td>
        <td style="text-align: center">baz</td>
        <td style="text-align: right">bar</td>
      </tr>
    </tbody>
  </table>

</div>

<h2 id="horizontal-rules">使用 Horizontal Rules</h2>

<p>``` objc 使用 Horizontal Rules
* * *</p>

<hr />

<hr />

<hr />
<p>```</p>

<hr />

<hr />

<hr />

<hr />

<h2 id="section-9">使用列表</h2>

<ul>
  <li>方法一：使用数字</li>
</ul>

<p><code>objc 使用数字
1. Item one
   1. sub item one
   2. sub item two
   3. sub item three
2. Item two
</code></p>

<ol>
  <li>Item one
    <ol>
      <li>sub item one</li>
      <li>sub item two</li>
      <li>sub item three</li>
    </ol>
  </li>
  <li>Item two</li>
</ol>

<ul>
  <li>方法二：使用 *</li>
</ul>

<p><code>objc 使用 */+/-
* Item one
+ Item two
- Item three
</code></p>

<ul>
  <li>Item one</li>
  <li>Item two</li>
  <li>Item three</li>
</ul>

<h2 id="section-10">使用定义列表</h2>

<dl>
  <dt>``` objc 使用定义列表</dt>
  <dt>term</dt>
  <dd>definition</dd>
  <dd>another definition</dd>
  <dt>another term</dt>
  <dt>and another term</dt>
  <dd>and a definition for the term
```</dd>
  <dt>term</dt>
  <dd>definition</dd>
  <dd>another definition</dd>
  <dt>another term</dt>
  <dt>and another term</dt>
  <dd>and a definition for the term</dd>
</dl>

<h2 id="attribute">为块级元素添加 attribute</h2>

<p class="class1 class2">``` objc 添加一个属性
&gt; A nice blockquote</p>
<p>```</p>

<blockquote class="class1 class2">
  <p>A nice blockquote</p>
</blockquote>

<p>``` objc 添加多个属性</p>
<p class="c1 c2 c1 c2 c3" id="para" title="t">paragraph</p>
<p>```</p>

<p class="c1 c2 c1 c2 c3" id="para" title="t">paragraph</p>

<h2 id="inline--attribute">为 inline 元素添加 attribute</h2>

<p><code>objc 为内嵌元素添加 attribute
This is *red*{: style="color: red"}.
</code></p>

<p>This is <em style="color: red">red</em>.</p>

<h2 id="section-11">使用扩展</h2>

<p>``` objc 使用扩展
This is a paragraph
<!-- 
This is a comment which is
completely ignored.
 -->
… paragraph continues here.</p>

<p>Extensions can also be used
inline **see**!
```</p>

<p>This is a paragraph
<!-- 
This is a comment which is
completely ignored.
 -->
… paragraph continues here.</p>

<p>Extensions can also be used
inline **see**!</p>

<p><strong>Notes</strong></p>

<ul>
  <li>comment
    <ul>
      <li>Treat the body text as a comment which does not show in the output.</li>
    </ul>
  </li>
  <li>nomarkdown
    <ul>
      <li>Don’t process the body with kramdown but output it as-is. The attribute type specifies which converters should output the body: if the attribute is missing, all converters should output it. Otherwise the attribute value has to be a space separated list of converter names and these converters should output the body.</li>
    </ul>
  </li>
  <li>options
    <ul>
      <li>Should be used without a body since the body is ignored. Is used for setting the global options for the kramdown processor (for example, to disable automatic header ID generation). Note that options that are used by the parser are immediately effective whereas all other options are not! This means, for example, that it is not possible to set converter options only for some part of a kramdown document.</li>
    </ul>
  </li>
</ul>

<h2 id="section-12">使用文字修饰</h2>

<p><code>objc 使用文字修饰
*Emphasized*
_Emphasized_
**Strong**
__Strong__
</code></p>

<p><em>Emphasized</em></p>

<p><em>Emphasized</em></p>

<p><strong>Strong</strong></p>

<p><strong>Strong</strong></p>

<h2 id="typographic-symbols">使用 Typographic Symbols</h2>

<p><code>objc 使用 Typographic Symbols
--- will become an em-dash (like this —)
-- will become an en-dash (like this –)
... will become an ellipsis (like this …)
&lt;&lt; will become a left guillemet (like this «) – an optional following space will become a non-breakable space
&gt;&gt; will become a right guillemet (like this ») – an optional leading space will become a non-breakable space
</code></p>

<p>— will become an em-dash (like this —)</p>

<p>– will become an en-dash (like this –)</p>

<p>… will become an ellipsis (like this …)</p>

<p>&lt;&lt; will become a left guillemet (like this «) – an optional following space will become a non-breakable space</p>

<p>&gt;&gt; will become a right guillemet (like this ») – an optional leading space will become a non-breakable space</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>我的脚注<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
