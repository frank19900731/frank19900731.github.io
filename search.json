{"entries":[{"title":"404 Error","url":"/404.html","date":null,"categories":[],"body":" "},{"title":"Book List","url":"/booklist/index.html","date":null,"categories":[],"body":""},{"title":"Movie List","url":"/movielist/index.html","date":null,"categories":[],"body":""},{"title":"To Write","url":"/towrite/index.html","date":null,"categories":[],"body":"写作计划 2014.10.17 百度等互联网公司的面试经验（十一月中旬） Spark 学习笔记 （近期） "},{"title":"我的第一篇 Octopress 博客","url":"/blog/2014/08/24/wo-de-di-yi-pian-octopress-bo-ke/","date":"2014-08-24 21:50:56 +0800","categories":["网页开发"],"body":"目录 段落分级 BlockQuote 代码展示 使用 Inline Code 使用脚注 使用目录 使用数学公式 使用链接 使用图片 使用 pullquote 使用表格 使用 Horizontal Rules 使用列表 使用定义列表 为块级元素添加 attribute 为 inline 元素添加 attribute 使用扩展 使用文字修饰 使用 Typographic Symbols 段落分级 以 # 的个数表示段落层次。 段落分级 1 2 3 4 5 6 # 第一级目录 ## 第二级目录 ### 第三级目录 #### 第四级目录 ##### 第五级目录 ###### 第六级目录 还可以表示为 段落分级 1 2 3 4 5 第一级标题 =============== 第二级标题 --------------- BlockQuote 方法一： 使用 > 使用 > 1 2 3 4 5 6 > A sample blockquote . > > > Nested blockquotes are > > also possible . > > This is the outer quote again . A sample blockquote. Nested blockquotes are also possible. This is the outer quote again. 在 blockquote 中添加诸如 header 等的块级元素无妨。 方法二：使用 blockquote 作标记 使用 blockquote 标签 1 2 3 { % blockquote Bobby Willis http: //google.com/search?q=pants the search for bobby's pants %} Wheeee ! { % endblockquote % } Wheeee! Bobby Willis The Search for Bobby’s Pants 代码展示 方法一：缩进一个 tab 使用缩进展示代码 1 System . out . println ( \"Hello World!\" ); System.out.println(\"Hello World!\"); 方法二：使用波浪线 使用波浪线展示代码 1 2 3 4 5 6 ~~~~~~ This is also a code block . ~~~ Ending lines must have at least as many tildes as the starting line . ~~~~~~~~~~~~ This is also a code block. ~~~ Ending lines must have at least as many tildes as the starting line. 方法三：使用连续 3 个 ` 作标记 使用连续3个 ` 展示代码 1 2 3 4 5 6 7 8 9 10 11 3 ` objc Obj - C 用例 https: //github.com/frank19900731/ObjcDemo/blob/master/ObjcDemo/Animal.m Github #import \"Animal.h\" @implementation Animal + ( void ) description { NSLog ( @\"I'm a cute animal.\" ); } @end 3 ` Obj-C 用例 Github 1 2 3 4 5 6 7 8 9 #import \"Animal.h\" @implementation Animal + ( void ) description { NSLog ( @\"I'm a cute animal.\" ); } @end 支持的语言 方法四：导入文件中的代码 导入文件中的代码 1 { % include_code Test . js for download test . js % } Test.js for download (test.js) download 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /** sample javascript from xui */ var undefined , xui , window = this , string = new String ( 'string' ), document = window . document , simpleExpr = /^#?([\\w-]+)$/ , idExpr = /^#/ , tagExpr = /<([\\w:]+)/ , slice = function ( e ) { return []. slice . call ( e , 0 ); }; try { var a = slice ( document . documentElement . childNodes )[ 0 ]. nodeType ; } catch ( e ){ slice = function ( e ) { var ret = []; for ( var i = 0 ; e [ i ]; i ++ ) ret . push ( e [ i ]); return ret ; }; } window . x$ = window . xui = xui = function ( q , context ) { return new xui . fn . find ( q , context ); }; 方法五：导入 gist 中的代码 导入 gist 中的代码 1 { % gist 4321346 gistfile1 . diff % } @@ -590,7 +590,7 @@ class SpritesTest < Test::Unit::TestCase it \"should generate a sprite from nested folders\" do css = render <<-SCSS - @import \"nested/*.png\"; + @import \"nested/**/*.png\"; @include all-nested-sprites; SCSS assert_correct css, <<-CSS 导入 gist 中的代码 1 2 { % gist 1059334 svg_bullets . rb % } { % gist 1059334 usage . scss % } require 'sass' module Sass::Script::Functions def svg_circle(radius, color, circle_type) img = if circle_type.value == \"disc\" %Q{<circle cx=\"#{radius.value}\" cy=\"#{radius.value}\" r=\"#{radius.value}\" stroke-width=\"0\" fill=\"#{color}\"/>} else %Q{<circle cx=\"#{radius.value}\" cy=\"#{radius.value}\" r=\"#{radius.value}\" stroke=\"#{color}\" stroke-width=\"1\" fill=\"white\"/>} end inline_image_string(svg_circle_envelope(img).gsub(/ +/, ' '), 'image/svg+xml') end private def svg_circle_envelope(content) %Q{<?xml version=\"1.0\" encoding=\"utf-8\"?> <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">#{content}</svg>} end end // Draw a list style image in svg using the radius and color specified. @mixin colored-bullet($radius, $color, $type: disc) { list-style-type: $type; list-style-image: svg-circle($radius, $color, $type); } ul { @include colored-bullet(2px, $green, disc); ul { @include colored-bullet(2px, $green, circle); } } 方法六：使用 codeblock 作标记 使用 codeblock 展示代码 1 2 3 4 5 6 7 8 { % codeblock Coffeescript Tricks % } # Given an alphabet: alphabet = ' abcdefghijklmnopqrstuvwxyz ' # Iterate over part of the alphabet: console . log letter for letter in alphabet [ 4..8 ] { % endcodeblock % } Coffeescript Tricks 1 2 3 4 5 # Given an alphabet: alphabet = 'abcdefghijklmnopqrstuvwxyz' # Iterate over part of the alphabet: console.log letter for letter in alphabet[4..8] 使用 Inline Code 使用 Inline Code 1 2 3 4 5 6 Use ` Kramdown :: Document . new ( text ). to_html ` to convert the ` text ` in kramdown syntax to HTML . Use backticks to markup code , e . g . `` ` code ` `` . Use Kramdown::Document.new(text).to_html to convert the text in kramdown syntax to HTML. Use backticks to markup code, e.g. `code` . 使用脚注 我的脚注 1 使用目录 使用目录 1 2 * list element with functor item { : toc } list element with functor item 使用数学公式 使用数学公式 1 2 3 4 5 6 7 8 9 random variables $$X_1 , X_2 , X_3$$ from $$ \\ begin { align } \\ mbox { Union: } & A \\ cup B = \\ { x \\ mid x \\ in A \\ mbox { or } x \\ in B \\ } \\ \\ \\ mbox { Concatenation: } & A \\ circ B = \\ { xy \\ mid x \\ in A \\ mbox { and } y \\ in B \\ } \\ \\ \\ mbox { Star: } & A ^ \\ star = \\ { x_1x_2 \\ ldots x_k \\ mid k \\ geq 0 \\ mbox { and each } x_i \\ in A \\ } \\ \\ \\ end { align } $$ random variables X_1, X_2, X_3 from % <![CDATA[ \\begin{align} \\mbox{Union: } & A\\cup B = \\{x\\mid x\\in A \\mbox{ or } x\\in B\\} \\\\ \\mbox{Concatenation: } & A\\circ B = \\{xy\\mid x\\in A \\mbox{ and } y\\in B\\} \\\\ \\mbox{Star: } & A^\\star = \\{x_1x_2\\ldots x_k \\mid k\\geq 0 \\mbox{ and each } x_i\\in A\\} \\\\ \\end{align} %]]> 1 2 3 4 5 6 7 The following is a math block: $$ 5 + 5 $$ But next comes a paragraph with an inline math statement: \\ $$ 5 + 5 $$ The following is a math block: 5 + 5 But next comes a paragraph with an inline math statement: 5 + 5 使用链接 使用链接 1 [ Jekyll ]( http: //www.jekyllrb.com) is a very popular and very powerful static blog generator. Out of the box it's able to generate sophisticated site structures, and has a ton of configurability. One of the areas where I feel that Jekyll lacks some sophistication is around the handling of categories and tags; these are two data-sets that are core to Jekyll, but there isn't a lot of functionality actually built around them. This is in contrast to dynamic blogging platforms like [WordPress](http://www.wordpress.com), or possibly [Drupal](http://www.drupal.org), where these two data points are used to drive a lot of central navigation for the site. Jekyll is a very popular and very powerful static blog generator. Out of the box it’s able to generate sophisticated site structures, and has a ton of configurability. One of the areas where I feel that Jekyll lacks some sophistication is around the handling of categories and tags; these are two data-sets that are core to Jekyll, but there isn’t a lot of functionality actually built around them. This is in contrast to dynamic blogging platforms like WordPress , or possibly Drupal , where these two data points are used to drive a lot of central navigation for the site. 使用图片 使用图片 1 { % img imgright http: //placekitten.com/320/250 Place Kitten #2 %} 使用图片 1 { % img imgcenter http: //placekitten.com/300/500 150 250 'Place Kitten #4' 'An image of a very cute kitten' %} 使用图片 1 { % img imgleft / img / portrait . jpg 379 481 ' My Cartoon Portrait ' % } 使用 pullquote 使用 pullquote 1 2 3 4 { % pullquote % } Surround your paragraph with the pull quote tags . Then when you come to the text you want to pull , { \" surround it like this \" } and that ' s all there is to it . { % endpullquote % } Surround your paragraph with the pull quote tags. Then when you come to the text you want to pull, surround it like this and that’s all there is to it. 使用表格 使用表格 1 2 3 4 5 6 7 8 9 < div markdown = '1' class = ' foo ' >|-----------------+------------+-----------------+----------------| | Default aligned | Left aligned | Center aligned | Right aligned | |-----------------|:-----------|:---------------:|---------------:| | First body part | Second cell | Third cell | fourth cell | | Second line | foo | ** strong ** | baz | | Third line | quux | baz | bar | |-----------------+------------+-----------------+----------------| </ div > Default aligned Left aligned Center aligned Right aligned First body part Second cell Third cell fourth cell Second line foo strong baz Third line quux baz bar 使用 Horizontal Rules 使用 Horizontal Rules 1 2 3 4 5 6 7 * * * --- _ _ _ _ --------------- 使用列表 方法一：使用数字 使用数字 1 2 3 4 5 1. Item one 1. sub item one 2. sub item two 3. sub item three 2. Item two Item one sub item one sub item two sub item three Item two 方法二：使用 * 使用 */+/- 1 2 3 * Item one + Item two - Item three Item one Item two Item three 使用定义列表 使用定义列表 1 2 3 4 5 6 7 term : definition : another definition another term and another term : and a definition for the term term definition another definition another term and another term and a definition for the term 为块级元素添加 attribute 添加一个属性 1 2 > A nice blockquote { : . class1 . class2 } A nice blockquote 添加多个属性 1 2 3 { : refdef: . c1 # id . c2 title = \"title\" } paragraph { : refdef . c3 title = \"t\" # para } paragraph 为 inline 元素添加 attribute 为内嵌元素添加 attribute 1 This is * red * { : style = \"color: red\" }. This is red . 使用扩展 使用扩展 1 2 3 4 5 6 7 8 9 This is a paragraph { :: comment } This is a comment which is completely ignored . { :/ comment } ... paragraph continues here . Extensions can also be used inline { :: nomarkdown } ** see ** { :/ } ! This is a paragraph … paragraph continues here. Extensions can also be used inline **see**! Notes comment Treat the body text as a comment which does not show in the output. nomarkdown Don’t process the body with kramdown but output it as-is. The attribute type specifies which converters should output the body: if the attribute is missing, all converters should output it. Otherwise the attribute value has to be a space separated list of converter names and these converters should output the body. options Should be used without a body since the body is ignored. Is used for setting the global options for the kramdown processor (for example, to disable automatic header ID generation). Note that options that are used by the parser are immediately effective whereas all other options are not! This means, for example, that it is not possible to set converter options only for some part of a kramdown document. 使用文字修饰 使用文字修饰 1 2 3 4 * Emphasized * _Emphasized_ ** Strong ** __Strong__ Emphasized Emphasized Strong Strong 使用 Typographic Symbols 使用 Typographic Symbols 1 2 3 4 5 --- will become an em - dash ( like this — ) -- will become an en - dash ( like this – ) ... will become an ellipsis ( like this … ) << will become a left guillemet ( like this « ) – an optional following space will become a non - breakable space >> will become a right guillemet ( like this » ) – an optional leading space will become a non - breakable space — will become an em-dash (like this —) – will become an en-dash (like this –) … will become an ellipsis (like this …) << will become a left guillemet (like this «) – an optional following space will become a non-breakable space >> will become a right guillemet (like this ») – an optional leading space will become a non-breakable space 原文地址: http://frank19900731.github.io/blog/2014/08/24/wo-de-di-yi-pian-octopress-bo-ke/ 作者 Frank Song   发布于 http://frank19900731.github.io   转载请注明 我的脚注 ↩ "},{"title":"2015年校招入口","url":"/blog/2014/09/01/2015nian-xiao-zhao-ru-kou/","date":"2014-09-01 23:49:27 +0800","categories":["面试求职"],"body":"Interest List Computer Related 百度 阿里巴巴 腾讯 360 小米 京东 网易有道 网易游戏 新浪微博 搜狐 大众点评 搜狗 美团 华为 微软 IBM IDG 亚马逊 爱奇艺 飞维美地 宜信 Finance Related 摩根士丹利全球量化部门 世坤 原文地址: http://frank19900731.github.io/blog/2014/09/01/2015nian-xiao-zhao-ru-kou/ 作者 Frank Song   发布于 http://frank19900731.github.io   转载请注明 "},{"title":"提高效率与情趣的九种程序工具推荐","url":"/blog/2014/10/16/ti-gao-xiao-lu-yu-qing-qu-de-jiu-chong-cheng-xu-gong-ju-tui-jian/","date":"2014-10-16 17:28:06 +0800","categories":["工作效率"],"body":"目录 选题目的 介绍角度 代码开发篇 引言 Git Shell Script 文档整理篇 引言 Markdown Octopress knitr 自我展示篇 tpp jmpress.js 数据展示篇 Shiny D3 其它工具 总结 自己平时爱鼓捣些工程上的小玩意儿，在一次实验室的Paper Reading上给大家分享了自己的一点体会，给大家推荐了几款能够提高工作效率与生活情趣的工具，整理于此。 想了解更多有趣的工具，请持续关注 工作效率 分类。 选题目的 把自己知道的，用过的，感觉有意思或有用的分享给大家，实现自己的知识梳理与输出 让大家在遇到类似应用场景的时候知道有某种工具是很适用的 督促大家掌握某种工具（比如 git，shell，markdown ），进而提升工作效率，也可以以工具为杠杆撬动更多的资源 介绍角度 类型 星级评定（1星-5星） 入门难度 实用性 装X效果 描述 适用场合 实例说明 参考资料 代码开发篇 引言 摘自 《程序员装逼指南》 千万不要说自己是做Java或者.Net的，一下子就屌丝了。 PHP也不行，Python稍微有点烂大街，但还是明显要强过前几个。 剩下的可以说自己是做Ruby的，但不要做Rails，说Sinatra。 Go、Erlang、Clojure、Scala能给80分，你要是说会个Lisp就是85分，Haskell直接捅到90分，但是千万注意，一定要说只是精通Haskell，没事喜欢研究Haskell，千万不要说干这个的。 最后再拽出来一个Prolog就成仙了。 如果怕被继续追问就说自己做C++的，就是放了个大烟雾弹，让对面也猜不透究竟有几斤几两。 C是什么？不知道。 以上顺序列举的编程语言（C、C++除外）学习难度增大，对逻辑思维能力要求提升，代码实现向人的思维靠拢。 TIOBE程序语言排行榜 1 ，2014年5月最新统计（括号内前一数值为排名，后一数值为占比）： Java（2，16.907%） .Net（C# 6，3.745%，VB.NET 11，1.264%，F# 13，1.030%） PHP（7，3.386%） Python（8，3.057%） Ruby（12，1.242%） Go（31，0.423%） Erlang（47，0.236%） Clojure（65, -） Scala（35，0.331） Lisp（16，0.967） Haskell（40，0.281%） Prolog（45，0.252%） C++ （4，5.986%） C （1，16.926%） 以上结果与《程序员装逼指南》中对编程语言的逼格划定大致接近。 至于C、C++，个人感觉，它们向来是程序员入门语言，使用的人也很多，但真正驾驭它们还是很难的。有兴趣请移步欣赏 猿泡沫 更多有关程序语言的种类与它们之间的程序关联请见 编程语言关系图 ，这是一件优美的数据可视化作品，托管于Github。 扯远了，举例说明与人类语言、思维相近的编程语言： Haskell Haskell号称“证明即程序，命题为类型”。 以下代码中， [a | a <- xs, a <= x] 是集合语言， smallerSorted ++ [x] ++ biggerSorted 蕴含了递归。 Haskell 快速排序 1 2 3 4 5 6 quicksort :: ( Ord a ) => [ a ] -> [ a ] quicksort [] = [] quicksort ( x : xs ) = let smallerSorted = quicksort [ a | a <- xs , a <= x ] biggerSorted = quicksort [ a | a <- xs , a > x ] in smallerSorted ++ [ x ] ++ biggerSorted Prolog 人工智能中的演绎推理，谓词逻辑。 Prolog 示例 1 2 3 4 human ( kate ). human ( bill ). likes ( kate , bill ). friend ( X , Y ):- likes ( X , Y ), likes ( Y , X ). 引言讲了这么多，意义何在？ 茶余饭后的谈资； 程序语言的设计也是一门很深的学问，流行的语言有自身的优势，小众的语言也有不俗的理念，多一些了解有助于我们认清程序语言——我们每天打交道的日常工具——的本质属性； 程序语言是开源世界的钥匙。 Git 类型 —— 版本控制 入门难度 —— ★✩✩✩✩ 实用性 —— ★★★★★ 装X效果 —— ★★✩✩✩ 描述 Git诞生的故事 集中式（SVN为代表） vs 分布式（Git为代表） SVN与Git的区别与优劣争论有很多，不予详述，但Github着实具有很强的吸引力 Github Education Private空间免费使用 教学使用 收发作业的平台 自动测试 申请方式 个人名义：需要学校邮箱，立即审核通过，5个private项目 组织名义：一周审批时间，可能不通过…… Github 提供免费空间建站，如本站 稳定性强，小网站不太担心流量冲击 在自己的linux系统上搭建git服务器（gitosis），并安装Gitweb提供外部访问 适合小团队内部使用，比如实验室，但要注意备份！ 项目访问权限可控，网页上项目可见性可控 适用场合 代码分享 合作开发 版本控制 冲突合并 新功能添加 Bug查找 详见参考资料中的实用教程。 实例说明 Github建站实例： 2048游戏 Gitweb实例： Spark 参考资料 Git实用教程 Git服务器配置 Shell Script 类型 —— 文本处理，系统设置 入门难度 —— ★★✩✩✩ 实用性 —— ★★★★★ 装X效果 —— ★★★★✩ 描述 Shell：操作系统中，提供访问内核所提供之服务的程序，比如终端（Terminal）。 Bourne Again Shell (bash) bash是GNU计划的一部分，用于基于GNU的系统如Linux。大多数的Linux都以bash作为缺省的shell。 Shell Scripts 书写与matlab脚本类似，使用变量、逻辑控制、linux命令等完成较为底层的操作 环境变量设置，如在hadoop设置中的运用 文本处理，如网站log分析、天猫大赛数据处理 复杂功能的集成与自动运行，如下文中tunet自动登录脚本 文本处理 awk/gawk sed 适用场合 文本数据（特别是有规范格式的）处理 重复性劳动 实例说明 tunet登录脚本（摘自网络），实测可用： tunet 登录脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 #!/bin/bash # your info's username uname = your account name # your info's password's md5sum pass = md5sum of your password #################################################### do_login () { login_data = 'username=' $uname '&password=' $pass '&drop=0&type=1&n=100' check_data = 'action=check_online' # check whether already online con = ` curl -d $check_data -s http://net.tsinghua.edu.cn/cgi-bin/do_login ` if [ -z $con ] ; then # start login res = ` curl -d $login_data -s http://net.tsinghua.edu.cn/cgi-bin/do_login ` #handle result pe = ` echo $res | grep error ` if [ -z $pe ] ; then echo \"Login Success!\" else echo $pe exit 0 fi # display flux infomation flux = ` echo $res | awk -F ',' '{print $3}' ` a = $(( $flux / 1000000000 )) b = $(( ( $flux % 1000000000 )/ 100000000 )) c = $(( ( $flux % 100000000 )/ 10000000 )) echo \"Used Flux: \" $a \".\" $b$c \"G.\" else echo \"Already Online!\" # display flux information and online time flux = ` echo $con | awk -F ',' '{print $3}' ` time = ` echo $con | awk -F ',' '{print $5}' ` a = $(( $flux / 1000000000 )) b = $(( ( $flux % 1000000000 )/ 100000000 )) c = $(( ( $flux % 100000000 )/ 10000000 )) h = $(( $time / 3600 )) m = $(($(( $time % 3600 )) / 60 )) s = $(($(( $time % 3600 )) % 60 )) echo \"Used Flux: \" $a \".\" $b$c \"G, Online Time: \" $h \":\" $m \":\" $s \".\" fi } do_logout () { # start logout res = ` curl -s http://net.tsinghua.edu.cn/cgi-bin/do_logout ` #handle result if [ \"$res\" == \"logout_ok\" ] ; then echo \"Logout Success!\" elif [ \"$res\" == \"not_online_error\" ] ; then echo \"You're not Online!\" else echo \"Operation Failed!\" fi } ################################################################################## if [ \"$1\" == \"login\" ] ; then do_login elif [ \"$1\" == \"logout\" ] ; then do_logout else echo \"Usage: \" $0 \" {login|logout}\" fi 参考资料 任意一本shell入门教程 文档整理篇 引言 摘自 《高级程序员装逼指南》 在CSDN/ITeye/cnblogs这种地方写技术博客确实比在人人上写技术博客好多了 但是你要知道，大牛们都是有自己的个人网站的 而且，一个共同点是，他们的网站都是自己写的html（没有css）并且界面十分难看 整个网站散发着一种“我这的文章都很牛所以界面什么的都不重要”的气质 例如这个 http://xahlee.org/index.html 当然，用优美的外在包裹充实的内在，总还是更加让人赏心悦目的。 这个引言的目的是…… 输出重要，积累重要，有个网站就更好了。 Markdown 类型 —— 微量级文本标记语言 入门难度 —— ★✩✩✩✩ 实用性 —— ★★★★★ 装X效果 —— ★★✩✩✩ 描述 Evernote？有道笔记？XX笔记？ 编辑复杂，小word 先天不足，不是给科研人员用的，而是给大众记录用的，文字、图片、音频 部分有偿使用，高级功能要收费 分享方式单一 文档编辑类软件的一种趋势让人 更专注于内容，而非格式 ，不必频繁在输入区和菜单工具栏之间切换 语法简洁，容易学习（5分钟足够） 导出格式丰富，latex，html，pdf，ebook，mobi…… 样式丰富，内容与样式独立 ，由css文件及与之类似文件定制样式，称为主题 扩展丰富 latex公式输入 插入代码块 highlight.js …… 较多在线编辑器可供使用，如 作业部落 ，Chrome插件 MaDe Github、StackOverflow、Google Code都支持 适用场合 快速写出有公式、有代码的笔记报告 能够以较多方式分享自己的报告，特别是放在自己的个人主页上 实例说明 本页面 参考资料 markdown语法说明 Octopress 类型 —— 博客 入门难度 —— ★★★✩✩ 实用性 —— ★★★✩✩ 装X效果 —— ★★★★✩ 描述 《[BetterExplained]为什么你应该（从现在开始就）写博客》 Wordpress？ 摘自 从wordpress到octopress 编辑环境复杂 臃肿，累赘功能多 定制性差 过度依赖数据库，数据安全性低 速度慢，优化门槛高 迁移成本高 所需知识 ruby基础知识 Git基本命令 Github用法 基于Jekyll 纯静态 ，响应快 版本化管理 ，Word及其他笔记软件无法提供 不依赖数据库 ，Disqus、多说 定制容易，开源支持多 支持Markdown 适用场合 文章内容以文字图片居多，不需要视频音频或者华丽的动画效果 实例说明 本博客 参考资料 Github搭建Octopress博客的方法 knitr 类型 —— 自动化报告 入门难度 —— ★★★✩✩ 实用性 —— ★★★★★ 装X效果 —— ★★✩✩✩ 描述 国人写的R包，出于对功能相近的 Sweave 的不满足 代码与文档混编，编译时执行代码输出结果（数据、图片） 数据可伪造，图形可拷贝，只有源代码是最可靠的 代码可以进行版本管理 文学化编程，Knuth 支持 latex，markdown 等多种文档类型 ggplot2 的诱惑力 入门缓慢，功能强大 适用场合 收取、检查作业 写一份图文码并茂的报告 实例说明 RPubs 参考资料 knitr官网 顺便说一句，这个官网就是用Octopress搭建的 自我展示篇 tpp 2 类型 —— 命令行展示 入门难度 —— ★✩✩✩✩ 实用性 —— ★★✩✩✩ 装X效果 —— ★★★★✩ 描述 基于ncurses（字符终端处理库），ruby-ncurses，figlet（字符图） 名称来源是PPT的逆向 语法极易（1分钟？） 支持中文 支持导出latex、txt格式 适用场合 纯linux命令行下文档记录、演示 实例说明 展示效果 in Chrome Extension - Secure Shell 参考资料 官网 实例代码 字符编码 bug fix jmpress.js 类型 —— 浏览器富动态效果展示 入门难度 —— ★★★★✩ 实用性 —— ★★★✩✩ 装X效果 —— ★★★★★ 描述 非线性展示 一个页面 区域间可跳跃 位移、缩放与旋转 揭示概念、事物间的复杂联系 动态思维导图 Prezi vs jmpress.js Adobe Flash & Flex vs HTML5 臃肿 vs 轻量级 扩展受限（中文、字体等） vs 开源支持（大量js功能支持） 所见即所得 vs 较复杂设计 impress.js 受Prezi启发，jmpress.js在其基础上进行了封装，成为jQuery插件 支持新版Chrome、Safari、Firefox，IE 10 poorly supported 所需知识 熟悉CSS3、Javascript 适用场合 有趣的故事、新颖的观点，不仅仅是为了追求酷炫的过渡效果（TED talk） 网站上的个性化介绍、流程展示 实例说明 Demo 巴西世界杯预测 参考资料 Github 项目托管地址 数据展示篇 Shiny 类型 —— 数据动态交互展示 入门难度 —— ★★★✩✩ 实用性 —— ★★★★✩ 装X效果 —— ★★★★✩ 描述 Data visualization or data visualisation is a modern branch of descriptive statistics. It involves the creation and study of the visual representation of data, meaning “information that has been abstracted in some schematic form, including attributes or variables for the units of information”. —— 摘自维基百科 数据可视化工具种类繁多，网搜都是“XX种数据可视化工具推荐” Online vs Desktop 代码开发 vs 图形界面操作 属于 RStudio 这一火热的开源项目 动态展示 ，以R的丰富资源为支撑 SVD实例 自动生成HTML、CSS、Javascript，只需编写R代码 申请项目空间 Shiny app 空间 R最大的优势是：它是由统计学家们开发的。R最大的劣势是……它是由统计学家门开发的。—— Bo Cowgill 速度慢 需要对R有了解 适用场合 简单的数据交互、模型演示 实例说明 Shiny 例程 参考资料 Shiny 官网 D3 类型 —— 数据静态展示 入门难度 —— ★★★★✩ 实用性 —— ★★★★✩ 装X效果 —— ★★★★★ 描述 D3（Data Driven Documents），支持SVG渲染，图表类型丰富 数据绑定网页元素 设置元素可视化属性 元素变换与动态过渡 所需知识 jQuery CSS SVG 数据可视化知识 浏览器兼容性好 有多款基于D3开发的适用于不同展示对象的工具 Planetary.js 地理信息 Ember Charts、 xCharts 图表库 Richshaw 绘制时序图 BSD许可，适用于商业或非商业目的 适用场合 * 展示已有数据规律，且数据可以共享 实例说明 官方示例 巴西世界杯预测 参考资料 D3 官网 Github托管地址 其它工具 ADOBE MUSE - 自我展示类工具 官方网站 教程丰富，讲解细致 无须编程，实现流行的网页效果 例如 Scroll Effects LATEX CV - 自我展示类工具 mordencv官网 mordencv代码 PROCESSING - 数据展示类工具 MIT Media laboratory 创制的编程绘图语言，连接艺术设计与计算机程序 Processing 官网 作品展示 基于Processing的jQuery插件： processing.js 总结 蜻蜓点水，抛砖引玉 经验之谈，一家之言 如能产生一点启发，激发一点兴趣，也不枉一番准备 原文地址: http://frank19900731.github.io/blog/2014/10/16/ti-gao-xiao-lu-yu-qing-qu-de-jiu-chong-cheng-xu-gong-ju-tui-jian/ 作者 Frank Song   发布于 http://frank19900731.github.io   转载请注明 一种语言的占比等于其在8大网站（Google 30%，Blogger 30%，Wikipedia 15%，YouTube 9%，Baidu 6%，Yahoo! 3%，Bing 3%，Amazon 3%）上被搜索出的结果总数，除以前50名语言的结果总数。 ↩ 展示结束后，又发现了一款名为 MDP 的命令行展示工具，大家可以试试，当然，以 Markdown 为书写语言的网页版展示工具就更多了，比如 WeakPoint 。 ↩ "},{"title":"【撰写中】我的知识管理经验与工具分享","url":"/blog/2014/10/16/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang/","date":"2014-10-16 18:21:07 +0800","categories":["工作效率"],"body":" 原文地址: http://frank19900731.github.io/blog/2014/10/16/wo-de-zhi-shi-guan-li-jing-yan-yu-gong-ju-fen-xiang/ 作者 Frank Song   发布于 http://frank19900731.github.io   转载请注明 "},{"title":"【撰写中】Octopress 改造记录","url":"/blog/2014/10/16/octopress-gai-zao-ji-lu/","date":"2014-10-16 20:45:34 +0800","categories":["网页开发"],"body":"原文地址: http://frank19900731.github.io/blog/2014/10/16/octopress-gai-zao-ji-lu/ 作者 Frank Song   发布于 http://frank19900731.github.io   转载请注明 "},{"title":"Yosemite 升级及后续","url":"/blog/2014/10/18/yosemite-sheng-ji-ji-hou-xu/","date":"2014-10-18 22:11:48 +0800","categories":["Mac 使用"],"body":"目录 Yosemite 安装 Homebrew & Java Homebrew Java 常用软件恢复 Chronories Trim Enabler Matlab VMWare TextExpander Totalfinder Bartender OS X Server MySQL 总结 Yosemite 安装 10月17日一早醒来就迫不及待的找更新，发现六维空间有人上传了一个5.19G大小的安装文件，就开始下载。当下载进度到了99%的时候卡死了，暂停重启或者删除文件重来都不管用。正当饥渴难耐，在北邮人上发现了一个4G多的安装文件，也顾不得大小的差异（想想真是胆大呀，后来知道是后者经过了压缩），顺利下载下来。 由于更新心切，所以没有按照规范先进行 Time Machine 的备份，直接双击、接受条款并重启。因为暑假里刚刚换成 1T 的SSD，所以对于更新安装时间自己还是很乐观的，但很不幸的是自己 玩儿屁玩儿出屎了 。 About one minute remaing 就这么一句话我足足看了两个小时，越看心越慌。给苹果客服打了若干次电话，比如问一下一般更新时间要多长，如果卡死可不可以中途强按电源键重启，能否通过外接硬盘安装更新等……得到的回答大概是“应该可以”、“没有资料表明可以这么做”。这样的“建议”对于眼前这台进不能10.10、退不能10.9.5的电脑来说，都太苍白了……如果真的如客服所说只能重装系统的话，就得损失最近两天的（自己的习惯是一周一备份）笔记和代码了，心有不甘啊！ 网上查询的结果是，苹果重新定义了最后一分钟，那咱就等吧。电脑撂在寝室，去参加 飞维美地的笔试 。笔试结束后打开手机看到一个弹出对话框显示“您的Apple ID在另一台Mac设备上登录……”，百感交集，这就算是成了。 强烈建议在升级系统之前做Time Machine的备份，比如16日晚上保持开机做备份，第二天直接更新，别老整那些悬不楞登的。 Homebrew & Java 之前看到有人吐槽过 ruby 版本升级和 java 被阉割，所以还算有准备。按照收藏的 这篇文章 里的方法操作。 Homebrew 因为 ruby 版本变了， cd `brew --prefix` 和 brew prune 都会报 bad interpreter 错误，所以我对文中的脚本运行顺序进行了微调。 更新 Homebrew 1 2 3 4 5 6 7 8 9 10 11 12 cd /usr/local/ mv Cellar Cellar_back rm -r ` git ls-files ` rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributions rm -rf .git rm -rf ~/Library/Caches/Homebrew ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" brew prune brew update mv Cellar_back Cellar brew update brew upgrade 这当中注意观察输出，及时处理 brew link XXX 和文件夹权限等问题。upgrade 的过程中，会自动下载与 Yosemite （写在URL里头呢）匹配的包编译安装。耐心等待一段时间，Homebrew 就又满血复活了。 Java 按照文中介绍的方法，到苹果官网下载 Java 6 安装包 ，如果想要 Java 7 及以上，到 Oracle 官网 ，但 Java 6 只能用苹果官网上的。 建议还是装个 Java 6，安装位置和此前 OS X 版本相同（/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home），像 JAVA_HOME 这种环境变量就正好不用改了。而且对于之后要安装的 Matlab 也够用了。 常用软件恢复 软件的重要程度还是有区分的，像有道词典打不开就打不开吧，可以上网查单词，但有一些软件可是命根子，用不了就抓心挠肺的，大致总结如下。 Chronories 日记软件，应该已经停止维护，不指望出 Yosemite 适配版本了。软件本身还是可以用的，只是菜单栏的按钮有点问题。10.10 的菜单按钮默认点击时变蓝/灰（System Preferences -> General -> Appearance），取消点击变回正常透明色。Chronories 的问题在于 点击变色，取消点击变不回去； 心情选项图片无法显示。 然而由于软件自身功能过于强大，可以记录很多小秘密，还是舍不得抛弃，那么取消菜单栏显示就能解决么？非也。 只有当菜单栏图标出现的时候，软件才会在后台工作（ChronoriesAgent），自动搜集邮件、RSS、软件使用率等信息做统计（舍不得的重要原因），那唯一可行的方法就是：保持菜单栏按钮的存在，但死也不点（始终是透明色，颜色一致强迫症），想写日志直接打开软件。 Trim Enabler 每次更新系统默认 Trim 支持都会关闭，手动打开并重启机器即可。 Matlab 北邮人有 Matlab UNIX/MACOS 2014a 下载。 VMWare 5.x 版本已被拒绝运行了，还是到北邮人下载 7.x 版本，有码才幸福。 TextExpander 包括本软件在内的一些软件（比如 FocusMask ）需要重新开启 Accessibility 权限。 Totalfinder Yosemite 修改了 Codesign 机制，导致大批算号器、注册机无法启动。如果只是算号倒还好，再准备一台机器（或者虚拟机）就行，就怕让你指定软件位置或者模块位置来打 Patch。部分解决方案是用网上提供的 10.9.4 或 10.9.5 中的 codesign 替换 /usr/bin/codesign 。 Bartender 更换 codesign 神马的在这里不好用了。尝试从命令行启动，得到的错误是 exited; Killed: 9 ，到处查得不到解释。最后，花了一百软妹币的学费终于搞明白了，启动方法见下图，CMD + I。 感叹一句，经验就是财富啊！ 此外，使用时会发现菜单栏按钮错乱的问题，可以使用 CMD + 拖拽的方式移动。 OS X Server 4.0 正式版无法启动，报错与 Bartender 中说的相同，改用早一些的 4.0 DP 版本就可以了，功能正常。好歹先把我的 mediawiki 给救活，以后伺机升级吧。 MySQL MySQL 无法开机启动，尽管在 System Preference 中可以勾选。在网上看到如果是在 Yosemite 上新装 MySQL，如果勾选安装 Startup 组件，会导致安装失败。解决方法传送门 在此 。 总结 无论做任何改动，数据安全最重要； 欲速则不达，不要着急咬第一口，兴许咬到的是包装盒呢，看清情况、做好计划再行动。 原文地址: http://frank19900731.github.io/blog/2014/10/18/yosemite-sheng-ji-ji-hou-xu/ 作者 Frank Song   发布于 http://frank19900731.github.io   转载请注明 "},{"title":"飞维美地笔试回忆","url":"/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/","date":"2014-10-18 22:29:30 +0800","categories":["面试求职"],"body":"目录 简介 题目 Linux题 SQL 逻辑题 读程序题 写程序题 网络题 算法题 广告算法 吞吐量预测 总结 这是面试、笔试总结的第一篇，其余会陆续更新直至十一月末，欢迎持续关注 面试求职 分类。 简介 飞维美地 这家公司是校招季才了解的一家公司，隶属 Comcast， 提供互联网视频广告投放、监测、预测、增值等关键解决方案，业务在欧美。公司主体在中国，纽约也有分部，恰可以提供 24 小时不间断服务。据称北京公司有120人，目标扩增至240人。 之前和靳导在东主楼参加了他们的算法分享会，干货多，实在。宣讲会上，进一步了解了公司的培训发展体系，感觉像一个小型大学，学习与成长的氛围都不错的样子，比较适合想在毕业后打好技术基础的同学，当然也能锻炼英语。不过作为在中国没有业务的小型外企，估计是没有北京户口吧。 书归正传，说题。据说这些题是公司员工近一个月想出来的，挺用心思的。共九类题，120分钟时间，可以全做，也可以挑选自己擅长的发挥。 题目 Linux题 如何查看已使用的内存和剩余内存？ 如何查看所有进程，如何按照内存占比排序？ 给出 ls -l 的结果，写出文件类型和权限代码。 子网 IP 为 192.168.10.0，子网掩码为 255.255.255.192，问子网格数和每个子网主机 IP 数？ 解释 DNS 的作用，举例说明 CNAME 的应用场景。 SQL 具体题目不描述了，反正是可以用 left + join 和 嵌套查询解决的问题。 逻辑题 给定一种运算 NOTAND 及其真值表，让你仅用 NOTAND 表示 OR（真值表给出）; 命题（真值表给出）。 读程序题 GO 语言书写的二分查找，如果找到返回 Index，未找到返回 -1；现让你修改一行，使得如果找到返回 Index，未找到则返回小于待查找数的最大的数的 Index，如果还是没有，返回 -1。 写程序题 给出一些函数及解释（pthread_mutex_lock， pthread_mutex_unlock， pthread_cond_wait， pthread_cond_signal， pthread_cond_broadcast），让你实现一个线程安全队列类中的 6 个函数（构造函数、析构函数、enqueue、dequeue、size、destroy，这里 destroy 的作用是清空队列 + 清空插入等待和读取等待）。 网络题 页面由 A 重定向到 B，站点接受要访问 A 的请求，返回的代码是 302 还是 301，HEAD 头里 B 对应的属性是 Location 还是 Referral。 跨站脚本攻击相关 忘了…… 算法题 如果可以在多项式时间内解决判断正整数集合内是否存在和相等的两个子集（互为补集）的问题并给出一组解，请问如何设计高效算法解决判断正整数集合内是否存在一个子集的和等于指定值这一问题并给出一组解？ 广告算法 已有按照优先级排列的广告，要处理广告请求。一个广告请求包含若干个指定时长的广告中断，约束条件有 有些广告对儿不能出现在同一个广告请求中； 有些广告对儿不能出现在同一个广告中断中； 广告中断中的广告时间总和不超过广告中断时长； 请设计Advertisement、Request、Break类，实现这一算法。 吞吐量预测 给出网络带宽，读写速度，文件大小，压缩比，单条记录的长度，单服务器处理速度等数据，以及日志的处理方法， 要求估算单台机器处理500G 日志需要多长时间。 现在想要实时处理日志，5分钟处理之前15分钟的，估计需要多少台机器。 这道题大致是这个意思吧，当时都给我整晕了，大概算了算，肯定不完善。 总结 题型比较广泛，不太需要 ACM 等相关技能，主要看分析思考的能力。当然，对于一些固定知识点的考察（比如网络相关的），也着实让我觉得有必要在考后夯实一下基础。 基础还是记在脑子里比较好，不要太依赖搜索引擎。 原文地址: http://frank19900731.github.io/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/ 作者 Frank Song   发布于 http://frank19900731.github.io   转载请注明 "}]}