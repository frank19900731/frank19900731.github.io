{"entries":[{"title":"我的第一篇 Octopress 博客","url":"/blog/2014/08/24/wo-de-di-yi-pian-octopress-bo-ke/","date":"2014-08-24 21:50:56 +0800","categories":["网页开发"],"body":"代码展示 Obj-C 用例 Github 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #import \"Animal.h\" @implementation Animal @synthesize name , birthday ; - ( Animal * ) initWithParams: ( NSString * ) n birthday: ( NSDate * ) b { [ self setName: n ]; [ self setBirthday: b ]; return self ; } + ( void ) description { NSLog ( @\"I'm a cute animal.\" ); } - ( void ) eat { NSLog ( @\"%@ : eat delicious food\" , self . name ); } - ( void ) sleep { NSLog ( @\"%@ : sleep for a while\" , self . name ); } @end [支持的语言]http://pygments.org/docs/lexers/ 1 Test.js for download (test.js) download 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /** sample javascript from xui */ var undefined , xui , window = this , string = new String ( 'string' ), document = window . document , simpleExpr = /^#?([\\w-]+)$/ , idExpr = /^#/ , tagExpr = /<([\\w:]+)/ , slice = function ( e ) { return []. slice . call ( e , 0 ); }; try { var a = slice ( document . documentElement . childNodes )[ 0 ]. nodeType ; } catch ( e ){ slice = function ( e ) { var ret = []; for ( var i = 0 ; e [ i ]; i ++ ) ret . push ( e [ i ]); return ret ; }; } window . x$ = window . xui = xui = function ( q , context ) { return new xui . fn . find ( q , context ); }; @@ -590,7 +590,7 @@ class SpritesTest < Test::Unit::TestCase it \"should generate a sprite from nested folders\" do css = render <<-SCSS - @import \"nested/*.png\"; + @import \"nested/**/*.png\"; @include all-nested-sprites; SCSS assert_correct css, <<-CSS require 'sass' module Sass::Script::Functions def svg_circle(radius, color, circle_type) img = if circle_type.value == \"disc\" %Q{<circle cx=\"#{radius.value}\" cy=\"#{radius.value}\" r=\"#{radius.value}\" stroke-width=\"0\" fill=\"#{color}\"/>} else %Q{<circle cx=\"#{radius.value}\" cy=\"#{radius.value}\" r=\"#{radius.value}\" stroke=\"#{color}\" stroke-width=\"1\" fill=\"white\"/>} end inline_image_string(svg_circle_envelope(img).gsub(/ +/, ' '), 'image/svg+xml') end private def svg_circle_envelope(content) %Q{<?xml version=\"1.0\" encoding=\"utf-8\"?> <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">#{content}</svg>} end end // Draw a list style image in svg using the radius and color specified. @mixin colored-bullet($radius, $color, $type: disc) { list-style-type: $type; list-style-image: svg-circle($radius, $color, $type); } ul { @include colored-bullet(2px, $green, disc); ul { @include colored-bullet(2px, $green, circle); } } Coffeescript Tricks 1 2 3 4 5 # Given an alphabet: alphabet = 'abcdefghijklmnopqrstuvwxyz' # Iterate over part of the alphabet: console.log letter for letter in alphabet[4..8] 1 2 3 Wheeee! Bobby Willis The Search for Bobby’s Pants main = putStrLn \"Hello world\" -- kramdown's tilde fencing 代码展示 1 2 3 random variables X_1, X_2, X_3 from % <![CDATA[ \\begin{align} \\mbox{Union: } & A\\cup B = \\{x\\mid x\\in A \\mbox{ or } x\\in B\\} \\\\ \\mbox{Concatenation: } & A\\circ B = \\{xy\\mid x\\in A \\mbox{ and } y\\in B\\} \\\\ \\mbox{Star: } & A^\\star = \\{x_1x_2\\ldots x_k \\mid k\\geq 0 \\mbox{ and each } x_i\\in A\\} \\\\ \\end{align} %]]> Jekyll is a very popular and very powerful static blog generator. Out of the box it’s able to generate sophisticated site structures, and has a ton of configurability. One of the areas where I feel that Jekyll lacks some sophistication is around the handling of categories and tags; these are two data-sets that are core to Jekyll, but there isn’t a lot of functionality actually built around them. This is in contrast to dynamic blogging platforms like WordPress , or possibly Drupal , where these two data points are used to drive a lot of central navigation for the site. To be fair, Jekyll is really intended to be a framework for expansion into larger degrees of customization and sophistication, and thankfully it has a very powerful plugin model. Higher-level frameworks like Octopress and Jekyll Bootstrap have shown what you can do with a little extra tweaking - as have the long list of Jekyll plugins . When I set out to move my site over to Jekyll, one of my key goals was to still support all of the key navigation my site was capable of with my custom platform code, and Wordpress before it. That pretty much amounts to: A date descending paging root for all blog entries ( /index.html ). A matching Atom feed for the root index. Static pages like About and Contact . Individual blog pages (I suppose this one is obvious). Date desceding paging indexes for all categories and tags I use (for example: /category/article/ and /tag/jruby/ ). Matching atom feeds for each of the paging indexes above (for example: /category/article/atom.xml and /tag/jruby/atom.xml ). Surround your paragraph with the pull quote tags. Then when you come to the text you want to pull, surround it like this and that’s all there is to it. Default aligned Left aligned Center aligned Right aligned First body part Second cell Third cell fourth cell Second line foo strong baz Third line quux baz bar 脚注 ↩ "},{"title":"2014年8月份第4周总结","url":"/blog/2014/08/31/2014nian-8yue-fen-di-4zhou-zong-jie/","date":"2014-08-31 10:35:49 +0800","categories":["个人总结"],"body":"代码展示 Obj-C 用例 Github 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #import \"Animal.h\" @implementation Animal @synthesize name , birthday ; - ( Animal * ) initWithParams: ( NSString * ) n birthday: ( NSDate * ) b { [ self setName: n ]; [ self setBirthday: b ]; return self ; } + ( void ) description { NSLog ( @\"I'm a cute animal.\" ); } - ( void ) eat { NSLog ( @\"%@ : eat delicious food\" , self . name ); } - ( void ) sleep { NSLog ( @\"%@ : sleep for a while\" , self . name ); } @end [支持的语言]http://pygments.org/docs/lexers/ 1 Test.js for download (test.js) download 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /** sample javascript from xui */ var undefined , xui , window = this , string = new String ( 'string' ), document = window . document , simpleExpr = /^#?([\\w-]+)$/ , idExpr = /^#/ , tagExpr = /<([\\w:]+)/ , slice = function ( e ) { return []. slice . call ( e , 0 ); }; try { var a = slice ( document . documentElement . childNodes )[ 0 ]. nodeType ; } catch ( e ){ slice = function ( e ) { var ret = []; for ( var i = 0 ; e [ i ]; i ++ ) ret . push ( e [ i ]); return ret ; }; } window . x$ = window . xui = xui = function ( q , context ) { return new xui . fn . find ( q , context ); }; @@ -590,7 +590,7 @@ class SpritesTest < Test::Unit::TestCase it \"should generate a sprite from nested folders\" do css = render <<-SCSS - @import \"nested/*.png\"; + @import \"nested/**/*.png\"; @include all-nested-sprites; SCSS assert_correct css, <<-CSS require 'sass' module Sass::Script::Functions def svg_circle(radius, color, circle_type) img = if circle_type.value == \"disc\" %Q{<circle cx=\"#{radius.value}\" cy=\"#{radius.value}\" r=\"#{radius.value}\" stroke-width=\"0\" fill=\"#{color}\"/>} else %Q{<circle cx=\"#{radius.value}\" cy=\"#{radius.value}\" r=\"#{radius.value}\" stroke=\"#{color}\" stroke-width=\"1\" fill=\"white\"/>} end inline_image_string(svg_circle_envelope(img).gsub(/ +/, ' '), 'image/svg+xml') end private def svg_circle_envelope(content) %Q{<?xml version=\"1.0\" encoding=\"utf-8\"?> <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">#{content}</svg>} end end // Draw a list style image in svg using the radius and color specified. @mixin colored-bullet($radius, $color, $type: disc) { list-style-type: $type; list-style-image: svg-circle($radius, $color, $type); } ul { @include colored-bullet(2px, $green, disc); ul { @include colored-bullet(2px, $green, circle); } } Coffeescript Tricks 1 2 3 4 5 # Given an alphabet: alphabet = 'abcdefghijklmnopqrstuvwxyz' # Iterate over part of the alphabet: console.log letter for letter in alphabet[4..8] 1 2 3 Wheeee! Bobby Willis The Search for Bobby’s Pants main = putStrLn \"Hello world\" -- kramdown's tilde fencing 代码展示 1 2 3 random variables X_1, X_2, X_3 from % <![CDATA[ \\begin{align} \\mbox{Union: } & A\\cup B = \\{x\\mid x\\in A \\mbox{ or } x\\in B\\} \\\\ \\mbox{Concatenation: } & A\\circ B = \\{xy\\mid x\\in A \\mbox{ and } y\\in B\\} \\\\ \\mbox{Star: } & A^\\star = \\{x_1x_2\\ldots x_k \\mid k\\geq 0 \\mbox{ and each } x_i\\in A\\} \\\\ \\end{align} %]]> Jekyll is a very popular and very powerful static blog generator. Out of the box it’s able to generate sophisticated site structures, and has a ton of configurability. One of the areas where I feel that Jekyll lacks some sophistication is around the handling of categories and tags; these are two data-sets that are core to Jekyll, but there isn’t a lot of functionality actually built around them. This is in contrast to dynamic blogging platforms like WordPress , or possibly Drupal , where these two data points are used to drive a lot of central navigation for the site. To be fair, Jekyll is really intended to be a framework for expansion into larger degrees of customization and sophistication, and thankfully it has a very powerful plugin model. Higher-level frameworks like Octopress and Jekyll Bootstrap have shown what you can do with a little extra tweaking - as have the long list of Jekyll plugins . When I set out to move my site over to Jekyll, one of my key goals was to still support all of the key navigation my site was capable of with my custom platform code, and Wordpress before it. That pretty much amounts to: A date descending paging root for all blog entries ( /index.html ). A matching Atom feed for the root index. Static pages like About and Contact . Individual blog pages (I suppose this one is obvious). Date desceding paging indexes for all categories and tags I use (for example: /category/article/ and /tag/jruby/ ). Matching atom feeds for each of the paging indexes above (for example: /category/article/atom.xml and /tag/jruby/atom.xml ). Surround your paragraph with the pull quote tags. Then when you come to the text you want to pull, surround it like this and that’s all there is to it. Default aligned Left aligned Center aligned Right aligned First body part Second cell Third cell fourth cell Second line foo strong baz Third line quux baz bar 脚注 ↩ "}]}