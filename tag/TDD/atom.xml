
<item>
    <title>《测试驱动开发和函数式编程》在线演示</title>
    <link>http://realjenius.com/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi/</link>
    <author>R.J. Lorimer</author>
    <pubDate>2014-11-27T16:08:27+08:00</pubDate>
    <guid>http://realjenius.com/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi/</guid>
    <description><![CDATA[
     <!-- excerpt start -->

<p>在 Scala 微信群里了解到了 <a href="http://together.iagile.me/activities/28">《万花筒活动: 测试驱动开发和函数式编程 —— 在线代码演示如何对函数式语言 (Scala) 进行测试驱动开发》</a> 这么一个活动，以在线视频会议的形式举行。跟着讲解抄代码，对 <a href="http://baike.baidu.com/subview/76310/8243857.htm#viewPageContent">TDD</a>（Test-Driven Development）有了点粗浅的了解。</p>

<p>讲解围绕一道叫 <a href="http://codingdojo.org/">KataAnagram</a> 的题目展开，用《哈利·波特》里面的例子很好解释。</p>

<blockquote>
  <p>Tom Marvolo Riddle =&gt; I am Lord Voldemort</p>
</blockquote>

<p>上面是一个字母重排的过程。给定一个单词 S 和一个单词列表 L，要求从 L 中找到两个词（可以重复），用这两个词的全体字母重排出 S。</p>

<p>讲者主要是用这道题讲解测试驱动开发的思路流程，顺便讲解一下如何在代码重构时从 Java 转换到函数式编程的思维，而不是从算法角度考虑最优。</p>

<p>讲者开始提到测试驱动开发的大致思路是</p>

<ol>
  <li>写一个失败的测试；</li>
  <li>写最简单的代码使得测试通过；</li>
  <li>重构代码和测试。</li>
</ol>

<p>2、3 步骤应该是迭代进行的。从以下测试代码的撰写思路上，可以看到想法的逐层深入。</p>

<!-- excerpt end -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">import</span> <span class="nn">org.junit.Assert.assertEquals</span>
</span><span class="line"><span class="k">import</span> <span class="nn">org.junit.Test</span>
</span><span class="line"><span class="k">import</span> <span class="nn">org.scalatest.junit.JUnitSuite</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestAnagram</span> <span class="k">extends</span> <span class="nc">JUnitSuite</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="n">assertAnagramEqual</span><span class="o">(</span><span class="n">expectedAnagram</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="n">input</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">wordList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">		<span class="k">val</span> <span class="n">generator</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Anagram</span><span class="o">(</span><span class="n">wordList</span><span class="o">)</span>
</span><span class="line">		<span class="n">assertEquals</span><span class="o">(</span><span class="n">expectedAnagram</span><span class="o">,</span> <span class="n">generator</span><span class="o">.</span><span class="n">generate</span><span class="o">(</span><span class="n">input</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>	
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理空单词列表输入</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">empty_word_list_and_input_is_any_word</span> <span class="o">{</span>
</span><span class="line">		<span class="k">val</span> <span class="n">generator</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Anagram</span><span class="o">(</span><span class="nc">List</span><span class="o">())</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(),</span> <span class="s">&quot;anyWord&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">())</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理只含一个元素的单词列表，double 出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">one_character_word_list_and_input_is_double_of_this_word</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a a&quot;</span><span class="o">),</span> <span class="s">&quot;aa&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理只含一个元素的单词列表，不存在符合条件的两单词</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">one_word_list_and_input_has_no_anagram</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(),</span> <span class="s">&quot;bb&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理只含一个元素的单词列表，double 时有字母序的变化</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">one_word_list_and_input_has_anagram_with_different_character_order</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;an an&quot;</span><span class="o">),</span> <span class="s">&quot;anna&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;an&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理含有两个元素的单词列表，最后一个单词 double 出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">two_word_list_and_input_has_anagram_of_second_word</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a a&quot;</span><span class="o">),</span> <span class="s">&quot;aa&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理含有三个元素的单词列表，最后一个单词 double 出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">three_word_list_and_input_has_anagram_of_third_word</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a a&quot;</span><span class="o">),</span> <span class="s">&quot;aa&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理含有多个元素的单词列表，其中某个单词 double 出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">more_than_one_word_list_and_input_has_anagram_of_single_word</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;b b&quot;</span><span class="o">),</span> <span class="s">&quot;bb&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;d&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理含有多个元素的单词列表，其中两个单词重排出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">two_word_list_and_input_has_anagram_of_both_word</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a b&quot;</span><span class="o">),</span> <span class="s">&quot;ab&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">))</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a b&quot;</span><span class="o">),</span> <span class="s">&quot;ab&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 处理含有多个元素的单词列表，其中多对单词重排出单词 S</span>
</span><span class="line">	<span class="nd">@Test</span> <span class="k">def</span> <span class="n">input_has_two_anagrams</span> <span class="o">{</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;a bc&quot;</span><span class="o">,</span> <span class="s">&quot;ab c&quot;</span><span class="o">),</span> <span class="s">&quot;abc&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;bc&quot;</span><span class="o">,</span> <span class="s">&quot;ab&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">))</span>
</span><span class="line">		<span class="n">assertAnagramEqual</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;ab ab&quot;</span><span class="o">,</span> <span class="s">&quot;ba ba&quot;</span><span class="o">,</span> <span class="s">&quot;ab ba&quot;</span><span class="o">,</span> <span class="s">&quot;abb a&quot;</span><span class="o">),</span> <span class="s">&quot;abba&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;ab&quot;</span><span class="o">,</span> <span class="s">&quot;ba&quot;</span><span class="o">,</span> <span class="s">&quot;abb&quot;</span><span class="o">,</span> <span class="s">&quot;d&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在功能代码的实现方面，经过了多次函数化重构，最后一种比较简单的方式如下。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>功能代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">class</span> <span class="nc">Anagram</span><span class="o">(</span><span class="n">wordList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="n">generate</span><span class="o">(</span><span class="n">input</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>			
</span><span class="line">			
</span><span class="line">		<span class="k">def</span> <span class="n">isAnagram</span><span class="o">(</span><span class="n">candidates</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="o">(</span><span class="n">candidates</span><span class="o">.</span><span class="n">mkString</span><span class="o">).</span><span class="n">sorted</span> <span class="o">==</span> <span class="n">input</span><span class="o">.</span><span class="n">sorted</span>
</span><span class="line">		
</span><span class="line">		<span class="k">def</span> <span class="n">output</span><span class="o">(</span><span class="n">anagrams</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="n">anagrams</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">		<span class="k">def</span> <span class="n">candidates</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">wordList</span><span class="o">,</span> <span class="n">wordList</span><span class="o">).</span><span class="n">transpose</span> <span class="o">++</span> <span class="n">wordList</span><span class="o">.</span><span class="n">combinations</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class="line">		
</span><span class="line">		<span class="k">return</span> <span class="n">candidates</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">isAnagram</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="n">output</span><span class="o">)</span>
</span><span class="line">		
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>历次重构的过程写起来就比较啰嗦了，不在这里列出。不过从测试代码一点点完善的过程里，能够看出一个大致的思路。</p>

<p>对于一个小问题，如果技艺熟练，完全有可能直接写出功能代码的最简形式，不过对于一个较大规模的项目来说，这种做法确实有优势，学习了。</p>

<p>最后附上老师课后分享的资料。</p>

<ul>
  <li><a href="https://github.com/JosephYao/Kata-Anagram/tree/iteration_19/src">代码</a> </li>
  <li><a href="http://www.tudou.com/programs/view/NUPTlyGkVcU/">视频</a></li>
  <li><a href="https://www.evernote.com/shard/s188/sh/55ba699d-05f7-4baa-9032-1692fff28cad/c08df590e81753fef302b5773b3b7d8e">Kata 接力</a></li>
</ul>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi/">http://frank19900731.github.io/blog/2014/11/27/ce-shi-qu-dong-kai-fa-he-han-shu-shi-bian-cheng-zai-xian-yan-shi/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>

  ]]></description>
</item>
