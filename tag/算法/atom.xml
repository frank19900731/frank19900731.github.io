
<item>
    <title>面试经验分享之数据结构、算法题</title>
    <link>http://realjenius.com/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/</link>
    <author>R.J. Lorimer</author>
    <pubDate>2014-11-18T10:18:41+08:00</pubDate>
    <guid>http://realjenius.com/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/</guid>
    <description><![CDATA[
     <ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">数据结构题目</a>    <ul>
      <li><a href="#section-2">概述</a></li>
      <li><a href="#section-3">分类讨论</a>        <ul>
          <li><a href="#section-4">类型一：数据结构实现</a></li>
          <li><a href="#section-5">类型二：数据结构应用</a></li>
        </ul>
      </li>
      <li><a href="#section-6">准备建议</a></li>
    </ul>
  </li>
  <li><a href="#section-7">算法题目</a>    <ul>
      <li><a href="#section-8">概述</a></li>
      <li><a href="#section-9">分类讨论</a>        <ul>
          <li><a href="#section-10">类型一：经典算法实现题</a></li>
          <li><a href="#section-11">类型二：思维益智题</a></li>
        </ul>
      </li>
      <li><a href="#section-12">准备建议</a></li>
    </ul>
  </li>
  <li><a href="#section-13">开放题目</a></li>
  <li><a href="#section-14">总结</a></li>
</ul>

<h2 id="section">前言</h2>

<!-- excerpt start -->

<p>面试 IT 企业的研发岗位，数据结构和算法显然是必考的项目。俺只学过普通的数据结构课程，没读过 STL，也没有过 ACM 的训练和比赛经历，在一开始面对这样类型题目的时候，心里还是十分忐忑的。大大小小几十场面试下来，自己在这方面总算有了一定的心得积累，在此抛砖引玉，以飨读者。</p>

<p>在正式介绍题目和准备方法之前，有两点需要说明，</p>

<ul>
  <li>Google 和 Facebook 这类对算法有很高要求的公司的在线测试我没有参加过（不过在牛人内推帮助下有过面试体验……），这超出了我目前的编码能力范围，网上有不少拿到 Google、Facebook offer 的经验总结文章，可以移步观赏；</li>
  <li>前段时间在微博上又看到有人说自己把 leetcode 刷了好几遍，不过一些转发评论者觉得， IT 公司面试中的算法考察没有价值，一来工作里用不太上，二来把程序员素质考察搞成了应试教育，他们认为更重要的是应聘者的工程能力。遇到这样的讨论，我一般喜欢和一把稀泥。若干年前， Google、微软的面试题让大家眼前一亮，觉得能选拔出个性十足的聪明人来，不过随着大家对这类题目的适应，可能选拔出来的人也在趋同，至少很多人都会在面试前用心准备，<a href="http://www.oschina.net/news/41616/in-head-hunting-big-data-may-not-be-such-a-big-deal">据报道 Google 最近也是放弃了这类面试题目</a>。没有什么一劳永逸、一成不变的考查方式，毕竟面试是人和人之间的动态“较量”。不要贪恋算法的奇技淫巧，也不要因为题目筛选力度的衰减而否定考察初衷。面试不仅是考验求职者，也同样在考验面试官，<strong>如果问的都是老题儿，那本山大叔肯定都会抢答了</strong>。</li>
</ul>

<p>言归正传，以下分数据结构题目、算法题目、开放题目三部分来介绍我在面试中碰到的问题。</p>

<!-- excerpt end -->

<h2 id="section-1">数据结构题目</h2>

<h3 id="section-2">概述</h3>

<p>虽然课本由简到繁、由难到易地介绍了诸多数据结构，<strong>我在面试中被问到的却还都是基本类型</strong>，比如堆栈、队列、链表、二叉树。题目主要有两类，数据结构实现和具体情境下数据结构的应用。</p>

<h3 id="section-3">分类讨论</h3>

<h4 id="section-4">类型一：数据结构实现</h4>

<ol>
  <li>实现 java.util.List 中的基础功能；</li>
  <li>实现栈，使得 添加、删除、max 操作的复杂度为 O(1)（我脚着好像是不可实现的，想到最好的是添加、删除 O(log)， max 是 O(1)）；</li>
  <li>选取任意数据结构实现添加、删除、随机返回三个功能，分析复杂度；</li>
  <li>用数组实现队列，各操作的复杂度分析。</li>
</ol>

<h4 id="section-5">类型二：数据结构应用</h4>

<ol>
  <li>两棵树相加——对应位置两棵树都有值则相加，对应位置只有一棵树有值则取该值；</li>
  <li>用速度不同的指针可以判断链表中是否有环，问两速度满足怎样的关系可以保证发现环；</li>
  <li>如何在语料中寻找频繁出现的字串，分析复杂度（tire树）；</li>
  <li>中缀表达式转逆波兰表达式，逆波兰表达式求值；</li>
  <li>数据解压缩，3(a4(ab))    -&gt;    aababababaababababaabababab；</li>
  <li><a href="http://www.xuebuyuan.com/600249.html">二叉树的文件存储</a>。</li>
</ol>

<h3 id="section-6">准备建议</h3>

<p>上上之选当然是看《算法导论》，<a href="http://vdisk.weibo.com/s/G0pA_">书</a> 和 <a href="http://v.163.com/special/opencourse/algorithms.html">公开课</a> 都算。时间精力不足又想临时抱佛脚，清华大学计算机系邓俊辉老师的 <a href="http://www.amazon.cn/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E5%88%97%E6%95%99%E6%9D%90-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%82%93%E4%BF%8A%E8%BE%89/dp/B00FEC2GYM/ref=sr_1_1?ie=UTF8&amp;qid=1416641186&amp;sr=8-1&amp;keywords=%E9%82%93%E4%BF%8A%E8%BE%89">教材</a> 是好选择，也可以看 <a href="https://www.xuetangx.com/courses/TsinghuaX/30240184_1X/_/about">公开课</a>。注意<strong>熟记不同数据结构的不同操作的不同实现方式</strong>（比如 <a href="http://www.matrix67.com/blog/archives/1255">哈希表的插入删除查找</a>）<strong>的复杂度分析</strong>，不管面试官给你出的题目是难是易，妥妥儿的会问复杂度。</p>

<h2 id="section-7">算法题目</h2>

<h3 id="section-8">概述</h3>

<p>有过面试经历的企业（BAT、小米、宜信、猿题库、FreeWheel等）当中，还没有谁问过我需要复杂算法（比方说 <a href="http://zhidao.baidu.com/link?url=lx07DdsUSQO-zbwOqhlOCbXpT7Qj8pOtOHQ5G6JhNZYnT1vlgaBly5sOwZzqAhkZsqugfJRiRw1y7q857V44La">此链接</a> 中的很多知识点）才能解决的问题。我遇到的算法题目大致可以分为两类：</p>

<ul>
  <li>经典算法实现题 快速排序、归并排序、堆排序、KMP算法等都是重点，<strong>重要的是代码的正确性，其次是复杂度分析</strong>，当然，人家也不都是直接问你怎么实现这个具体算法，而是包装到情境里；</li>
  <li>思维益智题 考察你分析问题的能力，大部分可以归结到二分、动态规划、递归上，<strong>重要的是思路，其次是尽量低的复杂度，再次是代码的正确性</strong>。</li>
</ul>

<p>下面具体介绍我遇到的两种类型题目中的问题。</p>

<h3 id="section-9">分类讨论</h3>

<h4 id="section-10">类型一：经典算法实现题</h4>

<ol>
  <li>实现快速排序、归并排序、堆排序，各排序算法复杂度分析；</li>
  <li>实现KMP，解释原理；</li>
  <li>迷宫的深度搜索、广度搜索；</li>
  <li>写 find 函数，在目标串中匹配模式串（要考虑中文字符的情况）。</li>
</ol>

<h4 id="section-11">类型二：思维益智题</h4>

<ol>
  <li>数列中找第 k 大的数字（与快排或堆排序有关）；</li>
  <li>两个有序数组，寻找归并排序后数组的中位数/第 k 大数字（与二分有关）；</li>
  <li>一维数组，swap 其中的几对数字（每个数字只属于一次 swap 操作），实现查找（与二分有关）；</li>
  <li>一个有序数组，其中一个数字发生变异，但不知道变异后会不会影响整体序，如何实现查找；</li>
  <li>二维数组，每行递增，每列递增
    <ul>
      <li>实现查找；</li>
      <li>二维数组，每行递增，每列递增，求第 k 大的数；</li>
      <li>任意交换其中的两数，发现并恢复；</li>
    </ul>
  </li>
  <li>寻找字符串中第一个只出现一次的字符；</li>
  <li>统计数列中的逆序对（归并排序有关）；</li>
  <li>最长公共子串（动态规划有关）；</li>
  <li>最大子序列和，<a href="http://blog.csdn.net/caopengcs/article/details/36899787">允许交换一次的最大子序列和</a>；</li>
  <li>给定数组，寻找 next big（堆排序有关）；</li>
  <li>一维有序数组，经过循环位移后，最小的数出现在数列中间
    <ul>
      <li>如果原数组严格递增，如何找这个最小数；</li>
      <li>如果原数组严格递增或递减，如何找这个最小数；</li>
      <li>如果原数组非严格递增或递减，如何找这个最小数；</li>
    </ul>
  </li>
  <li>数组可能是递增、递减、递减后递增、递增后递减四种情况，递增递减都是非严格的，如果有转折点，返回转折点的值，否则返回-1；</li>
  <li>单向网络，起点和终点唯一且连通，寻找那些一旦被删除将导致起点终点无法连通的点；</li>
  <li>有序数组寻找和为某数的一对数字；</li>
  <li><a href="http://www.cnblogs.com/fuzhe1989/p/3428553.html">墙里能装多少水</a>；</li>
  <li>打印螺旋数组；</li>
  <li>打印组合数；</li>
  <li>字符数组，统计指定区间内的回文串个数。 </li>
</ol>

<h3 id="section-12">准备建议</h3>

<ul>
  <li>不要纠结于是否是最佳思路，要保证能在 10-15 分钟内给出一个解决方案，并分析复杂度；</li>
  <li>基础的可以读读 <a href="http://weibo.com/julyweibo?topnav=1&amp;wvr=6&amp;topsug=1">@研究者July</a> 的这本 <a href="http://frank19900731.github.io/ebook/the-art-of-programming-by-july/index.html">电子书</a>，更深入的可以阅读 CSDN 等博客中大牛们写的 ACM 解题报告；</li>
  <li><a href="http://www.hihocoder.com/">hihocoder</a>、<a href="http://www.topcoder.com/">topcoder</a>、<a href="https://oj.leetcode.com/">leetcode</a>、<a href="https://codility.com/">codility</a>、<a href="http://poj.org/">POJ</a> 等网站择一练手。</li>
</ul>

<h2 id="section-13">开放题目</h2>

<p>这类开放题目让你自主选择数据结构，主要是考察求职者对于数据结构的特性与使用场景的综合理解，在面对具体应用场景时能否运用已有的数据结构和算法知识提出合理的解决方案。一般来说在这类问题里哈希表的出场率会比较高……例题如下</p>

<ol>
  <li>大数据量的 url log，怎么去重且统计每个 url 的出现次数，复杂度分析；</li>
  <li>设计 cache 系统
    <ul>
      <li>设计 cache 的接口；</li>
      <li>可以用什么数据结构实现；</li>
      <li>如何实现可伸缩的容量；</li>
      <li>cache 的空间管理策略，比如 cache 哪些条目，何时清理；</li>
      <li>cache 系统启动时分配多大的空间，之后按照怎样的策略增大；</li>
    </ul>
  </li>
  <li>设计爬虫；</li>
  <li>流媒体播放客户端从多个完全相同的发送方接收视频包，同一发送方的包会按序到达，不同发送方的包则不一定，有可能会丢包，但还是要保证播放流畅度，设计播放客户端的算法。 </li>
</ol>

<h2 id="section-14">总结</h2>

<ul>
  <li>数据结构和算法的基础知识还是十分重要的，大部分题目的思路来源于此；</li>
  <li>训练自己算法复杂度的分析能力，<strong>有的时候对复杂度的分析会反过来会帮助你找到更好的算法</strong>；</li>
  <li>一定量的题目积累很重要，就好像准备高考数学压轴题一样，见识的越多，思路来得越快，当然，前提是你能够<strong>不断总结反思</strong>。</li>
</ul>

<p>继 <code>机器学习、大数据问题</code>、<code>智力题</code>、<code>数据结构与算法题</code>，我们在最后还会分享 <code>编程语言题</code>，敬请期待。</p>

<p>访问入口：</p>

<ul>
  <li><a href="http://frank19900731.github.io/blog/2014/11/06/mian-shi-jing-yan-zhi-ji-qi-xue-xi-da-shu-ju-wen-ti/">机器学习、大数据问题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/07/mian-shi-jing-yan-fen-xiang-zhi-zhi-li-ti/">智力题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">数据结构与算法题</a></li>
  <li><a href="http://frank19900731.github.io/blog/2014/11/25/mian-shi-jing-yan-fen-xiang-zhi-bian-cheng-yu-yan-ti/">编程语言题</a></li>
</ul>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/">http://frank19900731.github.io/blog/2014/11/18/mian-shi-jing-yan-fen-xiang-zhi-shu-ju-jie-gou-suan-fa-fen-xiang/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>

  ]]></description>
</item>

<item>
    <title>IDG 联合招聘笔试回忆</title>
    <link>http://realjenius.com/blog/2014/10/19/idg-lian-he-zhao-pin-bi-shi-hui-yi/</link>
    <author>R.J. Lorimer</author>
    <pubDate>2014-10-19T21:53:07+08:00</pubDate>
    <guid>http://realjenius.com/blog/2014/10/19/idg-lian-he-zhao-pin-bi-shi-hui-yi/</guid>
    <description><![CDATA[
     <!-- excerpt start -->

<p>IDG 投资的公司有脸萌、蘑菇街、果壳网等，详见此<a href="http://campus.idgvc.ourats.com/about-us/companys">链接</a>。对于这些小规模创业公司自己还是挺感兴趣的，参加联合招聘也很省事，笔试题目（B卷）回忆如下。</p>

<h2 id="section">选择题</h2>

<ol>
  <li>三个汽水瓶可以换一瓶汽水，要让28人都喝一瓶，买几瓶水？    答： 19瓶。</li>
  <li>50人中有两人生日相同的概率是多少？    答：0.97（注意是选择题，不是当场算的……）。</li>
  <li>1000人，三场演出，分别有500，350，250人观看，400人至少看两场，100人看三场，问多少人一场没看？    答：400人。</li>
  <li>逻辑判断，条件一：<code>x or y</code>；条件二：<code>not y or not z</code>；条件三：<code>非z 则 非y</code>，可以肯定的是哪项？    答：x 为 true。假设 非x，则 y，则 非z，则 非y，矛盾。</li>
  <li>安卓属于那种系统？    答：软实时系统 。</li>
  <li>分布式系统 与 网络系统 的区别？    答：协调多个机器完成同一任务。</li>
  <li>位示图的作用？    答：管理磁盘空间。</li>
  <li>6 个方块排一排，用三种颜色涂刷，要求相邻方块不同色且三种颜色都用上，有几种涂法？    答：90种。<code>3 * 2^5 - 3*2</code></li>
  <li>二叉树，第五层最多有多少个节点？（根节点是第一层）   答：16。</li>
  <li>红球、黑球、白球共60个，摸了一阵，统计红球大约15%，黑球大约45%，问有多少个白球？    答：16。</li>
  <li>253的16进制和二进制表示？    答：0xFD，11111101</li>
  <li>ABCDE，不可能的出栈顺序？</li>
  <li>快速排序，第一次运行后的结果是？</li>
  <li>程序题，问 c 的输出是多少？    答：-1。</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>程序题</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="k">do</span> <span class="p">{</span>
</span><span class="line">    <span class="o">--</span><span class="n">c</span><span class="p">;</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>还有一道想不起来了……</p>

<h2 id="section-1">综合题</h2>

<ol>
  <li>链表每隔K个翻转，要求常数空间存储，代码实现。比如 <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</code>，k=2 变成  <code>2-&gt;1-&gt;4-&gt;3-&gt;6-&gt;5</code>，k=3 变成  <code>3-&gt;2-&gt;1-&gt;6-&gt;5-&gt;4</code>。</li>
  <li>M X N方格，从 (0,0) 走到 (M,N) 有多少种走法记为L，如果 M、N 很大那么 L 这个数也是很大的，设计算法计算 L % 13。</li>
</ol>

<h2 id="section-2">总结</h2>

<p>一开始 IDG 说将由很牛的 ACM 选手出题，心里挺忐忑，现场做题才发现不是这样。虽然题目不难，不过限时 1 小时，自己只是将将做完。</p>

<!-- excerpt end -->

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/19/idg-lian-he-zhao-pin-bi-shi-hui-yi/">http://frank19900731.github.io/blog/2014/10/19/idg-lian-he-zhao-pin-bi-shi-hui-yi/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>

  ]]></description>
</item>

<item>
    <title>飞维美地笔试回忆</title>
    <link>http://realjenius.com/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/</link>
    <author>R.J. Lorimer</author>
    <pubDate>2014-10-18T22:29:30+08:00</pubDate>
    <guid>http://realjenius.com/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/</guid>
    <description><![CDATA[
     <p><strong>目录</strong></p>

<ul id="markdown-toc">
  <li><a href="#section">简介</a></li>
  <li><a href="#section-1">题目</a>    <ul>
      <li><a href="#linux">Linux题</a></li>
      <li><a href="#sql">SQL</a></li>
      <li><a href="#section-2">逻辑题</a></li>
      <li><a href="#section-3">读程序题</a></li>
      <li><a href="#section-4">写程序题</a></li>
      <li><a href="#section-5">网络题</a></li>
      <li><a href="#section-6">算法题</a></li>
      <li><a href="#section-7">广告算法</a></li>
      <li><a href="#section-8">吞吐量预测</a></li>
    </ul>
  </li>
  <li><a href="#section-9">总结</a></li>
</ul>

<!-- excerpt start -->

<p>这是面试、笔试总结的第一篇，其余会陆续更新直至十一月末，欢迎持续关注 <a href="http://frank19900731.github.io/category/%E9%9D%A2%E8%AF%95%E6%B1%82%E8%81%8C/">面试求职</a> 分类。</p>

<h2 id="section">简介</h2>
<p><a href="http://baike.baidu.com/view/5038799.htm?fr=aladdin">飞维美地</a> 这家公司是校招季才了解的一家公司，隶属 Comcast， 提供互联网视频广告投放、监测、预测、增值等关键解决方案，业务在欧美。公司主体在中国，纽约也有分部，恰可以提供 24 小时不间断服务。据称北京公司有120人，目标扩增至240人。</p>

<p>之前和靳导在东主楼参加了他们的算法分享会，干货多，实在。宣讲会上，进一步了解了公司的培训发展体系，感觉像一个小型大学，学习与成长的氛围都不错的样子，比较适合想在毕业后打好技术基础的同学，当然也能锻炼英语。不过作为在中国没有业务的小型外企，估计是没有北京户口吧。</p>

<p>书归正传，说题。据说这些题是公司员工近一个月想出来的，挺用心思的。共九类题，120分钟时间，可以全做，也可以挑选自己擅长的发挥。</p>

<!-- excerpt end -->

<h2 id="section-1">题目</h2>

<h3 id="linux">Linux题</h3>

<ol>
  <li>如何查看已使用的内存和剩余内存？</li>
  <li>如何查看所有进程，如何按照内存占比排序？</li>
  <li>给出 <code>ls -l</code> 的结果，写出文件类型和权限代码。</li>
  <li>子网 IP 为 192.168.10.0，子网掩码为 255.255.255.192，问子网格数和每个子网主机 IP 数？</li>
  <li>解释 DNS 的作用，举例说明 CNAME 的应用场景。</li>
</ol>

<h3 id="sql">SQL</h3>

<ul>
  <li>具体题目不描述了，反正是可以用 left + join 和 嵌套查询解决的问题。</li>
</ul>

<h3 id="section-2">逻辑题</h3>
<ul>
  <li>给定一种运算 NOTAND 及其真值表，让你仅用 NOTAND 表示 
    <ul>
      <li>OR（真值表给出）;</li>
      <li>命题（真值表给出）。</li>
    </ul>
  </li>
</ul>

<h3 id="section-3">读程序题</h3>
<ul>
  <li>GO 语言书写的二分查找，如果找到返回 Index，未找到返回 -1；现让你修改一行，使得如果找到返回 Index，未找到则返回小于待查找数的最大的数的 Index，如果还是没有，返回 -1。</li>
</ul>

<h3 id="section-4">写程序题</h3>
<ul>
  <li>给出一些函数及解释（pthread_mutex_lock， pthread_mutex_unlock， pthread_cond_wait， pthread_cond_signal， pthread_cond_broadcast），让你实现一个线程安全队列类中的 6 个函数（构造函数、析构函数、enqueue、dequeue、size、destroy，这里 destroy 的作用是清空队列 + 清空插入等待和读取等待）。</li>
</ul>

<h3 id="section-5">网络题</h3>
<ol>
  <li>页面由 A 重定向到 B，站点接受要访问 A 的请求，返回的代码是 302 还是 301，HEAD 头里 B 对应的属性是 Location 还是 Referral。 </li>
  <li>跨站脚本攻击相关</li>
  <li>忘了……</li>
</ol>

<h3 id="section-6">算法题</h3>
<ul>
  <li>如果可以在多项式时间内解决判断正整数集合内是否存在和相等的两个子集（互为补集）的问题并给出一组解，请问如何设计高效算法解决判断正整数集合内是否存在一个子集的和等于指定值这一问题并给出一组解？</li>
</ul>

<h3 id="section-7">广告算法</h3>
<ul>
  <li>已有按照优先级排列的广告，要处理广告请求。一个广告请求包含若干个指定时长的广告中断，约束条件有
    <ul>
      <li>有些广告对儿不能出现在同一个广告请求中；</li>
      <li>有些广告对儿不能出现在同一个广告中断中；</li>
      <li>广告中断中的广告时间总和不超过广告中断时长；</li>
    </ul>

    <p>请设计Advertisement、Request、Break类，实现这一算法。</p>
  </li>
</ul>

<h3 id="section-8">吞吐量预测</h3>
<ul>
  <li>给出网络带宽，读写速度，文件大小，压缩比，单条记录的长度，单服务器处理速度等数据，以及日志的处理方法，
    <ul>
      <li>要求估算单台机器处理500G 日志需要多长时间。</li>
      <li>现在想要实时处理日志，5分钟处理之前15分钟的，估计需要多少台机器。</li>
    </ul>
  </li>
</ul>

<p>这道题大致是这个意思吧，当时都给我整晕了，大概算了算，肯定不完善。</p>

<h2 id="section-9">总结</h2>

<p>题型比较广泛，不太需要 ACM 等相关技能，主要看分析思考的能力。当然，对于一些固定知识点的考察（比如网络相关的），也着实让我觉得有必要在考后夯实一下基础。<strong>基础还是记在脑子里比较好，不要太依赖搜索引擎。</strong></p>

<p class="post-footer">原文地址: <a href="http://frank19900731.github.io/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/">http://frank19900731.github.io/blog/2014/10/18/fei-wei-mei-di-bi-shi-hui-yi/</a><br /> 作者 <a href="http://frank19900731.github.io">Frank Song</a>&nbsp; 发布于 <a href="http://frank19900731.github.io">http://frank19900731.github.io</a>&nbsp; 转载请注明</p>

  ]]></description>
</item>
